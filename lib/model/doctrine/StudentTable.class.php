<?php
/**
 * StudentTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class StudentTable extends Doctrine_Table {

	/**
	 * Returns an instance of this class.
	 *
	 * @return object StudentTable
	 */
	public static function getInstance() {

		return Doctrine_Core::getTable ( 'Student' );
	}

	/**
	 * Lay danh sach Member
	 *
	 * @return $list
	 *
	 */
	public function doSelectQuery(Doctrine_Query $query) {

		$a = $query->getRootAlias ();

		//$query->select ($a.'.*');
		
		$query->select (
				$a.'.id AS id,'
				.$a.'.student_code AS student_code,'
				.$a.'.first_name AS first_name,'
				.$a.'.last_name AS last_name,'
				.$a.'.birthday AS birthday,'
				.$a.'.sex AS sex,'
				.$a.'.common_name AS common_name,'
				.$a.'.nick_name AS nick_name,'
				.$a.'.image AS image,'
				.$a.'.avatar AS avatar,'
				.$a.'.year_data AS year_data,'
				.$a.'.deleted_at AS deleted_at,'
				.$a.'.status AS status,'
				.$a.'.ps_customer_id AS ps_customer_id,'
				.$a.'.ps_workplace_id AS ps_workplace_id,'
				.$a.'.start_date_at AS start_date_at,'
				.$a.'.updated_at AS updated_at,'
				//.'mc.id AS class_id,mc.name AS current_class_name,'
				//.$a.'.nick_name AS current_class_name'
				);
		
		//$query->addSelect ( $a . '.common_name AS s__common_name', $a . '.nick_name AS s__nick_name' );
		/**/
		$query->addSelect ( 'CONCAT(u.first_name, " ", u.last_name) AS updated_by,cus.school_code AS school_code' );

		$query->leftJoin ( $a . '.UserUpdated u' );

		$query->innerJoin ( $a . '.PsCustomer cus' );
		
		//$query->leftJoin (  $a .'.MyClass mc' );
		
		// $query->addWhere ( $a . '.deleted_at IS NULL' );

		if (! myUser::credentialPsCustomers ( 'PS_STUDENT_MSTUDENT_FILTER_SCHOOL' ) && myUser::getPscustomerID () > 0) {
			$query->addWhere ( $a . '.ps_customer_id = ?', myUser::getPscustomerID () );
		}

		return $query;
	}

	public function doSelectQueryStudentInfo(Doctrine_Query $query) {

		$a = $query->getRootAlias ();

		$query->select ( $a . '.id AS id, ' . $a . '.image AS image, ' . $a . '.student_code AS student_code, ' . $a . '.first_name AS first_name, ' . $a . '.last_name AS last_name, ' . $a . '.sex AS sex, ' . $a . '.birthday AS birthday, ' . $a . '.status AS status,  ' . $a . '.avatar AS avatar, ' . $a . '.year_data AS year_data , ' . 'cus.school_code AS school_code,' . $a . '.user_updated_id AS user_updated_id, ' . $a . '.updated_at AS updated_at,'.$a.'.start_date_at AS start_date_at');

		$query->addSelect ( 'CONCAT(u.first_name, " ", u.last_name) AS updated_by' );

		$query->leftJoin ( $a . '.UserUpdated u' );

		$query->innerJoin ( $a . '.PsCustomer cus' );

		// $query->leftJoin($a.'.StudentClass sc With (DATE_FORMAT(sc.start_at,"%Y%m%d") <= ? AND (sc.stop_at IS NULL OR DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?))', array($date_at, $date_at) );

		// $query->leftJoin('sc.MyClass mc');

		// $query->leftJoin('mc.PsClassRooms cr');

		// $query->leftJoin('cr.PsWorkPlaces wp');

		$query->addWhere ( $a . '.deleted_at IS NULL' );

		if (! myUser::credentialPsCustomers ( 'PS_STUDENT_MSTUDENT_FILTER_SCHOOL' ) && myUser::getPscustomerID () > 0) {
			$query->addWhere ( $a . '.ps_customer_id = ?', myUser::getPscustomerID () );
		}

		$query->addOrderBy ( $a . '.last_name, ' . $a . '.first_name' );

		return $query;
	}

	/**
	 * lấy tên học sinh dựa vào id
	 *
	 * @param int $student_id
	 * @return obj
	 */
	public function getStudentName($student_id) {

		$query = $this->createQuery ( 'a' );

		$query->select ( 'CONCAT(a.first_name, " ", a.last_name) AS name' );

		$query->addWhere ( 'a.id = ?', $student_id );

		return $query->fetchOne ();
	}

	public function getStudentByRelative($relative_id) {

		$query = $this->createQuery ( 'a' )
			->addWhere ( 'a.relative_id = ? ',$relative_id );

		return $query->execute ();
	}
	
	/**
	 * lấy thong tin hoc sinh theo mang id truyen vao
	 *
	 * @param int $student_ids
	 * @return obj
	 */
	public function getStudentInfoByArray($student_ids) {
		
		$query = $this->createQuery ( 'a' );
		
		$query->select ( 'a.*' );
		
		$query->whereIn ( 'a.id', $student_ids );
		
		return $query->execute ();
	}
	
	/**
	 * lấy các cột trong bang hoc sinh
	 * 
	 * @param int $student_id
	 * @return obj
	 */
	public function getStudentByField($student_id,$getField = null) {
		
		$query = $this->createQuery () ->select ( $getField != '' ? $getField : '*' );
		
		$query->addWhere ( 'id = ?', $student_id );
		
		return $query->fetchOne ();
	}

	/**
	 * lấy danh sách học sinh theo khóa học
	 *
	 * @param int $course_id
	 * @return list obj
	 */
	public function getStudentByCourseId($course_id) {

		$date_at = date ( 'Ymd' );
		$query = Doctrine_Query::create ()->from ( 'Student s' );

		$query->select ( 's.image AS image, sco.id AS course_id , sch.id AS course_schedule, se.id, ss.id ,s.year_data as year_data, s.id as student_id, s.sex AS sex, cus.school_code AS school_code, log.id as logtime_id, CONCAT(s.first_name, " ", s.last_name) AS full_name' );

		$query->innerJoin ( 's.StudentClass sc With (DATE_FORMAT(sc.start_at,"%Y%m%d") <= ? AND (sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?))', array (
				$date_at,
				$date_at ) );

		$query->innerJoin ( 's.PsCustomer cus' );

		$query->innerJoin ( 's.StudentService ss With ss.delete_at IS NULL' );

		$query->innerJoin ( 'ss.Service se ' );

		$query->innerJoin ( 'se.PsServiceCourses sco' );

		$query->innerJoin ( 's.PsLogtimes log' );

		$query->innerJoin ( 'sco.PsServiceCourseSchedules sch' );

		$query->addWhere ( 's.deleted_at IS NULL' );

		$query->whereIn ( 'sc.type', array (
				PreSchool::SC_STATUS_TEST,
				PreSchool::SC_STATUS_OFFICIAL ) );

		$query->addWhere ( 'sch.ps_service_course_id = ?', $course_id );
		$query->orderBy ( 's.last_name,s.first_name' );

		return $query->execute ();
	}

	/**
	 * Lay danh sach hoc sinh(Tat ca trang thai) cua 1 lop hoc
	 *
	 * @param
	 *        	int - $myclass_id
	 * @param
	 *        	int - $tracked_at
	 * @return $list
	 *
	 */
	public function getAllStudentsByClassId($myclass_id, $tracked_at = null) {

		$tracked_at = ($tracked_at == null) ? date ( 'Ymd' ) : $tracked_at;

		$q = $this->createQuery ( 'sc' )
			->
		// cus.school_name AS school_name, cus.address AS address, cus.tel AS tel, cus.mobile AS mobile, cus.logo AS logo
		select ( "sc.id as id,sc.student_id AS student_id, sc.type AS type, s.id AD s_id, s.student_code as student_code, s.first_name AS first_name, s.last_name AS last_name, s.nick_name AS nick_name, s.birthday AS birthday, s.sex AS sex, s.year_data AS year_data, s.address AS address, s.nationality AS nationality, rel.title AS title_religion, eth.title AS title_ethnic " )
			->innerJoin ( 'sc.Student s' )
			->innerJoin ( 's.PsCustomer cus' )
			->leftJoin ( 's.PsReligion rel' )
			->leftJoin ( 's.PsEthnic eth' )
			->addWhere ( 's.deleted_at IS NULL' )
			->andWhere ( ' DATE_FORMAT(sc.start_at,"%Y%m%d") <= ?', date ( 'Ymd', strtotime ( $tracked_at ) ) )
			->andWhere ( 'sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?', date ( 'Ymd', strtotime ( $tracked_at ) ) )
			->andWhere ( 'sc.myclass_id = ?', $myclass_id )
			->orderBy ( 's.last_name ASC, s.first_name' );

		return $q->execute ();
	}

	/**
	 * Lay hoc sinh theo student id
	 *
	 * @author Pham Van Thien (thien95tm@gmail.com)
	 * @param
	 *        	int student_id
	 * @return Obj
	 */
	public function getStudentById($student_id) {

		$date = date ( 'Ymd' );

		$query = $this->createQuery ( 's' );

		$query->select ( 's.id AS id, ' . 's.first_name AS first_name, ' . 's.last_name AS last_name, ' . 's.deleted_at AS deleted_at,' . 'mc.name AS class_title, ' . 's.birthday as birthday,'. 's.start_date_at as start_date_at,' . 'sc.myclass_id AS class_id, ' . 's.image AS image, ' . 's.sex AS sex, ' . 's.common_name AS common_name, ' . 's.nick_name AS nick_name, ' . 's.status AS status, ' . 's.address AS address, ' . 's.nationality as nationality, ' . 'cus.school_code AS school_code, ' . 'cus.school_name AS school_name, ' . 'cus.address AS school_address, ' . 'd.name as district_name, ' . 'p.name as province_name, ' . 'w.name as ward_name, ' . 'e.title as ethnic_title, ' . 'pr.title as religion_title, ' . 's.user_updated_id AS user_updated_id, ' . 's.updated_at AS updated_at' );

		$query->addSelect ( 'CONCAT(u.first_name, " ", u.last_name) AS updated_by, wp.title AS wp_title, cus.id AS ps_customer_id ' );

		$query->leftJoin ( 's.UserUpdated u' );

		$query->innerJoin ( 's.PsCustomer cus' );

		$query->leftJoin ( 's.PsEthnic e' );

		$query->leftJoin ( 's.PsReligion pr' );

		$query->leftJoin ( 'cus.PsWard w' );

		$query->leftJoin ( 'w.PsDistrict d' );

		$query->leftJoin ( 'd.PsProvince p' );

		$query->leftJoin ( 's.PsWorkPlaces wp' );

		$query->leftJoin ( 's.StudentClass sc With DATE_FORMAT(sc.start_at,"%Y%m%d") <= ? AND (sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?)', array (
				$date,
				$date ) );

		$query->leftJoin ( 'sc.MyClass mc' );

		$query->addWhere ( 's.id = ?', $student_id );

		$query->orderBy ( 's.last_name' );

		return $query->fetchOne ();
	}

	/**
	 * Lay danh sach hoc sinh
	 * Phung Van Thanh
	 */
	public function getListStudentServiceByClass($ps_customer_id, $ps_workplace_id = null, $class_id = null, $ps_month = null) {

		$q = $this->createQuery ( 's' )
			->select ( "s.id AS id,s.student_code AS student_code,cus.school_code AS school_code,cus.year_data AS year_data,mc.name as class_name,sc.id as sc_id,mc.id as mc_id,
            s.birthday AS birthday,s.start_date_at AS start_date_at, CONCAT(s.first_name, ' ',  s.last_name) AS student_name, s.image as image
            " )
			->innerJoin ( 's.StudentClass sc' )
			->leftJoin ( 'sc.MyClass mc' )
			->leftJoin ( 'mc.PsClassRooms cr' )
			->innerJoin ( 's.PsCustomer cus' )
			->where ( 's.deleted_at IS NULL' )
			->andWhereIn ( 'sc.type', array_keys(PreSchool::$check_status_student) )
			->
		addWhere ( 's.ps_customer_id = ?', $ps_customer_id );
		if ($class_id > 0) {
			$q->andWhere ( 'sc.myclass_id = ?', $class_id );
			if ($ps_month != '') {
				$date_at = '01-' . $ps_month;
				$q->andWhere ( 'DATE_FORMAT(sc.start_at,"%Y%m") <= ?', date ( 'Ym', strtotime ( $date_at ) ) );
				$q->andWhere ( 'sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m") >= ?', date ( 'Ym', strtotime ( $date_at ) ) );
			} else {
				$q->andWhere ( 'DATE_FORMAT(sc.start_at,"%Y%m%d") <= ?', date ( 'Ymd' ) );
				$q->andWhere ( 'sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?', date ( 'Ymd' ) );
			}
		}

		if ($ps_month != '') {
			$date_at = '01-' . $ps_month;
			$q->andWhere ( 'DATE_FORMAT(sc.start_at,"%Y%m") <= ?', date ( 'Ym', strtotime ( $date_at ) ) );
			$q->andWhere ( 'sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m") >= ?', date ( 'Ym', strtotime ( $date_at ) ) );
		}

		if ($ps_workplace_id > 0) {
			$q->andWhere ( 'cr.ps_workplace_id = ?', $ps_workplace_id );
		}

		$q->orderBy ( 'mc.id, s.last_name ASC, s.first_name' );

		return $q;
	}

	public function getListStudentServiceByClassId($ps_customer_id, $ps_workplace_id, $class_id, $month) {

		$date = '01-' . $month;
		$q = $this->createQuery ( 's' )
			->select ( "s.id AS id,s.student_code AS student_code,cus.school_code AS school_code,cus.year_data AS year_data,
            s.birthday AS birthday, CONCAT(s.first_name, ' ',  s.last_name) AS student_name, 
            rs.id AS rs_id
            " )
			->innerJoin ( 's.StudentClass sc' )
			->innerJoin ( 's.ReceivableStudent rs' )
			->leftJoin ( 'sc.MyClass mc' )
			->leftJoin ( 'mc.PsClassRooms cr' )
			->innerJoin ( 's.PsCustomer cus' )
			->where ( 's.deleted_at IS NULL' )
			->andWhereIn ( 'sc.type', array_keys(PreSchool::$check_status_student) )
			->
		addWhere ( 's.ps_customer_id = ?', $ps_customer_id );
		if ($class_id > 0) {
			$q->andWhere ( 'sc.myclass_id = ?', $class_id );
			$q->andWhere ( 'DATE_FORMAT(sc.start_at,"%Y%m%d") <= ?', date ( 'Ymd' ) );
			$q->andWhere ( 'sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?', date ( 'Ymd' ) );
		} else {
			$q->andWhere ( 'cr.ps_workplace_id = ?', $ps_workplace_id );
		}

		$q->andWhere ( "DATE_FORMAT(rs.receivable_at,'%Y%m') = ? ", date ( 'Ym', strtotime ( $date ) ) );
		$q->orderBy ( 's.last_name ASC, s.first_name' );

		return $q;
	}

	/**
	 * Lay danh sach hoc sinh theo student id
	 *
	 * @author Pham Van Thien (thien95tm@gmail.com)
	 * @param
	 *        	int student_id
	 * @return Obj
	 *
	 *
	 */
	public function setSqlStudentById($student_id) {

		$query = $this->createQuery ( 's' );

		$query->select ( 's.id AS id,CONCAT(s.first_name," " ,s.last_name) AS name, s.sex as sex, s.birthday as birthday,s.student_code as student_code,s.ps_customer_id as ps_customer_id' );

		$query->addWhere ( 's.id = ?', $student_id );

		return $query;
	}

	/**
	 * FUNCTIOON: psGetStudentsByPsClass($class_id = '') Lay tat ca hoc sinh co trong lop hoc
	 *
	 * @author Nguyen Chien Thang
	 * @param int $myclass_id
	 * @return list obj
	 */
	public function psGetStudentsByPsClass($class_id = '') {

		$q = $this->createQuery ( 's' )
			->select ( 's.id AS id,s.student_code as student_code, CONCAT(s.first_name," ",s.last_name) AS student_name' )
			->leftJoin ( 's.StudentClass sc' )
			->where ( 's.deleted_at IS NULL' )
			->orderBy ( 's.last_name ASC' );

		return $q->execute ();
	}

	// SQL lay tat ca hoc sinh trong mot lop hoc
	public function psGetStudentsByClass($class_id) {

		$q = $this->createQuery ( 's' )
			->select ( 's.id AS id,s.student_code as student_code, CONCAT(s.first_name," ",s.last_name) AS student_name, CONCAT(s.first_name," ",s.last_name) AS name' )
			->leftJoin ( 's.StudentClass sc' )
			->addWhere ( 's.deleted_at IS NULL' )
			->andWhereIn ( 'sc.type', array_keys(PreSchool::$check_status_student) )
			->andWhere ( 'sc.myclass_id = ?', $class_id )
			->orderBy ( 's.id' );
		return $q->execute();
	}

	/**
	 * SQL Lay danh sach hoc sinh dang hoat dong cua 1 lop hoc o mot thoi diem datetime phuc vu cho viec fill data vao selectbox
	 *
	 * @param  int - $myclass_id
	 * @param  $tracked_at - date Y-m-d
	 * @return SQL
	 *
	 */
	public function setSqlListStudentsByClassId($myclass_id, $tracked_at = null) {

		$tracked_at = ($tracked_at == null) ? date ( 'Ymd' ) : $tracked_at;

		$format_tracked_at = date ( 'Ymd', strtotime ( $tracked_at ) );

		$q = $this->createQuery ( 's' )
			->select ( "s.id AS id, CONCAT(CONCAT(s.student_code ,' - ',CONCAT(s.first_name, ' ',  s.last_name)), '-', DATE_FORMAT(s.birthday,'%d/%m/%Y'))  AS name" )
			->
		// ->innerJoin ( 's.StudentClass sc' )
		// ->addWhere ( ' DATE_FORMAT(sc.start_at,"%Y%m%d") <= ?', $format_tracked_at )
		// ->addWhere ( 'sc.stop_at IS NULL OR DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?', $format_tracked_at )

		innerJoin ( 's.StudentClass sc With (DATE_FORMAT(sc.start_at,"%Y%m%d") <= ? AND (sc.stop_at IS NULL OR DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?))', array (
				$format_tracked_at,
				$format_tracked_at ) )
			->addWhere ( 's.deleted_at IS NULL' )
			->andWhereIn ( 'sc.type', array_keys(PreSchool::$check_status_student) )
			->addWhere ( 'sc.myclass_id = ?', $myclass_id )
			->orderBy ( 's.last_name ASC, s.first_name' );

		return $q;
	}

	/**
	 * Lấy danh sách học sinh trong lớp tại thời điểm Ym
	 *
	 * @author Phung Van Thanh
	 *        
	 */
	public function getObjectStudentByClass($ps_customer_id, $myclass_id = null, $tracked_at = null, $ps_workplace_id = null) {

		$tracked_at = ($tracked_at == null) ? date ( 'Ymd' ) : $tracked_at;

		$format_tracked_at = date ( 'Ym', strtotime ( $tracked_at ) );

		$q = $this->createQuery ( 's' )
			->select ( "s.id AS id,s.student_code AS student_code,s.sex AS sex,
            s.birthday AS birthday,s.start_date_at AS start_date_at, CONCAT(s.first_name, ' ',  s.last_name) AS student_name, s.image as image
            ")
			->addSelect ( 'sc.id,mc.id,mc.name as class_name, pg.id as pg_id, pg.policy_code as policy_code, sc.type as student_status' )
			->innerJoin ( 's.StudentClass sc With (DATE_FORMAT(sc.start_at,"%Y%m") <= ? AND (sc.stop_at IS NULL OR DATE_FORMAT(sc.stop_at,"%Y%m") >= ?))', array (
				$format_tracked_at,
				$format_tracked_at ) )
			->innerJoin ( 'sc.MyClass mc' )
			->leftJoin ( 's.PsPolicyGroup pg' )
			->addWhere ( 's.deleted_at IS NULL' )
			->andWhereIn ( 'sc.type', array_keys(PreSchool::$check_status_student) );

		if ($ps_workplace_id > 0) {
			$q->andWhere ( 'mc.ps_workplace_id = ?', $ps_workplace_id );
		}
		if ($myclass_id > 0) {
			$q->addWhere ( 'sc.myclass_id = ?', $myclass_id );
		}

		$q->andWhere ( 's.ps_customer_id =?', $ps_customer_id )
			->
		orderBy ( 'mc.id, s.last_name ASC, s.first_name' );

		return $q->execute ();
	}

	/**
	 * SQL Lay danh sach hoc sinh dang hoat dong cua 1 lop hoc o mot thoi diem datetime va ko dang ky hoc thu 7 co dinh phuc vu cho viec fill data vao selectbox
	 *
	 * @param
	 *        	int - $myclass_id
	 * @param
	 *        	int - $tracked_at
	 * @return SQL
	 *
	 */
	public function setSqlListStudentsNotSaturday($myclass_id, $tracked_at = null) {

		$tracked_at = ($tracked_at == null) ? date ( 'Ymd' ) : $tracked_at;

		$q = $this->createQuery ( 's' )
			->select ( "s.id AS id, CONCAT(s.first_name, ' ',  s.last_name) AS name" )
			->innerJoin ( 's.StudentClass sc' )
			->where ( 's.deleted_at IS NULL' )
			->andWhereIn ( 'sc.type', array_keys(PreSchool::$check_status_student) )
			->andWhere ( ' DATE_FORMAT(sc.start_at,"%Y%m%d") <= ?', date ( 'Ymd', strtotime ( $tracked_at ) ) )
			->andWhere ( 'sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?', date ( 'Ymd', strtotime ( $tracked_at ) ) )
			->andWhere ( 'sc.myclass_id = ?', $myclass_id )
			->andWhere ( 'sc.myclass_mode = ?', PreSchool::NOT_ACTIVE )
			->orderBy ( 's.last_name ASC, s.first_name' );
		return $q;
	}

	/**
	 * Lay tat ca hoc sinh theo truong Phung Van Thanh return $query
	 *
	 * @param
	 *        	$ps_customer_id
	 */
	public function setAllStudentsByCustomerId($ps_customer_id = null, $student_id = null) {

		$q = $this->createQuery ( 's' )
			->select ( "s.id AS id, CONCAT(s.first_name, ' ',  s.last_name) AS title" )
			->innerJoin ( 's.StudentClass sc' )
			->addWhere ( 's.deleted_at IS NULL' )
			->andWhereIn ( 'sc.type', array_keys(PreSchool::$check_status_student) );
		if ($ps_customer_id > 0) {
			$q = $q->andWhere ( 's.ps_customer_id = ?', $ps_customer_id );
		}

		if ($student_id > 0) {
			$q = $q->andWhere ( 's.id =?', $student_id );
		}

		return $q;
	}

	/**
	 * Lay tat ca hoc sinh theo truong hoac theo co so
	 *
	 * Phung Van Thanh
	 *
	 * @param
	 *        	$ps_customer_id
	 */
	public function getAllStudentsByCustomerId($ps_customer_id, $ps_workplace_id = null, $ps_class_id = null) {

		// echo $ps_worplace_id; die();
		$q = $this->createQuery ( 's' )
			->select ( "s.id AS id, s.student_code AS student_code, mc.id as mc_id,sc.id as sc_id,CONCAT(s.first_name, ' ',  s.last_name) AS student_name, s.birthday AS birthday,
			s.sex AS sex" )
			->innerJoin ( 's.StudentClass sc' )
			->innerJoin ( 'sc.MyClass mc' )
			->addWhere ( 's.deleted_at IS NULL' )
			->andWhereIn ( 'sc.type', array_keys(PreSchool::$check_status_student) )
			->andWhere ( 's.ps_customer_id = ?', $ps_customer_id );
		if ($ps_workplace_id > 0) {
			$q->andWhere ( 'mc.ps_workplace_id = ?', $ps_workplace_id );
		}
		if ($ps_class_id > 0) {
			$q->andWhere ( 'sc.myclass_id = ?', $ps_class_id );
		}
		return $q->execute ();
	}

	/**
	 * Lay tat ca hoc sinh theo truong va co so tai thoi diem
	 *
	 * Phung Van Thanh
	 *
	 * @param
	 *        	$ps_customer_id,$ps_workplace_id,$tracked_at
	 */
	public function getAllStudentsByCustomerIdWithDate($ps_customer_id, $ps_workplace_id = null, $tracked_at = null) {

		$tracked_at = ($tracked_at == null) ? date ( 'Ym' ) : $tracked_at;

		$date_at = date ( 'Ym', $tracked_at );

		$q = $this->createQuery ( 's' )
			->select ( '*' );

		$q->addSelect ( 'sc.id,mc.id,cr.id,mc.name as class_name' );

		$q->innerJoin ( "s.StudentClass sc " );

		$q->innerJoin ( 'sc.MyClass mc' )
			->innerJoin ( 'mc.PsClassRooms cr' )
			->addWhere ( 's.deleted_at IS NULL' )
			->andWhereIn ( 'sc.type', array_keys(PreSchool::$check_status_student) )
			->andWhere ( 's.ps_customer_id = ?', $ps_customer_id )
			->andWhere ( 'DATE_FORMAT(sc.start_at,"%Y%m") <= ? AND (sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m") >= ?)', array (
				$date_at,
				$date_at ) );
		if ($ps_workplace_id > 0) {
			$q->andWhere ( 'cr.ps_workplace_id = ?', $ps_workplace_id );
		}

		$q->orderBy ( 'mc.name, s.last_name' );

		return $q->execute ();
	}

	/**
	 * SQL Lay danh sach hoc sinh dang hoat dong cua 1 truong o mot thoi diem datetime phuc vu cho viec fill data vao selectbox
	 *
	 * @param
	 *        	int - $customer_id
	 * @param
	 *        	int - $tracked_at
	 * @return SQL
	 *
	 */
	public function setSqlListStudentsByCustomerId($customer_id, $tracked_at = null) {

		$tracked_at = ($tracked_at == null) ? date ( 'Ymd' ) : $tracked_at;

		$q = $this->createQuery ( 's' )
			->select ( "s.id AS id, CONCAT(s.first_name, ' ',  s.last_name) AS name" )
			->innerJoin ( 's.StudentClass sc' )
			->
		// ->innerJoin('s.PsCustomer cus')
		where ( 's.deleted_at IS NULL' )
			->andWhereIn ( 'sc.type', array_keys(PreSchool::$check_status_student) )
			->
		// ->andWhere(' DATE_FORMAT(sc.start_at,"%Y%m%d") <= ?', date('Ymd', strtotime($tracked_at)))
		// ->andWhere('sc.stop_at IS NULL OR DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?', date('Ymd', strtotime($tracked_at)))
		// Thanh da sua lai dau '.' thanh dau ','
		andWhere ( 's.ps_customer_id = ?', $customer_id )
			->orderBy ( 's.last_name ASC, s.first_name' );

		return $q;
	}

	/**
	 * FUNCTIOON: getPsStudentsNotInClass($class_id = '') Lay hoc sinh(trang thai: dang hoat dong - hoc thu) khong thuoc lop hoc
	 *
	 * @author Nguyen Chien Thang
	 * @param int $myclass_id
	 * @param int $ps_customer_id
	 * @return list obj
	 */
	public function getPsStudentsNotInClass($ps_class_id, $ps_customer_id) {

		$a = 's';
		$q = $this->createQuery ( 's' );
		$q->select ( 's.id AS id, ' . 's.image AS image, ' . 's.student_code AS student_code, ' . 's.first_name AS first_name, ' . 's.last_name AS last_name, ' . 's.sex AS sex, ' . 's.birthday AS birthday, c.name AS class_name' );

		$q->leftJoin ( 's.StudentClass sc With sc.myclass_id = ?', $ps_class_id );

		$q->innerJoin ( 'sc.MyClass c With sc.myclass_id = c.id AND sc.is_activated = ?', PreSchool::ACTIVE );

		$q->andWhere ( 's.deleted_at IS NULL' );

		/*
		 * $q->andWhereIn('s.status', array( PreSchool::S_STATUS_ACTIVITIES, PreSchool::S_STATUS_SCHOOL_TEST ));
		 */

		$q->where ( 'sc.id IS NULL OR s.id IS NULL' );

		$q->andWhere ( 's.ps_customer_id = ?', $ps_customer_id );

		$q->addOrderBy ( 's.birthday DESC' );

		return $q->execute ();
	}

	/**
	 * Lay toan bo cac ngay di hoc cua mot hoc sinh trong thang
	 *
	 * @author Nguyen Chien Thang
	 * @param int $student_id
	 * @param date(yyyymm) $date
	 * @return list
	 *
	 */
	public function getLogtimeByDate($student_id, $date) {

		$month_year = $date;

		$q = $this->createQuery ()
			->select ( 'd.iday' )
			->addSelect ( 'logt.id as logtime_id,logt.log_value as log_value,  s.id as student_id, logt.login_at as login_at, logt.login_relative_id as login_relative_id, logt.login_member_id as login_member_id, logt.logout_at as logout_at, logt.logout_relative_id as logout_relative_id,
            logt.logout_member_id as logout_member_id, logt.note as note, mc.id as myclass_id, sc.id as student_class_id' );
		$q->addSelect ( 'GROUP_CONCAT( CONCAT(m.id,";",m.first_name," ",m.last_name)) as ps_member ' );

		$q->addSelect ( 'logt.created_at AS created_at, logt.updated_at AS updated_at' );
		$q->addSelect ( 'u.id AS u_id, CONCAT(u.first_name, " ", u.last_name) as updated_by' );
		$q->addSelect ( 'CONCAT(u1.first_name, " ", u1.last_name) as created_by' );

		$q->from ( 'DayInMonth d' )
			->leftJoin ( 'd.PsLogtimes logt ON (DATE_FORMAT(logt.login_at,"%d") = d.iday) AND (DATE_FORMAT(logt.login_at,"%Y%m") = ? AND logt.student_id = ?)', array (
				$month_year,
				$student_id ) )
			->leftJoin ( 'logt.Student s With (s.deleted_at IS NULL AND s.id = ?)', array (
				$student_id ) )
			->leftJoin ( 'd.StudentClass sc ON (DATE_FORMAT(sc.start_at,"%Y%m") <= ? AND sc.student_id = ?  AND (sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m") >= ?) AND sc.is_activated = ?)', array (
				$month_year,
				$student_id,
				$month_year,
				PreSchool::ACTIVE ) )
			->leftJoin ( 'sc.MyClass mc' )
			->leftJoin ( 'mc.PsTeacherClass tc' )
			->leftJoin ( 'tc.PsMember m' )
			->leftJoin ( 'logt.UserCreated u1' )
			->leftJoin ( 'logt.UserUpdated u' )
			->groupBy ( 'd.id' )
			->orderBy ( 'd.iday ASC' );

		return $q->execute ();
	}

	/**
	 * check lop hoc sinh trong mot thang
	 *
	 * @author pham van thien
	 *        
	 * @param int $student_id
	 * @param date(yyyymm) $date
	 * @return bool
	 *
	 */
	public function checkStudentClassByDate($student_id, $date) {

		$month_year = $date;

		$q = $this->createQuery ( 's' )
			->select ( 's.id,sc.id' )
			->innerJoin ( 's.StudentClass sc' )
			->where ( 'DATE_FORMAT(sc.start_at,"%Y%m") <= ? AND sc.student_id = ?  AND (sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m") >= ?) AND sc.is_activated = ?', array (
				$month_year,
				$student_id,
				$month_year,
				PreSchool::ACTIVE ) );

		$records = $q->execute ();

		return count ( $records ) ? true : false;
	}

	/**
	 * sql tat ca cac hoc sinh dang ky dich vu ma chua dang ky lop hoc
	 *
	 * @param int $ps_service_course_id,
	 *        	$ps_service_id
	 *        	
	 * @return sql
	 *
	 */
	public function setListStudentForPsServiceCourses($ps_service_id, $keywords = null) {

		$q = $this->createQuery ( 's' )
			->select ( 's.id as student_id, s.student_code AS student_code, ss.id as student_service_id, s.image AS image,s.sex AS sex,s.birthday as birthday, s.year_data AS year_data' );
		$q->addSelect ( 'CONCAT(s.first_name, " ", s.last_name) AS full_name' )
			->innerJoin ( 's.StudentService ss' )
			->where ( 'ss.ps_service_course_id IS NULL' )
			->addWhere ( 'ss.service_id = ?', $ps_service_id )
			->addWhere ( 'delete_at IS NULL' );
		if ($keywords != null) {
			$keywords = PreString::trim ( $keywords );

			$keywords = '%' . PreString::strLower ( $keywords ) . '%';
			$q->addWhere ( 'LOWER(s.student_code) LIKE ? OR LOWER(s.first_name) LIKE ? OR LOWER(s.last_name) LIKE ? OR (LOWER( CONCAT(s.first_name," ", s.last_name) ) LIKE ?) ', array (
					$keywords,
					$keywords,
					$keywords,
					$keywords ) );
		}

		$q->orderBy ( 's.last_name' );
		return $q;
	}

	/**
	 * SQL tat ca id, ten hoc sinh trong mot lop hoc
	 *
	 * @param int $ps_service_course_id,
	 *        	$ps_service_id
	 *        	
	 * @return sql
	 *
	 */
	public function setListStudentForMyClass($my_class_id, $keywords = null) {

		$date = date ( 'Ym' );
		$q = $this->createQuery ( 's' )
			->select ( 's.id as id, s.student_code AS student_code' );
		$q->addSelect ( 'CONCAT(s.first_name, " ", s.last_name) AS full_name' )
			->innerJoin ( 's.StudentClass sc' )
			->innerJoin ( 'sc.MyClass mc' )
			->where ( 'DATE_FORMAT(sc.start_at,"%Y%m") <= ? AND (sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m") >= ?)', array (
				$date,
				$date ) )
			->addWhere ( 'sc.myclass_id = ?', $my_class_id )
			->addWhere ( 's.delete_at IS NULL' );
		if ($keywords != null) {
			$keywords = PreString::trim ( $keywords );

			$keywords = '%' . PreString::strLower ( $keywords ) . '%';
			$q->addWhere ( 'LOWER(s.student_code) LIKE ? OR LOWER(s.first_name) LIKE ? OR LOWER(s.last_name) LIKE ? OR (LOWER( CONCAT(s.first_name," ", s.last_name) ) LIKE ?) ', array (
					$keywords,
					$keywords,
					$keywords,
					$keywords ) );
		}

		$q->orderBy ( 's.last_name' );
		return $q;
	}

	/**
	 * Lay so luong hoc sinh cua truong hoc
	 *
	 * @author thangnc
	 *        
	 * @param
	 *        	ps_customer_id
	 * @return int
	 */
	public function getNumberStudentByCustomerId($ps_customer_id) {

		$query = $this->createQuery ( 's' )
			->select ( 's.id' )
			->addWhere ( 's.ps_customer_id = ?', $ps_customer_id )
			->count ();

		return $query;
	}

	/**
	 * Lay so luong hoc sinh học thu+ chinh thuc cua truong hoc tai mot thoi diem
	 *
	 * @author thangnc
	 *        
	 * @param $customer_id int
	 * @param $tracked_at int
	 * @param $school_year_id int
	 * @return int
	 */
	public function getTotalStudentOfCustomerByDate($customer_id, $tracked_at = null, $school_year_id = null) {

		$tracked_at = ($tracked_at == null) ? date ( 'Ymd' ) : $tracked_at;

		$date = date ( 'Ymd', strtotime ( $tracked_at ) );

		$q = $this->createQuery ( 's' )->select ( "s.id" );

		$q->leftJoin ( "s.StudentClass sc With DATE_FORMAT(sc.start_at,'%Y%m%d') <= ? AND (sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,'%Y%m%d') >= ?) AND sc.type IN ('" . PreSchool::SC_STATUS_TEST . "','" . PreSchool::SC_STATUS_OFFICIAL . "' )", array (
				$date,
				$date ) );
		
		$q->innerJoin ( 'sc.MyClass mc With mc.is_activated = ?', PreSchool::ACTIVE );

		$q->andWhere ( 's.deleted_at IS NULL');
		
		$q->andWhere ( 's.ps_customer_id = ?', $customer_id );
		
		if ($school_year_id > 0) {
			$q->andWhere ( 'mc.school_year_id = ?', $school_year_id );
		}

		return $q->count ();
	}

	/**
	 * Lay so luong hoc sinh theo trạng thái của trường trong 1 quãng thời gian
	 *
	 * @author thangnc
	 *        
	 * @param $customer_id int
	 * @param $star_at int
	 *        	Timestamp
	 * @param $end_at int
	 *        	Timestamp
	 *       @param $school_year_id int
	 * @return int
	 */
	public function getTotalStudentClassTypeOfCustomerByTime($customer_id, $sc_type, $star_at, $end_at, $school_year_id = null) {

		$star_at = date ( 'Ymd', $star_at );

		$end_at = date ( 'Ymd', $end_at );

		$q = $this->createQuery ( 's' )->select ( "s.id" );

		$q->innerJoin ( "s.StudentClass sc With DATE_FORMAT(sc.start_at,'%Y%m%d') <= ? AND (sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,'%Y%m%d') >= ?) AND sc.type =? ", array ($star_at,$end_at,$sc_type ) );
		
		$q->innerJoin ( 'sc.MyClass mc With mc.is_activated = ?', PreSchool::ACTIVE );

		$q->where ( 's.deleted_at IS NULL' )->andWhere ( 's.ps_customer_id = ?', $customer_id );
		
		if ($school_year_id > 0) {
			$q->andWhere ( 'mc.school_year_id = ?', $school_year_id );
		}

		return $q->count ();
	}

	/**
	 * Lay so luong hoc sinh chua duoc phan lop
	 *
	 * @author thangnc
	 *         edit ThanhPV
	 *        
	 * @param $customer_id int
	 * @param $tracked_at int timestamp
	 * @return int
	 */
	public function getTotalStudentNotInStudentClassOfCustomerByTime($customer_id, $tracked_at) {

		$tracked_at = ($tracked_at == null) ? date ( 'Ymd' ) : $tracked_at;

		$q = $this->createQuery ( 's' )->select ( "sc.id as id,sc.student_id AS student_id, s.student_code as student_code, CONCAT(s.first_name, ' ', s.last_name) AS full_name, s.birthday AS birthday, s.image AS image, s.year_data AS year_data ,s.status AS status,cus.school_code AS school_code" );
		$q->leftJoin ( "s.StudentClass sc" );
		$q->innerJoin ( 's.PsCustomer cus' );
		$q->andWhere ( 's.deleted_at IS NULL AND sc.id IS NULL' )->andWhere ( 's.ps_customer_id = ?', $customer_id );

		return $q->count ();
	}

	/**
	 * Lay danh sach hoc sinh chua duoc phan lop trong truong
	 *
	 * @author thanhpv
	 *        
	 * @param $customer_id int
	 * @return
	 */
	public function getAllStudentNotInStudentClassOfCustomer($customer_id, $ps_workplace_id) {

		$q = $this->createQuery ( 's' )->select ( "s.id AS student_id, s.student_code as student_code, CONCAT(s.first_name, ' ', s.last_name) AS full_name, s.birthday AS birthday, s.image AS image, s.year_data AS year_data ,s.status AS status,cus.school_code AS school_code,
		s.updated_at AS updated_at, CONCAT(ud.first_name, ' ', ud.last_name) AS updated_by" );
		$q->leftJoin ( "s.StudentClass sc" );
		$q->leftJoin ( 's.UserUpdated ud' );
		$q->innerJoin ( 's.PsCustomer cus' );
		$q->andWhere ( 's.deleted_at IS NULL AND sc.id IS NULL' )->andWhere ( 's.ps_customer_id = ?', $customer_id )->andWhere ( 's.ps_workplace_id = ?', $ps_workplace_id );

		return $q->execute ();
	}

	/**
	 * Ham lay danh sach hoc sinh dang theo hoc nhung chua co phieu thu, phieu bao cua thang
	 *
	 * @param
	 *        	student_ids - mixed, id cua hoc sinh
	 * @param $date -
	 *        	string yyyymmdd, thang can tim
	 * @return $list
	 */
	public function getStudentNotInReceiptAndPsFeeReportsOfMonth($date, $student_ids = array()) {

		$date_at = date ( 'Ym', strtotime ( $date ) );

		$date_at2 = date ( 'Ymd', strtotime ( $date ) );

		$query = $this->createQuery ( 's' )
			->select ( 's.*, sc.myclass_mode AS myclass_mode' );

		$query->innerJoin ( 's.StudentClass sc With DATE_FORMAT(sc.start_at,"%Y%m%d") <= ? AND (sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?)', array (
				$date_at2,
				$date_at2 ) );

		$query->leftJoin ( "s.PsFeeReports fr WITH fr.student_id = s.id AND DATE_FORMAT(fr.receivable_at,'%Y%m')=?", array (
				$date_at ) );
		$query->leftJoin ( "s.Receipt re WITH re.student_id = s.id AND DATE_FORMAT(re.receipt_date,'%Y%m')=?", array (
				$date_at ) );

		$query->whereIn ( 'sc.type', array (
				PreSchool::SC_STATUS_TEST,
				PreSchool::SC_STATUS_OFFICIAL ) );

		$query->where ( "re.id IS NULL AND fr.id IS NULL " );

		if ($student_ids) {
			$query->whereIn ( "s.id", $student_ids );
		}

		return $query->execute ();
	}

	/**
	 * Ham lay danh sach hoc sinh dang theo hoc nhung chua co phieu thu, phieu bao cua
	 * cac tháng lớn hơn hoặc bằng tháng boi lop duoc truyen vao
	 *
	 * @param $date -
	 *        	string yyyymmdd, thang can tim
	 * @param $class_ids -
	 *        	mixed, id cua lop
	 * @return $list
	 */
	public function getStudentByClassNotInReceiptAndPsFeeReportsOfMonth($date, $class_ids) {

		$date_at = date ( 'Ym', strtotime ( $date ) );

		$date_at2 = date ( 'Ymd', strtotime ( $date ) );

		$query = $this->createQuery ( 's' )
			->select ( 'DISTINCT s.*, sc.myclass_mode AS myclass_mode, sc.myclass_id AS myclass_id' );

		/*
		 * $query->innerJoin('s.StudentClass sc With DATE_FORMAT(sc.start_at,"%Y%m%d") <= ? AND (sc.stop_at IS NULL OR DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?)', array(
		 * $date_at2,
		 * $date_at2
		 * ));
		 */

		$query->innerJoin ( "s.PsCustomer  cu" );

		$query->innerJoin ( 's.StudentClass sc With DATE_FORMAT(sc.start_at,"%Y%m") <= ? AND (sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?)', array (
				$date_at,
				$date_at2 ) );

		$query->innerJoin ( "sc.MyClass mc With mc.is_activated =?", PreSchool::ACTIVE );

		// $query->leftJoin("s.PsFeeReports fr WITH DATE_FORMAT(fr.receivable_at,'%Y%m') >= ?",$date_at);

		$query->leftJoin ( "s.Receipt re WITH DATE_FORMAT(re.receipt_date,'%Y%m') = ?", $date_at );

		$query->groupBy ( "s.id" );

		$query->whereIn ( "sc.myclass_id", $class_ids );

		$query->addWhere ( 's.deleted_at IS NULL' );

		$query->andWhereIn ( 'sc.type', array_keys(PreSchool::$check_status_student) );

		$query->andWhere ( "re.id IS NULL" );

		$query->addOrderBy ( "s.last_name, s.first_name,s.student_code" );

		return $query->execute ();
	}

	/**
	 * Ham lay danh sach hoc sinh dang theo hoc nhung chua co phieu thu, phieu bao cua
	 * các tháng lớn hơn hoặc bằng tháng cua truong duoc truyen vao phuc vu cho việc thêm
	 * khoản phải thu của tháng
	 *
	 * @param $date -
	 *        	string yyyymmdd, thang can tim
	 * @param $class_ids -
	 *        	mixed, id cua hoc sinh
	 * @return $list
	 */
	public function getStudentNotInReceiptOfMonth($date, $ps_customer_id, $ps_workplace_id = null, $class_ids = array()) {

		$date_at = date ( 'Ym', strtotime ( $date ) );

		$date_at2 = date ( 'Ymd', strtotime ( $date ) );

		// $query = $this->createQuery('s')->select('s.*, sc.myclass_mode AS myclass_mode');

		$query = $this->createQuery ( 's' )
			->select ( 's.id AS id, s.image AS image, s.student_code AS student_code, s.first_name AS first_name, s.last_name AS last_name, s.sex AS sex, s.birthday AS birthday, s.avatar AS avatar, s.year_data AS year_data , cus.school_code AS school_code' );

		/*
		 * $query->innerJoin('s.StudentClass sc With DATE_FORMAT(sc.start_at,"%Y%m%d") <= ? AND (sc.stop_at IS NULL OR DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?)', array(
		 * $date_at2,
		 * $date_at2
		 * ));
		 */

		$query->innerJoin ( 's.StudentClass sc With DATE_FORMAT(sc.start_at,"%Y%m") <= ? AND (sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?)', array (
				$date_at,
				$date_at2 ) );

		$query->innerJoin ( 's.PsCustomer cus' );

		$query->innerJoin ( 'sc.MyClass mc' );

		$query->innerJoin ( 'mc.PsClassRooms cr' );

		$query->innerJoin ( 'cr.PsWorkPlaces wp' );

		// $query->leftJoin("s.PsFeeReports fr WITH fr.student_id = s.id AND DATE_FORMAT(fr.receivable_at,'%Y%m') >= ?",array($date_at));

		$query->leftJoin ( "s.Receipt re WITH re.student_id = s.id AND DATE_FORMAT(re.receipt_date,'%Y%m') >= ?", array (
				$date_at ) );

		$query->where ( "re.id IS NULL" );

		$query->addWhere ( 's.ps_customer_id =?', $ps_customer_id );

		if ($ps_workplace_id > 0) {
			$query->addWhere ( 'wp.id =?', $ps_workplace_id );
		}

		if (count ( $class_ids ) > 0)
			$query->whereIn ( "sc.myclass_id", $class_ids );

		$query->addWhere ( 's.deleted_at IS NULL' );

		$query->andWhereIn ( 'sc.type', array_keys(PreSchool::$check_status_student) );

		$query->orderBy ( "s.first_name, s.last_name" );

		return $query->execute ();
	}

	/**
	 * Ham set SQL lay danh sach hoc sinh dang theo hoc nhung chua co phieu thu, phieu bao cua
	 * các tháng lớn hơn hoặc bằng tháng cua truong duoc truyen vao phuc vu cho việc thêm
	 * khoản phải thu của tháng
	 *
	 * @param $date -
	 *        	string yyyymmdd, thang can tim
	 * @param $class_ids -
	 *        	mixed, id cua hoc sinh
	 * @return $list
	 */
	public function setStudentNotInReceiptOfMonth($date, $ps_customer_id, $ps_workplace_id = null, $class_ids = array(), $keyword = '') {

		$date_at = date ( 'Ym', strtotime ( $date ) );

		$date_at2 = date ( 'Ymd', strtotime ( $date ) );

		// $query = $this->createQuery('s')->select('s.*, sc.myclass_mode AS myclass_mode');

		$query = $this->createQuery ( 's' )
			->select ( 's.id AS id, s.image AS image, s.student_code AS student_code, s.first_name AS first_name, s.last_name AS last_name, s.sex AS sex, s.birthday AS birthday, s.avatar AS avatar, s.year_data AS year_data , cus.school_code AS school_code' );

		/*
		 * $query->innerJoin('s.StudentClass sc With DATE_FORMAT(sc.start_at,"%Y%m%d") <= ? AND (sc.stop_at IS NULL OR DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?)', array(
		 * $date_at2,
		 * $date_at2
		 * ));
		 */

		$query->innerJoin ( 's.StudentClass sc With DATE_FORMAT(sc.start_at,"%Y%m") <= ? AND (sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?)', array (
				$date_at,
				$date_at2 ) );

		$query->innerJoin ( 's.PsCustomer cus' );

		$query->innerJoin ( 'sc.MyClass mc' );

		$query->innerJoin ( 'mc.PsClassRooms cr' );

		$query->innerJoin ( 'mc.PsWorkPlaces wp' );

		$query->leftJoin ( "s.Receipt re WITH re.student_id = s.id AND DATE_FORMAT(re.receipt_date,'%Y%m') >= ?", array (
				$date_at ) );

		$query->where ( "re.id IS NULL" );

		$query->addWhere ( 's.ps_customer_id =?', $ps_customer_id );

		if ($ps_workplace_id > 0) {
			$query->addWhere ( 'wp.id =?', $ps_workplace_id );
		}

		if (count ( $class_ids ) > 0)
			$query->whereIn ( "sc.myclass_id", $class_ids );

		$query->addWhere ( 's.deleted_at IS NULL' );

		$query->andWhereIn ( 'sc.type', array_keys(PreSchool::$check_status_student) );

		$keyword = (trim ( $keyword ) != '') ? '%' . trim ( strtolower ( $keyword ) ) . '%' : '';
		if ($keyword != '') {
			$query->addWhere ( 'LOWER(s.student_code) LIKE ? OR LOWER(s.first_name) LIKE ? OR LOWER(s.last_name) LIKE ? OR LOWER(s.nick_name) LIKE ? OR LOWER(CONCAT(s.first_name," ", s.last_name)) LIKE ? ', array (
					$keyword,
					$keyword,
					$keyword,
					$keyword,
					$keyword ) );
		}

		$query->addOrderBy ( "s.first_name, s.last_name" );

		return $query;
	}

	/**
	 * Ham lay danh sach id hoc sinh dang theo hoc nhung chua co phieu thu, phieu bao cua
	 * các tháng lớn hơn hoặc bằng tháng cua truong duoc truyen vao phuc vu cho việc thêm
	 * khoản phải thu của tháng
	 *
	 * @param $date -
	 *        	string yyyymmdd, thang can tim
	 * @param $student_ids -
	 *        	mixed, id cua hoc sinh
	 * @return $list
	 */
	public function getStudentIdsNotInReceiptOfMonth($date, $student_ids = array()) {

		$date_at = date ( 'Ym', strtotime ( $date ) );

		$date_at2 = date ( 'Ymd', strtotime ( $date ) );

		$query = $this->createQuery ( 's' )
			->select ( 's.id AS id' );

		/*
		 * $query->innerJoin('s.StudentClass sc With DATE_FORMAT(sc.start_at,"%Y%m%d") <= ? AND (sc.stop_at IS NULL OR DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?)', array(
		 * $date_at2,
		 * $date_at2
		 * ));
		 */

		$query->innerJoin ( 's.StudentClass sc With DATE_FORMAT(sc.start_at,"%Y%m") <= ? AND (sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?)', array (
				$date_at,
				$date_at2 ) );

		$query->innerJoin ( 's.PsCustomer cus' );

		$query->innerJoin ( 'sc.MyClass mc' );

		$query->innerJoin ( 'mc.PsClassRooms cr' );

		$query->innerJoin ( 'mc.PsWorkPlaces wp' );

		$query->leftJoin ( "s.Receipt re WITH re.student_id = s.id AND DATE_FORMAT(re.receipt_date,'%Y%m') >= ?", array (
				$date_at ) );

		$query->where ( "re.id IS NULL" );

		if (count ( $student_ids ) > 0)
			$query->whereIn ( "s.id", $student_ids );

		$query->addWhere ( 's.deleted_at IS NULL' );

		$query->andWhereIn ( 'sc.type', array_keys(PreSchool::$check_status_student) );

		return $query->execute ();
	}

	/**
	 * Ham lay danh sach id hoc sinh dang theo hoc
	 *
	 * @param $date -
	 *        	string yyyymmdd, thang can tim
	 * @param $student_ids -
	 *        	mixed, id cua hoc sinh
	 * @return $list
	 */
	public function getStudentIdsRegistrationService($student_ids = array()) {

		$query = $this->createQuery ( 's' )
			->select ( 's.id AS id' );

		if (count ( $student_ids ) > 0)
			$query->whereIn ( "s.id", $student_ids );

		$query->addWhere ( 's.deleted_at IS NULL' );

		return $query->execute ();
	}

	
	public function getStudentInCustomerId($ps_customer_id = null,$ps_class_id = null) {
		
		$query = $this->createQuery ( 's' ) ->select ( 's.id AS id' );
		
		if(isset($ps_class_id) && $ps_class_id > 0){
			
			$query -> andWhere ('sc.myclass_id =?',$ps_class_id);
			$query -> andWhere ('sc.is_activated =?', PreSchool::ACTIVE);
		}
		
		if(isset($ps_customer_id) && $ps_customer_id > 0){
			$query -> addWhere('s.ps_customer_id =?',$ps_customer_id);
		}
		$query -> leftJoin('s.StudentClass sc');
		$query -> andWhere ( 's.deleted_at IS NULL' );
		
		return $query->execute ();
	}
	
	/**
	 * ************************** END: Vesion 1.5 ***********************************
	 */
	public function getStatuss() {

		$q = $this->createQuery ( 'student s' )
			->select ( 's.status as status' )
			->distinct ();
		return $q;
	}

	public static $gender = array (
			'1' => 'Male',
			'0' => 'Female' );

	/*
	 * public static $status = array(
	 * '0' => 'Temporary',
	 * self::S_STATUS_ACTIVITIES => 'Activities',
	 * self::S_STATUS_SCHOOL_TEST => 'School test',
	 * self::S_STATUS_PAUSE => 'Pause',
	 * self::S_STATUS_STOP_STUDYING => 'Stop studying',
	 * self::S_STATUS_GRADUATION => 'Graduation'
	 * );
	 */

	/*
	 * public function getGender() {
	 * return self::$gender;
	 * }
	 * public function getStatus() {
	 * return self::$status;
	 * }
	 * public static function getStatusList() {
	 * return self::$status;
	 * }
	 */

	/**
	 * FUNCTIOON: getStudentByClass($class_id = '')
	 * Lay tat ca hoc sinh da duoc phan lop va dang o trang thai Chinh thuc
	 *
	 * @author NguyenChienThang
	 *        
	 * @param int $myclass_id
	 * @return list obj
	 *        
	 */
	// public function getStudentGrowths()
	// {
	// $date = date('Ymd');
	// $q = $this->createQuery('s')

	// ->select('s.id AS id,CONCAT(s.first_name, " ", s.last_name) AS student_name,sc.id AS sc_id')

	// ->InnerJoin('s.StudentClass sc')
	// ->InnerJoin('s.StudentGrowths sg')
	public function getStudents($class_id = '', $date_from = '', $date_to = '') {

		$date = date ( 'Ymd' );

		$q = $this->createQuery ( 's' )
			->select ( 's.id AS student_id,s.student_code as student_code, CONCAT(s.first_name," ",s.last_name) AS student_name, sc.id AS sc_id, sg.height as height,  sg.weight as weight, sg.input_date_at as date_at,sg.id as student_growths_id' )
			->leftJoin ( 's.StudentClass sc' )
			->leftJoin ( 's.PsStudentGrowths sg' )
			->where ( 's.deleted_at IS NULL' )
			->andWhere ( ' DATE_FORMAT(sc.start_at,"%Y%m%d") <= ?', $date )
			->
		// ->andWhere('sc.myclass_id = ?', $class_id)

		andWhere ( 'sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?', $date )
			->orderBy ( 's.last_name ASC, sg.input_date_at DESC' );

		return $q->execute ();
	}

	/**
	 * FUNCTIOON: psGetStudentsByPsClass($class_id = '')
	 * Lay tat ca hoc sinh co trong lop hoc tai thoi diem hien tai
	 *
	 * @author phamvan thien
	 *        
	 * @param int $myclass_id
	 * @return list obj
	 *        
	 */
	public function getStudentByClass($class_id = '', $orderby = '') {

		$date = date ( 'Ymd' );

		$q = $this->createQuery ( 's' )
			->select ( 's.id AS id,s.student_code AS code,s.first_name AS first_name,s.last_name AS last_name, s.sex AS sex, s.birthday AS birthday,sc.type,sc.id AS sc_id,cus.school_code as school_code' );
		$q->addSelect ( 'CONCAT(s.first_name, " ", s.last_name) AS full_name' );
		$q->InnerJoin ( 's.StudentClass sc' )
			->innerJoin ( 's.PsCustomer cus' )
			->where ( 's.deleted_at IS NULL' )
			->andWhere ( 'sc.myclass_id = ?', $class_id )
			->addWhere ( 'sc.type = ?', PreSchool::SC_STATUS_OFFICIAL )
			->andWhere ( ' DATE_FORMAT(sc.start_at,"%Y%m%d") <= ?', $date )
			->andWhere ( 'sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?', $date );

		if ($orderby == '')
			$q->orderBy ( 's.last_name,s.first_name' );
		else
			$q->orderBy ( $orderby );

		return $q->execute ();
	}

	/**
	 * FUNCTIOON: findAllStudentInClassId($class_id = '',$datetime = time)
	 * Lay tat ca hoc sinh da duoc phan lop va dang hoat dong (<> tam dung/thoi hoc) tai mot thoi diem
	 *
	 * @author NguyenChienThang
	 *        
	 * @param int $class_id
	 *
	 * @return list obj
	 *        
	 */
	public function findAllStudentInClassId($class_id = '', $datetime = time, $in_ids = array()) {

		$param_classId = ! is_array ( $class_id ) ? explode ( ",", $class_id ) : $class_id;

		$date = date ( 'Ymd', $datetime );

		$q = $this->createQuery ( 's' );

		$q->select ( 's.id AS id,s.first_name AS first_name,s.last_name AS last_name, s.birthday AS birthday,sc.myclass_mode AS myclass_mode,sc.id AS sc_id, mc.name AS my_class_name,mc.id AS myclass_id' );

		$q->InnerJoin ( 's.StudentClass sc With DATE_FORMAT(sc.start_at,"%Y%m%d") <= ? AND (sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?)', array (
				$date,
				$date ) );

		$q->InnerJoin ( 'sc.MyClass mc' );

		$q->where ( 's.deleted_at IS NULL AND sc.type IN (1,2)' );

		if ($in_ids)
			$q->andWhereIn ( 's.id', $in_ids );

		$q->andWhereIn ( 'sc.myclass_id', $param_classId );

		$q->orderBy ( 'mc.name ASC,s.last_name,s.first_name' );

		return $q->execute ();
	}

	/**
	 * Lay thu tu cua hoc sinh tiep theo hoac hoc sinh truoc
	 *
	 * @author NguyenChienThang
	 *        
	 *         *
	 */
	public function getOrderForStudent($curr_student, $datetime, $flag = '>=') {

		$date = date ( 'Ymd', $datetime );

		$name_ord = $curr_student->getStudentClass ()
			->getMyClass () . $curr_student->get ( 'last_name' ) . $curr_student->get ( 'first_name' );

		$q = $this->createQuery ( 's' )
			->select ( 's.id,sc.myclass_id AS myclass_id,CONCAT(mc.name, s.last_name,s.first_name) AS full_ord ' )
			->leftJoin ( 's.StudentClass sc With sc.type IN (1,2) AND DATE_FORMAT(sc.start_at,"%Y%m%d") <= ? AND (sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?)', array (
				$date,
				$date ) )
			->leftJoin ( 'sc.MyClass mc' );
		$q->where ( 's.deleted_at IS NULL' );

		// $q->andWhere(' DATE_FORMAT(sc.start_at,"%Y%m%d") <= ?', $date);
		// $q->andWhere('sc.stop_at IS NULL OR DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?', $date);

		$q->andWhere ( 'CONCAT( mc.name, s.last_name,s.first_name) ' . $flag . ' ?', $name_ord );

		$q->andWhere ( 's.id != ? ', $curr_student->get ( 'id' ) );

		$by = ($flag == '>=') ? 'ASC' : 'DESC';

		$q->orderBy ( 'full_ord ' . $by );

		$q->limit ( 1 );

		return $q->fetchOne ();
	}

	/**
	 * Lay hoc sinh truoc hoc sinh hien tai
	 */
	public function getFirstStudent() {

		$q = $this->createQuery ( 's' )
			->select ( 's.id,sc.myclass_id AS myclass_id,CONCAT(mc.name, s.last_name,s.first_name) AS full_ord ' )
			->leftJoin ( 's.StudentClass sc' )
			->leftJoin ( 'sc.MyClass mc' );
		$q->Where ( 's.deleted_at IS NULL AND mc.id IS NOT NULL AND sc.is_activated = 1' );
		$q->orderBy ( 'mc.name ASC,s.last_name ASC,s.first_name ASC' );

		$q->limit ( 1 );

		return $q->fetchOne ();
	}

	/**
	 * Lay hoc sinh chua dang ky Lop
	 *
	 * @author NguyenChienThang
	 *        
	 *        
	 */
	public function getStudentRegistAndInActive($orderby = 's.last_name') {

		$q = $this->createQuery ( 's' );

		$q->select ( 's.id AS id,s.first_name AS first_name,s.last_name AS last_name, s.birthday AS birthday' );

		$q->leftJoin ( 's.StudentClass sc' );

		$q->where ( 's.deleted_at IS NULL AND sc.id IS NULL' );

		// $q->where('s.deleted_at IS NULL AND s.id NOT IN (SELECT c2.id FROM Student c2 INNER JOIN c2.StudentClass sc2 WHERE c2.deleted_at IS NULL AND sc2.is_activated = 1)');

		$q->addOrderBy ( $orderby );

		return $q->execute ();
	}

	/**
	 * findStudentsByFilter($filter = null)
	 * desc: Tim kiem hoc sinh boi dieu kien tim kiem
	 *
	 * @author NguyenChienThang
	 *        
	 *        
	 */
	public function findStudentsByFilter($filter = array(), $order_by = 'c.code,s.birthday,s.id') {

		$date = date ( 'Ymd' );

		$q = $this->createQuery ( 's' );

		$q->select ( 's.id AS id,s.first_name AS first_name,s.last_name AS last_name, s.sex AS sex, s.birthday AS birthday,sc.type,sc.id AS sc_id, c.name AS class_name' );

		$q->leftJoin ( 's.StudentClass sc' );

		// $q->leftJoin('sc.StudentWithdraw sw');

		$q->leftJoin ( 'sc.MyClass c' );

		$q->where ( 's.deleted_at IS NULL' );

		$keyword = (! empty ( $filter ['query'] )) ? '%' . mb_strtolower ( $filter ['query'], 'UTF-8' ) . '%' : '';

		if ($keyword != '') {
			$q->addWhere ( "(CONCAT(LOWER(s.first_name),' ', LOWER(s.last_name)) LIKE ? OR LOWER(s.first_name) LIKE ? OR LOWER(s.last_name) LIKE ?)", array (
					$keyword,
					$keyword,
					$keyword ) );
		}

		$code = (! empty ( $filter ['code'] )) ? '%' . strtolower ( $filter ['code'] ) . '%' : '';

		if ($code != '') {
			$q->addWhere ( "LOWER(s.code) LIKE ?", array (
					$code ) );
		}

		if (isset ( $filter ['_status'] ) && $filter ['_status'] == - 1) {
			$q->andWhere ( 'sc.myclass_id IS NULL' );
		} else {

			$q->andWhere ( ' DATE_FORMAT(sc.start_at,"%Y%m%d") <= ?', $date );
			$q->andWhere ( '(sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?)', $date );

			if (isset ( $filter ['_status'] ) && strlen ( $filter ['_status'] ) > 0)
				$q->andWhere ( 'sc.type IN (' . $filter ['_status'] . ')' );

			if (isset ( $filter ['_myclass_id'] ) && strlen ( $filter ['_myclass_id'] ) > 0) {

				if ($filter ['_myclass_id'] == '-2')
					$q->andWhere ( 'sc.myclass_id IS NOT NULL' );
				elseif ($filter ['_myclass_id'] > 0) {
					$q->andWhere ( 'sc.myclass_id = ?', ( int ) $filter ['_myclass_id'] );
				}
			}
		}

		if (isset ( $filter ['order_by'] )) {
			$order_by = $filter ['order_by'];
		}

		$q->addOrderBy ( $order_by );

		return $q;
	}

	/**
	 * Lay danh sach sinh vien de diem danh di hoc theo thoi gian
	 *
	 * @author NguyenChienThang
	 *        
	 * @param int $class_id
	 * @param timestam $date
	 *
	 */
	public function getStudentServiceDiaryByClass($class_id = '', $date) {

		$date = date ( "Ymd", $date );

		$q = $this->createQuery ( 's' )
			->select ( 's.id,s.first_name,s.last_name' )
			->addSelect ( 'logt.id AS logtime_id, logt.log_value AS log_value,logt.login_at AS login_at, logt.logout_at AS logout_at' )
			->leftJoin ( 's.StudentClass sc' )
			->leftJoin ( 's.Logtime logt With DATE_FORMAT(logt.login_at,"%Y%m%d") = ? ', $date );

		$q->where ( 's.deleted_at IS NULL AND sc.myclass_id = ? AND sc.type IN (1,2)', $class_id );

		$q->andWhere ( '(DATE_FORMAT(sc.start_at,"%Y%m%d") <= ? AND (sc.stop_at IS NULL OR DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?))', array (
				$date,
				$date ) );

		$q->orderBy ( 's.last_name,s.first_name' );

		return $q->execute ();
	}

	/**
	 * Lay toan bo cac ngay di hoc cua mot hoc sinh trong thang
	 *
	 * @author NguyenChienThang
	 *        
	 * @param int $student_id
	 * @param date(yyyymm) $date
	 * @return list
	 *
	 */
	// public function getLogtimeByDate($student_id, $date) {

	// $month_year = $date;

	// $q = $this->createQuery()
	// ->select('d.iday')
	// ->addSelect('logt.id AS logtime_id, logt.log_value AS log_value,logt.login_at AS login_at, logt.logout_at AS logout_at')
	// ->from('DayInMonth d')
	// ->leftJoin('d.Logtime logt ON (DATE_FORMAT(logt.login_at,"%d") = d.iday) AND (DATE_FORMAT(logt.login_at,"%Y%m") = ? AND logt.student_id = ?)', array(
	// $month_year,
	// $student_id
	// ))
	// ->leftJoin('logt.Student s With (s.deleted_at IS NULL AND s.id = ?)', array(
	// $student_id
	// ));
	// return $q->execute();
	// }

	/**
	 * buildSQLForStudentFeeTemp($student_id = '')
	 * Ham lay danh sach nguoi co the chon lam nguoi tham cua mot hoc sinh
	 *
	 * @param int $student_id
	 *
	 * @return String sql;
	 *        
	 */
	/*
	 * public function buildSQLForStudentFeeTemp($arr_myclass_id, $date)
	 * {
	 * $q = $this->createQuery('s')
	 * ->select('s.id,s.first_name,s.last_name, sc.id AS sc_id,mc.name AS my_class_name ,se.id AS service_id,sft.id AS sft_id ,SUM(sft.receivable) AS receivable_amount ')
	 * ->innerJoin('s.StudentClass sc With (sc.is_activated = 1)')
	 * ->innerJoin('sc.MyClass mc')
	 * ->innerJoin('s.StudentFeeTemp sft With DATE_FORMAT(sft.receivable_at, "%Y%m") = ?', date('Ym', $date))
	 * ->leftJoin('sft.Service se')
	 * ->whereIn('sc.myclass_id', $arr_myclass_id)
	 * ->andWhere('s.deleted_at IS NULL')
	 * ->groupBy('s.id')
	 * ->orderBy('mc.id,s.id');
	 * return $q;
	 * }
	 */

	/**
	 * Lay tong? cac khoan phai thu cua tung hoc sinh theo tung lop
	 * Bao gom`: Cac khoan da dang ky su dung va khong dang ky su dung thang truoc(da va chua thanh toan)
	 * + Cac khoan ve muon + Cac khoan dang ky thang hien tai
	 * $arr_class_id: Mang id lop hoc
	 * $date: ngay duoc chon
	 */
	public function getListBatchFee($arr_class_id, $by_numbers, $timestamp) {

		$param = $this->getParamForQuery ( $arr_class_id, $by_numbers, $timestamp );

		$price_late = $param ['pricevm'];
		$time_late = $param ['time_late'];
		$by_number_0 = $param ['by_number_0'];
		$by_number_1 = $param ['by_number_1'];
		$arrClassId = $param ['arrayId'];
		$mydate = $param ['mydate'];
		$datemonth = $param ['datemonth'];
		$min_start_at = $param ['min_start_at'];

		$premonth = date ( 'Y-m', strtotime ( '-1 month', $timestamp ) );

		// Lay Qquery cho cac khoan ve muon
		$queryIsLate = $this->getQueryIsLate ( $price_late, $time_late, $mydate );

		// Lay Union cho khoan hoc phi cho cac thang nho hon thang duoc chon ma chua co phieu bao
		$unionStudyFeePreMonth = $this->getUnionStudyFeePreMonth ( $min_start_at, $by_number_0, $by_number_1, $mydate, $timestamp );

		// Lay Query cho cac khoan cua dich vu khong dang ky nhung van su dung
		$queryOtherService = $this->getQueryOtherService ( $mydate );

		// Lay Query cho danh sach cac khoan phai thu cua thang duoc chon
		$queryThisMonth = $this->getQueryThisMonth ( $mydate, $datemonth, $by_number_0, $by_number_1 );

		// Lay Query cho cac khoan phai thu khac them moi
		$queryOtherServiceTemp = $this->getQueryOtherServiceTemp ( $datemonth );

		$pdo = Doctrine_Manager::getInstance ()->getCurrentConnection ()
			->getDbh ();

		/**
		 * LAY TONG CAC KHOAN CHUA THANH TOAN
		 * Bao gom:
		 * 1.Tong phai thanh toan cua Cac dich vu chua thanh toan cac thang truoc den thang duoc chon ( nhan voi gia tri split_value trong bang service_split)
		 * Bao gom cac dich vu da dang ky va cac dich vu khong dang ky nhung van su dung
		 * 2.Tong phai thanh toan cua Cac khoan ve muon
		 * 3.Tong phai thanh toan cua Cac khoan hoc phi chua thanh toan cua cac thang chua co phieu bao tinh bat dau tu thang co phieu bao gan nhat( nhan vao gia tri split_value trong bang service_split)
		 * 4.Tong phai thanh toan cua Cac khoan phai thu khac
		 * 5.Tong phai thanh toan cua Cac khoan da dang ky cua thang duoc chon ( nhan vao gia tri split_value trong bang service_split)
		 * 6.Tong cac khoan phai thu khac duoc tam tinh' vao thang duoc chon(tru di nhung khoan cua hoc sinh da co trong receivable_student)
		 */
		$query = "SELECT SUM(tmpStudent.amount) AS amount, tmpStudent.student_id AS student_id, mc.name AS my_class_name, st.first_name AS first_name, st.last_name AS last_name, st.birthday AS birthday 
				FROM (
					SELECT SUM(tmpFee.amount) - (CASE WHEN receipt.id IS NOT NULL THEN receipt.balance_amount ELSE 0 END) AS amount, tmpFee.student_id AS student_id
					FROM (
						SELECT DISTINCT ssd.amount *  ssd.spent_number - (CASE WHEN cs.id IS NOT NULL THEN cs.amount ELSE 0 END) AS amount, 
							ssd.student_id, ssd.service_id, ssd.tracked_at
						FROM (
							SELECT CASE WHEN spl.id IS NULL THEN diary.cnt
						   		    ELSE (spl.split_value / 100 ) * sd.by_number
						      		END AS spent_number,
						  		diary.cnt AS cnt, diary.service_id, diary.student_id, diary.tracked_at, sd.amount * (CASE WHEN ss.discount IS NOT NULL THEN ss.discount/100 ELSE 1 END) AS amount
							FROM (
								SELECT ssd.student_id, ssd.service_id, (CASE WHEN rs.id IS NULL OR (rs.id IS NOT NULL AND rs.spent_number =0) THEN COUNT(ssd.id) ELSE rs.spent_number END) AS cnt
									, ssd.tracked_at AS tracked_at
								FROM student_service_diary ssd
								LEFT JOIN receivable_student rs ON rs.service_id = ssd.service_id 
									AND rs.student_id = ssd.student_id
									AND DATE_FORMAT(rs.receivable_at, '%Y-%m') = DATE_FORMAT(ssd.tracked_at, '%Y-%m')
								WHERE DATE_FORMAT(ssd.tracked_at, '%Y-%m') < '$datemonth'
								GROUP BY ssd.service_id, ssd.student_id, DATE_FORMAT(ssd.tracked_at, '%Y-%m')
							) diary 														
							LEFT JOIN service_split spl ON spl.service_id = diary.service_id
								AND ( diary.cnt >= spl.count_value	AND diary.cnt <= spl.count_ceil	)
							LEFT JOIN  service_detail sd ON sd.service_id = diary.service_id 
								AND DATE_FORMAT(sd.detail_at, '%Y-%m') <= DATE_FORMAT(diary.tracked_at, '%Y-%m')
								AND DATE_FORMAT(sd.detail_end, '%Y-%m') >= DATE_FORMAT(diary.tracked_at, '%Y-%m')
							LEFT JOIN student_service ss ON ss.service_id = diary.service_id
							GROUP BY diary.student_id, diary.service_id, DATE_FORMAT(diary.tracked_at, '%Y-%m') 
						) AS ssd								
						LEFT JOIN receivable_student rs ON rs.service_id = ssd.service_id 
							AND rs.student_id = ssd.student_id
							AND DATE_FORMAT(rs.receivable_at, '%Y-%m') = DATE_FORMAT(ssd.tracked_at, '%Y-%m') 
						LEFT JOIN collected_student cs ON cs.receivable_student_id = rs.id	
					) tmpFee
					LEFT JOIN receipt ON receipt.student_id = tmpFee.student_id AND DATE_FORMAT(receipt.receipt_date, '%Y-%m') = '$premonth'
					GROUP BY tmpFee.student_id

				
					UNION
					SELECT SUM(amount) AS Amount, student_id 
					FROM(
						{$queryIsLate}				
					)tmpLate	
					GROUP BY tmpLate.student_id, DATE_FORMAT(tmpLate.logout_at,'%Y-%m')
												
					{$unionStudyFeePreMonth}
					
					UNION
					SELECT SUM(
						CASE WHEN cs.id IS NOT NULL THEN rs.amount - cs.amount
						ELSE rs.amount END
						) AS amount, rs.student_id AS student_id						
					{$queryOtherService}
										
					UNION
				   	SELECT SUM(tmp.amount) AS amount, tmp.student_id
				   	FROM(
						{$queryThisMonth}
					)tmp 
					GROUP BY tmp.student_id
					
					UNION 
					SELECT SUM(tmp.amount) AS amount, tmp.student_id
					FROM(
						{$queryOtherServiceTemp}
					)tmp
					GROUP BY tmp.student_id 
																				
				) tmpStudent						
								
				INNER JOIN student AS st ON st.id = tmpStudent.student_id
				INNER JOIN student_class AS sc ON sc.student_id = tmpStudent.student_id
					AND sc.is_activated = 1 AND DATE_FORMAT(sc.start_at,'%Y-%m') <= '$datemonth'
				INNER JOIN my_class AS mc ON mc.id = sc.myclass_id					
				WHERE sc.myclass_id IN ({$arrClassId})
					AND st.deleted_at IS NULL
				GROUP BY student_id,  mc.name
				 ";

		$stmt = $pdo->prepare ( $query );
		//
		$params = array ();
		// // "test" => $test,
		// // "pricevm" => $vemuon_price,

		//
		$stmt->execute ( $params );

		$results = $stmt->fetchAll ();

		return $results;
	}

	public function getParamForQuery($array_id, $by_numbers, $timestamp) {

		// Gia cua khoan ve muon
		$p = $this->createQuery ()
			->select ( 'p.value AS value' )
			->from ( 'Constant p' )
			->where ( 'p.name = "LATE_MONEY" ' )
			->fetchOne ();
		$price_late = $p->get ( 'value' ); // Gia cua khoan ve muon

		$c = $this->createQuery ()
			->select ( 'c.value AS value' )
			->from ( 'Constant c' )
			->where ( 'c.name = "DEFAULT_LOGOUT" ' )
			->fetchOne ();
		$time_late = $c->get ( 'value' ); // Gio bat dau tinh ve muon

		$by_number_0 = $by_numbers [0]; // so luong cho nhung hoc sinh khong hoc thu 7
		$by_number_1 = $by_numbers [1]; // so luong cho nhung hoc sinh hoc thu 7

		$arrayId = join ( $array_id, ',' ); // string danh sach cac Id

		$mydate = date ( 'Y-m-d', $timestamp ); // Thoi gian duoc chon
		$datemonth = date ( 'Y-m', $timestamp );

		// lay ngay` bat dau hoc nho? nhat trong bang StudentClass
		$sc = $this->createQuery ( 'sc' )
			->select ( 'DATE_FORMAT(MIN(sc.start_at),"%Y-%m") AS start_at' )
			->from ( 'StudentClass sc' )
			->fetchOne ();
		$min_start_at = $sc->get ( 'start_at' );

		if ($min_start_at < '2011-01') {
			// $min_start_at = sfConfig::get('min_start_at');
			$min_start_at = '2011-01';
		}

		$param = array ();
		$param ['pricevm'] = $price_late;
		$param ['time_late'] = $time_late;
		$param ['by_number_0'] = $by_number_0;
		$param ['by_number_1'] = $by_number_1;
		$param ['arrayId'] = $arrayId;
		$param ['mydate'] = $mydate;
		$param ['datemonth'] = $datemonth;
		$param ['min_start_at'] = $min_start_at;

		return $param;
	}

	/**
	 * Lay danh sach cac thang tinh tu thang co start_at nho nhat
	 *
	 * @param
	 *        	:
	 *        	min_start_at: thang bat dau di hoc nho nhat
	 *        	datemonth: thang duoc chon
	 */
	public function getStringPreMonth($min_start_at, $timestamp) {

		$datemonth = date ( 'Y-m', $timestamp );

		$strPreMonth = NULL;
		while ( $min_start_at < $datemonth ) {
			$str = " SELECT '$min_start_at' AS pre_date ";
			$strPreMonth .= $str;

			if ($min_start_at != date ( 'Y-m', strtotime ( '- 1 month', $timestamp ) )) {
				$strPreMonth .= "UNION ";
			}
			$min_start_at ++;
		}

		return $strPreMonth;
	}

	/**
	 * Lay cac khoan ve muon
	 */
	public function getQueryIsLate($price_late, $time_late, $mydate) {

		$queryIsLate = "					
						SELECT	tbl.student_id, tbl.number_late, tbl.logout_at,
							tbl.number_late * {$price_late} - (CASE WHEN cs.id IS NOT NULL THEN cs.amount ELSE 0 END ) AS amount, rs.id AS rs_id				
						FROM (
							SELECT (CASE WHEN MOD(tmp.total_late,60) >= 45 THEN FLOOR(tmp.total_late/60) + 1
										  WHEN MOD(tmp.total_late,60) >= 15 THEN FLOOR(tmp.total_late/60) + 0.5
										  WHEN MOD(tmp.total_late,60) >= 0 THEN FLOOR(tmp.total_late/60) 
										  ELSE 0
									 END)  AS number_late,
									 tmp.student_id AS student_id, tmp.logout_at AS logout_at
							FROM (
								SELECT (SUM(TIMESTAMPDIFF(MINUTE,CONCAT(DATE_FORMAT(logtime.logout_at,'%Y-%m-%d'), ' $time_late'),logtime.logout_at))) AS total_late
									, logtime.student_id AS student_id, logtime.logout_at AS logout_at
								FROM logtime					
								WHERE DATE_FORMAT(logtime.logout_at,'%Y-%m-%d') < '$mydate'
								GROUP BY logtime.student_id, DATE_FORMAT(logout_at, '%Y-%m')
							) tmp
							WHERE tmp.total_late > 0
							GROUP BY DATE_FORMAT(tmp.logout_at, '%Y-%m'), tmp.student_id
						) tbl
						LEFT JOIN receivable_student rs ON rs.student_id = tbl.student_id AND rs.service_id IS NULL AND rs.receivable_id IS NULL
							AND DATE_FORMAT(rs.receivable_at, '%Y-%m') = DATE_FORMAT(tbl.logout_at, '%Y-%m')		
						LEFT JOIN collected_student cs ON cs.receivable_student_id = rs.id	
						";

		return $queryIsLate;
	}

	/**
	 * Tinh tong cac khoan hoc phi cua cac thang truoc tinh tu thang co phieu bao gan nhat
	 * Neu chua co phieu bao lan nao thi tu thang bat dau di hoc
	 */
	public function getUnionStudyFeePreMonth($min_start_at, $by_number_0, $by_number_1, $mydate, $timestamp) {

		// lay String cac thang bat dau` tu thang co start_at nho nhat den thang duoc chon
		$strPreMonth = $this->getStringPreMonth ( $min_start_at, $timestamp );

		// Lay Query cho khoan hoc phi cho cac thang nho hon thang duoc chon ma chua co phieu bao
		$queryStudyFeePreMonth = $this->getQueryStudyFeePreMonth ( $mydate, $strPreMonth );

		$date_month = date ( 'Ym', $timestamp );

		if ($strPreMonth != NULL) {
			$unionStudyFeePreMonth = " 
				UNION	
				SELECT SUM(tmpFee.amount) AS amount, tmpFee.student_id AS student_id
				FROM(
					SELECT (CASE WHEN cs.id IS NOT NULL THEN rs.amount - cs.amount ELSE tmp.amount END ) AS amount, tmp.student_id AS student_id
					FROM(							
						{$queryStudyFeePreMonth}	
					)tmp
					LEFT JOIN receivable_student rs ON rs.student_id = tmp.student_id 
						AND rs.service_id = tmp.service_id AND DATE_FORMAT(rs.receivable_at, '%Y-%m') = tmp.pre_date
					LEFT JOIN collected_student cs ON cs.receivable_student_id = rs.id						
					GROUP BY tmp.student_id, tmp.pre_date	
				)tmpFee
				GROUP BY tmpFee.student_id			
						";
		} else {
			$unionStudyFeePreMonth = '';
		}

		return $unionStudyFeePreMonth;
	}

	/**
	 * Lay cac khoan hoc phi cua cac thang truoc tinh tu thang co phieu bao gan nhat
	 * Neu chua co phieu bao lan nao thi tu thang bat dau di hoc
	 */
	public function getUnionStudyFeePreMonth2($min_start_at, $by_number_0, $by_number_1, $mydate, $timestamp) {

		// lay String cac thang bat dau` tu thang co start_at nho nhat den thang duoc chon
		$strPreMonth = $this->getStringPreMonth ( $min_start_at, $timestamp );

		// Lay Query cho khoan hoc phi cho cac thang nho hon thang duoc chon ma chua co phieu bao
		$queryStudyFeePreMonth = $this->getQueryStudyFeePreMonth ( $mydate, $strPreMonth );

		if ($strPreMonth != NULL) {
			$unionStudyFeePreMonth = "
				UNION	
				SELECT tmp.student_id, NULL AS receivable_id, tmp.service_id, tmp.by_number, 
					1 AS spent_number, tmp.amount AS unit_price, tmp.by_number * tmp.amount AS amount,
					0 AS is_late, CONCAT(tmp.pre_date,'-01 00:00:00') AS receivable_at
				FROM(
					{$queryStudyFeePreMonth}
				)tmp
				LEFT JOIN receivable_student rs ON rs.student_id = tmp.student_id 
					AND rs.service_id = tmp.service_id AND DATE_FORMAT(rs.receivable_at, '%Y-%m') = tmp.pre_date				
				WHERE rs.id IS NULL
				";
		} else {
			$unionStudyFeePreMonth = '';
		}

		return $unionStudyFeePreMonth;
	}

	/**
	 * Lay cac khoan hoc phi cua cac thang truoc tinh tu thang co phieu bao gan nhat
	 * Neu chua co phieu bao lan nao thi tu thang bat dau di hoc
	 */
	public function getQueryStudyFeePreMonth($mydate, $strPreMonth) {

		$queryStudyFeePreMonth = "											
				SELECT ss.student_id AS student_id, ss.service_id, sd.by_number, 
					sd.amount * (CASE WHEN spl.id IS NOT NULL THEN spl.split_value / 100 ELSE 1 END) * (CASE WHEN ss.discount IS NOT NULL THEN ss.discount/100 ELSE 1 END) AS amount,
					sd.pre_date AS pre_date, sc.myclass_mode
				FROM student_service ss
				INNER JOIN service ON service.id = ss.service_id
									
				LEFT JOIN student_class sc ON sc.student_id = ss.student_id						
				LEFT JOIN (
					SELECT *
					FROM(
						SELECT CASE WHEN tmp.id IS NOT NULL THEN tmp.amount ELSE sd.amount END AS amount,
							CASE WHEN tmp.id IS NOT NULL THEN tmp.by_number ELSE sd.by_number END AS by_number, ss.service_id, tmp.pre_date
						FROM student_service AS ss
						LEFT JOIN(
							SELECT sd.id, sd.service_id, sd.amount, sd.by_number, sd.detail_at AS detail_at, tmpPredate.pre_date
							FROM service_detail sd		
							LEFT JOIN ({$strPreMonth}) tmpPredate ON 1 = 1	
							WHERE DATE_FORMAT(sd.detail_at,'%Y-%m') <= tmpPredate.pre_date AND tmpPredate.pre_date <= DATE_FORMAT(sd.detail_end,'%Y-%m') 
							GROUP BY sd.service_id, tmpPredate.pre_date
						)tmp ON tmp.service_id = ss.service_id				
						LEFT JOIN service_detail sd ON 	sd.service_id = ss.service_id AND DATE_FORMAT(sd.detail_at,'%Y-%m-%d') <= '$mydate'
						ORDER BY sd.detail_at DESC
					)tmpOrder
					GROUP BY tmpOrder.service_id, tmpOrder.pre_date
				) sd ON sd.service_id = ss.service_id
				LEFT JOIN service_split spl ON spl.service_id = ss.service_id 
			   		AND( spl.count_value <= sd.by_number AND spl.count_ceil >= sd.by_number)	
				WHERE service.enable_roll = 0 AND DATE_FORMAT(sc.start_at, '%Y-%m') <= sd.pre_date
				GROUP BY ss.student_id, sd.pre_date				
					";
		return $queryStudyFeePreMonth;
	}

	/**
	 * Lay cac khoan phai thu khac
	 * (Khong co trong tbl_student_service_diary nhung co trong receivalbe_student)
	 */
	public function getQueryOtherService($mydate) {

		$queryOtherService = "
				FROM receivable_student AS rs
				LEFT JOIN student_service_diary ssd ON ssd.service_id = rs.service_id
				LEFT JOIN student_service ss ON ss.service_id = rs.service_id
				LEFT JOIN collected_student cs ON  cs.receivable_student_id = rs.id
				WHERE ssd.id IS NULL AND ss.id IS NULL
					AND DATE_FORMAT(rs.receivable_at,'%Y-%m-%d') <= '$mydate'
				GROUP BY rs.student_id  
				";

		return $queryOtherService;
	}

	public function getQueryOtherServiceTemp($datemonth) {

		$queryOtherServiceTemp = "
				SELECT rt.amount, rt.receivable_id, rt.receivable_at,ss.student_id
				FROM receivable_temp rt 
				LEFT JOIN student_service ss ON 1 = 1
				LEFT JOIN receivable_student rs ON rs.receivable_id = rt.receivable_id 
					AND DATE_FORMAT(rs.receivable_at, '%Y-%m') = DATE_FORMAT(rt.receivable_at, '%Y-%m')	
					AND ss.student_id = rs.student_id
				WHERE rs.id IS NULL AND DATE_FORMAT(rt.receivable_at, '%Y-%m') = '$datemonth'	
				GROUP BY rt.receivable_id, ss.student_id	
		";
		return $queryOtherServiceTemp;
	}

	/**
	 * Lay cac khoan phai thanh toan cua thang duoc chon
	 * Bao gom
	 */
	public function getQueryThisMonth($mydate, $datemonth, $by_number_0, $by_number_1) {

		$queryThisMonth = "					
			SELECT 
			tmpDetail.amount  *  
					(CASE WHEN service_split.id IS NULL AND sc.myclass_mode = 1 AND service.enable_roll = 1 THEN {$by_number_1}
					 WHEN service_split.id IS NULL AND (sc.myclass_mode = 0 OR sc.myclass_mode IS NULL) AND service.enable_roll = 1 THEN {$by_number_0}
					 WHEN service_split.id IS NOT NULL AND service.enable_roll = 1 THEN tmpDetail.by_number * (service_split.split_value / 100)
				 	ELSE tmpDetail.by_number
				 END) * (CASE WHEN ss.discount IS NOT NULL THEN ss.discount/100 ELSE 1 END) AS amount,
				 ss.student_id AS student_id, ss.service_id, tmpDetail.amount AS unit_price, sc.myclass_mode AS myclass_mode, ssd.id AS ssd_id, service.enable_roll, tmpDetail.by_number		
			FROM student_service AS ss
			INNER JOIN service ON service.id = ss.service_id
			INNER JOIN student AS st ON st.id = ss.student_id
			INNER JOIN student_class AS sc ON sc.student_id = ss.student_id AND (sc.is_activated = 1)
			LEFT JOIN (
				SELECT *
				FROM(
					SELECT CASE WHEN tmp.id IS NOT NULL THEN tmp.amount ELSE sd.amount END AS amount,
						CASE WHEN tmp.id IS NOT NULL THEN tmp.by_number ELSE sd.by_number END AS by_number, ss.service_id
					FROM student_service AS ss
					LEFT JOIN(
						SELECT sd.id, sd.service_id, sd.amount, sd.by_number, sd.detail_at AS detail_at
						FROM service_detail sd		
						WHERE DATE_FORMAT(sd.detail_at,'%Y-%m-%d') <= '$mydate' AND '$mydate' <= DATE_FORMAT(sd.detail_end,'%Y-%m-%d') 
						GROUP BY sd.service_id
					)tmp ON tmp.service_id = ss.service_id
					LEFT JOIN service_detail sd ON 	sd.service_id = ss.service_id AND DATE_FORMAT(sd.detail_at,'%Y-%m-%d') <= '$mydate'
					ORDER BY sd.detail_at DESC
				)tmpOrder
				GROUP BY tmpOrder.service_id
			)tmpDetail ON tmpDetail.service_id = ss.service_id
			LEFT JOIN service_split ON service_split.service_id = ss.service_id 
			    AND( 
					(
						service_split.count_value <= {$by_number_0}					
						AND service_split.count_ceil >= {$by_number_0}	
						AND ( sc.myclass_mode = 0 OR sc.myclass_mode IS NULL )
					)
					OR 
					(
						service_split.count_value <= {$by_number_1}					
						AND service_split.count_ceil >= {$by_number_1}	
						AND sc.myclass_mode = 1
					)
					OR 
					(
						service_split.count_value <= tmpDetail.by_number					
						AND service_split.count_ceil >= tmpDetail.by_number	
						AND service.enable_roll = 0
					)
				)						
			LEFT JOIN student_service_diary ssd ON ss.student_id = ssd.student_id AND DATE_FORMAT(ssd.tracked_at,'%Y-%m') = '$datemonth'
			GROUP BY ss.student_id, ss.service_id					
					";

		return $queryThisMonth;
	}

	/**
	 * Lay ra cac khoan phai thu cua thang duoc chon
	 *
	 * @param $arr_class_id: Mang
	 *        	is lop hoc
	 * @param $by_numbers: So
	 *        	ngay su dung mac dinh
	 * @param $date: timestamp
	 */
	public function getDetailForBatchFee($studentIds, $by_numbers, $timestamp) {

		$param = $this->getParamForQuery ( $studentIds, $by_numbers, $timestamp );

		$price_late = $param ['pricevm'];
		$time_late = $param ['time_late'];
		$by_number_0 = $param ['by_number_0'];
		$by_number_1 = $param ['by_number_1'];
		$arrStudentId = $param ['arrayId'];
		$mydate = $param ['mydate'];
		$datemonth = $param ['datemonth'];
		$min_start_at = $param ['min_start_at'];

		$pdo = Doctrine_Manager::getInstance ()->getCurrentConnection ()
			->getDbh ();

		$queryIsLate = $this->getQueryIsLate ( $price_late, $time_late, $mydate );

		$unionStudyFeePreMonth = $this->getUnionStudyFeePreMonth2 ( $min_start_at, $by_number_0, $by_number_1, $mydate, $timestamp );

		$queryThisMonth = $this->getQueryThisMonth ( $mydate, $datemonth, $by_number_0, $by_number_1 );

		// Lay Query cho cac khoan phai thu khac them moi
		$queryOtherServiceTemp = $this->getQueryOtherServiceTemp ( $datemonth );

		// 1.Cac khoan co trong bang diem danh
		// 2.Cac khoan da dang ky nhung khong su dung( khong co trong bang diem danh)
		// 3.Cac khoan ve muon thang truoc
		// 4.Cac khoan hoc phi thang truoc chua co trong receivable_student
		// 5.Cac khoan phai thu thang nay, lay tu bang student_service
		// 6.Cac khoan phai khac duoc them moi
		//
		$query = "SELECT tbl.student_id AS student_id, tbl.receivable_id AS receivable_id, tbl.service_id AS service_id,
						tbl.by_number AS by_number, tbl.spent_number AS spent_number,
						tbl.unit_price AS unit_price, tbl.amount AS amount,
						tbl.is_late AS is_late, tbl.receivable_at AS receivable_at
				 FROM(								
					
					SELECT  DISTINCT diary.student_id AS student_id, NULL AS receivable_id ,diary.service_id AS service_id, 
							(CASE WHEN (sc.myclass_mode = 0 OR sc.myclass_mode IS NULL) THEN {$by_number_0} ELSE {$by_number_1} END) AS by_number,
							(CASE WHEN diary.cnt IS NOT NULL THEN diary.cnt	ELSE 0 	END) AS spent_number,
							sd.amount AS unit_price,
							sd.amount * sd.by_number * (CASE WHEN spl.id IS NOT NULL THEN spl.split_value/100 ELSE 1 END) AS amount,
							0 AS is_late,
				 			diary.tracked_at AS receivable_at	
					FROM (
						SELECT COUNT(ssd.id) AS cnt, ssd.service_id, ssd.student_id
							, ssd.tracked_at AS tracked_at
						FROM student_service_diary ssd
						WHERE DATE_FORMAT(ssd.tracked_at,'%Y-%m') < '$datemonth'
						GROUP BY ssd.service_id, ssd.student_id, DATE_FORMAT(ssd.tracked_at,'%Y-%m')
					) diary 
					LEFT JOIN service_detail sd ON sd.service_id = diary.service_id 
						AND DATE_FORMAT(sd.detail_at, '%Y-%m') <= DATE_FORMAT(diary.tracked_at,'%Y-%m')
						AND DATE_FORMAT(sd.detail_end, '%Y-%m') >= DATE_FORMAT(diary.tracked_at,'%Y-%m')
					INNER JOIN student_class sc ON sc.student_id = diary.student_id AND sc.is_activated = 1	
					LEFT JOIN service_split spl ON spl.service_id = diary.service_id
						AND ( diary.cnt >= spl.count_value AND diary.cnt <= spl.count_ceil )
					WHERE diary.tracked_at IS NOT NULL 
					
					UNION
					SELECT tmpLate.student_id, NULL AS receivable_id ,NULL AS service_id, 0 AS by_number,
						SUM(tmpLate.number_late) AS spent_number,  
						{$price_late} as unit_price,
						SUM(tmpLate.amount) AS amount,
						1 AS is_late,
						tmpLate.logout_at AS receivable_at
					FROM(	
						{$queryIsLate}
					)tmpLate	
					WHERE tmpLate.rs_id IS NULL
					GROUP BY tmpLate.student_id, DATE_FORMAT(tmpLate.logout_at,'%Y-%m')
					
					{$unionStudyFeePreMonth}				
								 
					UNION
					SELECT tmp.student_id, NULL AS receivable_id ,tmp.service_id, 
						(CASE WHEN tmp.enable_roll = 0 THEN tmp.by_number
							WHEN tmp.myclass_mode = 0 OR tmp.myclass_mode IS NULL THEN {$by_number_0}
							ELSE {$by_number_1} END) AS by_number,
						0 AS spent_number,
						tmp.unit_price AS unit_price,
						tmp.amount AS amount,
						0 AS is_late,
						'$mydate' AS receivable_at
					FROM(	
						{$queryThisMonth}			
					)tmp 		
					
					UNION 
					SELECT tmp.student_id, tmp.receivable_id, NULL AS service_id,
						1 AS by_number, 0 AS spent_number,
						tmp.amount AS unit_price, tmp.amount AS amount,
						0 AS is_late, tmp.receivable_at AS receivable_at
					FROM(
						{$queryOtherServiceTemp}
					)tmp
																
				) tbl 
				INNER JOIN student ON student.id = tbl.student_id 
				INNER JOIN student_class AS sc ON sc.student_id = tbl.student_id
					AND sc.is_activated = 1 AND DATE_FORMAT(sc.start_at,'%Y-%m') <= '$datemonth'
				LEFT JOIN receivable_student rs ON tbl.student_id = rs.student_id AND tbl.service_id = rs.service_id AND rs.receivable_at = tbl.receivable_at								
				WHERE sc.student_id IN ({$arrStudentId})
					AND student.deleted_at IS NULL AND DATE_FORMAT(tbl.receivable_at,'%Y-%m') <= '$datemonth' AND rs.id IS NULL

				 ";

		$stmt = $pdo->prepare ( $query );

		$stmt->execute ();

		$results = $stmt->fetchAll ();

		return $results;
	}

	// public function updateSpentNumberPreMonth(){
	//
	// $q = $this->createQuery('s')
	// ->select('')
	// ->
	public function getSummaryUsingService($student_id, $date) {

		return Doctrine::getTable ( 'Service' )->getSummaryUsingService ( $student_id, $date );
	}

	public function findOneSummaryUsingService($student_id, $date) {

		return Doctrine::getTable ( 'Service' )->findOneSummaryUsingService ( $this->getId (), $student_id, $date );
	}



	/******* Version New ********/

	/**
	 * Lay tat ca hoc sinh theo truong hoac theo các điều kiện
	 *
	 * Phung Van Thanh
	 *
	 * @param
	 *        	$ps_customer_id
	 */
	public function getAllStudentsByParams($params=array()) {

		// echo $ps_worplace_id; die();
		$q = $this->createQuery ( 's' )
			->select ( "s.id AS id, s.student_code AS student_code, mc.id as mc_id,sc.id as sc_id,CONCAT(s.first_name, ' ',  s.last_name) AS student_name, s.birthday AS birthday,
			s.sex AS sex" )
			->innerJoin ( 's.StudentClass sc' )
			->innerJoin ( 'sc.MyClass mc' )
			->addWhere ( 's.deleted_at IS NULL' )
			->andWhereIn ( 'sc.type', array_keys(PreSchool::$check_status_student) )
			->andWhere ( 's.ps_customer_id = ?', $params['ps_customer_id']);
		if ( isset($params['ps_workplace_id']) and $params['ps_workplace_id'] > 0) {
			$q->andWhere ( 'mc.ps_workplace_id = ?', $params['ps_workplace_id'] );
		}
		if ( isset($params['class_id']) and $params['class_id'] > 0) {
			$q->andWhere ( 'sc.myclass_id = ?', $params['class_id'] );
		}
		if ( isset($params['caphoc']) and $params['caphoc'] > 0) {
			$q->andWhere ( 's.caphoc = ?', $params['caphoc'] );
		}
		if ( isset($params['khoihoc']) and $params['khoihoc'] > 0) {
			$q->andWhere ( 's.khoihoc = ?', $params['khoihoc'] );
		}
		if ( isset($params['chuongtrinh']) and $params['chuongtrinh'] > 0) {
			$q->andWhere ( 's.chuongtrinh = ?', $params['chuongtrinh'] );
		}
		if ( isset($params['doituong']) and $params['doituong'] > 0) {
			$q->andWhere ( 's.doituong = ?', $params['doituong'] );
		}
		
		return $q->execute ();
	}
}