<?php

/**
 * FeatureOptionTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class FeatureOptionTable extends Doctrine_Table {

	/**
	 * Returns an instance of this class.
	 *
	 * @return object FeatureOptionTable
	 */
	public static function getInstance() {

		return Doctrine_Core::getTable ( 'FeatureOption' );
	}

	/**
	 * FUNCTION: doSelectQuery(Doctrine_Query $query)
	 *
	 * @param
	 *        	Doctrine SQL
	 * @return string SQL
	 */
	public function doSelectQuery(Doctrine_Query $query) {

		$a = $query->getRootAlias ();

		$query->select ( $a . '.id AS id, ' . $a . '.name AS name, ' . $a . '.iorder AS iorder, ' . $a . '.description AS description, ' . $a . '.is_activated AS is_activated, ' . $a . '.updated_at AS updated_at,' . $a . '.ps_customer_id AS ps_customer_id, ' . 'cus.title AS customer_title, ' 
				. 'CONCAT(u.first_name, " ", u.last_name) AS updated_by, f.name AS feature_name, sg.title AS service_title' );

		$query->leftJoin ( $a . '.PsCustomer cus' );
		$query->leftJoin ( $a . '.UserUpdated u' );

		$query->leftJoin ( $a.'.Feature f' );
		$query->leftJoin ( $a.'.ServiceGroup sg' );
		
		$query->leftJoin ( 'cus.PsWard pw' );
		$query->leftJoin ( 'pw.PsDistrict d' );
		$query->leftJoin ( 'd.PsProvince p' );

		if (! myUser::credentialPsCustomers ( 'PS_SYSTEM_FEATURE_OPTION_FILTER_SCHOOL' ) && myUser::getPscustomerID () > 0) {
			$query->where ( '(' . $a . '.ps_customer_id IS NULL OR ' . $a . '.ps_customer_id = ? )', ( int ) myUser::getPscustomerID () );
		} else {
			$query->where ( '1=1' );
		}

		return $query;
	}

	public function getFeatureOptionByField($fo_id,$getField = null) {
		
		$query = $this->createQuery () ->select ( $getField != '' ? $getField : '*' );
		
		$query->addWhere ( 'id = ?', $fo_id );
		
		return $query->fetchOne ();
	}
	/**
	 * findAllForAddNew($feature_branch_id = null)
	 *
	 * @author Nguyen Chien Thang(ntsc279@hotmail.com)
	 *        
	 * @param int $feature_branch_id
	 * @return list obj FeatureOption
	 *         *
	 */
	public function findAllForAddNew($feature_branch_id = null, $ps_customer_id = null, $feature_id = null, $servicegroup_id = null, $keyword = null) {

		if ($ps_customer_id <= 0) {
			$ps_customer_id = myUser::getPscustomerID ();
		}

		$query = $this->createQuery ( 'fo' );
		$query->select ( "fo.name ,fof.type as type, fo.description" );
		$query->leftJoin ( 'fo.FeatureOptionFeature fof with feature_branch_id = ?', $feature_branch_id );
		$query->leftJoin ( 'fof.FeatureBranch fb' );
		$query->leftJoin ( 'fb.Feature f' );

		$query->addWhere ( 'fof.id IS NULL' );

		$query->addWhere ( '(fo.ps_customer_id IS NULL OR fo.ps_customer_id = ?)', $ps_customer_id );

		if(isset($feature_id) && $feature_id > 0){
			$query->andWhere('fo.feature_id =?', $feature_id);
		}
		
		if(isset($servicegroup_id) && $servicegroup_id > 0){
			$query->andWhere('fo.servicegroup_id =?', $servicegroup_id);
		}
		
		if(isset($keyword) && PreString::length ( $keyword ) > 0){
			
			$keywords = '%' . PreString::strLower ( $keyword ) . '%';
			
			$query->andWhere('LOWER(fo.name) LIKE ?', $keywords);
			
		}
		
		$query->orderBy ( 'fo.iorder', 'asc' );
		
		return $query;
	}

	/**
	 * findAllForAddNewService($service_id = null)
	 *
	 * @author Pham van thien
	 *        
	 * @param int $service_id
	 * @return list obj FeatureOption
	 *         *
	 */
	public function findAllForAddNewService($service_id = null, $ps_customer_id = null) {

		if ($ps_customer_id <= 0) {
			$ps_customer_id = myUser::getPscustomerID ();
		}

		$query = $this->createQuery ( 'fo' );
		$query->select ( "fo.name ,fos.type as type, fo.description" );
		$query->leftJoin ( 'fo.FeatureOptionSubject fos with ps_service_id = ?', $service_id );
		$query->leftJoin ( 'fos.Service s' );

		$query->addWhere ( 'fos.id IS NULL' );

		/*
		 * if (! myUser::credentialPsCustomers('PS_SYSTEM_FEATURE_OPTION_FILTER_SCHOOL') && myUser::getPscustomerID() > 0) {
		 * $query->addWhere('fo.ps_customer_id IS NULL OR fo.ps_customer_id = ?', (int) myUser :: getPscustomerID());
		 * }
		 */

		$query->addWhere ( '(fo.ps_customer_id IS NULL OR fo.ps_customer_id = ?)', $ps_customer_id );

		$query->orderBy ( 'fo.iorder', 'asc' );

		return $query->execute ();
	}

	// ============== END: New vesion 1.5 =============================================================>
	public function getListOptionOfBranch($option) {

		foreach ( $option as $value ) {
			$c [$value->getId ()] = $value->getName ();
		}

		return $c;
	}

	public function getListOptionsForAddNew($branch_id) {

		$q = $this->createQuery ( 'fo' )
			->select ( "fo.name ,fof.type as type" );
		$q->leftJoin ( 'fo.FeatureOptionFeature fof with feature_branch_id = ?', $branch_id );
		$q->addWhere ( 'fof.id IS NULL' );
		$q->orderBy ( 'fo.name' );

		//
		// $text = strtolower(trim($text));
		// if ($text != '') {
		// $q->addWhere('LOWER(s.title) LIKE ?', '%'.$text.'%');
		// }
		return $q->execute ();
	}

	public function getListServicesClassForAddNew($student_id, $class_id = '', $text = '') {

		$q = $this->createQuery ( 's' )
			->select ( "s.id,c.title" );

		if ($class_id > 0)
			$q->InnerJoin ( 's.ClassService cs With cs.myclass_id = ?', $class_id );
		else
			$q->InnerJoin ( 's.ClassService cs' );

		$q->leftJoin ( 's.StudentService ss With ss.student_id = ?', $student_id );

		$q->addWhere ( 'ss.id IS NULL' );

		$text = strtolower ( trim ( $text ) );
		if ($text != '') {
			$q->addWhere ( 'LOWER(s.title) LIKE ?', '%' . $text . '%' );
		}

		return $q->execute ();
	}
}