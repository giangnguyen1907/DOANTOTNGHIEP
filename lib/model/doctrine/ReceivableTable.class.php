<?php

/**
 * ReceivableTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ReceivableTable extends Doctrine_Table {

	/**
	 * Returns an instance of this class.
	 *
	 * @return object ReceivableTable
	 */
	public static function getInstance() {

		return Doctrine_Core::getTable ( 'Receivable' );
	}

	/**
	 * FUNCTION: doSelectQuery(Doctrine_Query $query)
	 *
	 * @param
	 *        	Doctrine SQL
	 * @return string SQL
	 */
	public function doSelectQuery(Doctrine_Query $query) {

		$a = $query->getRootAlias ();

		$query->select ( $a . '.id AS id, ' . $a . '.title AS title, ' . $a . '.amount, ' . $a . '.iorder AS iorder, ' . $a . '.is_activated AS is_activated, ' . $a . '.user_updated_id AS user_updated_id, ' . $a . '.updated_at AS updated_at,' . 'wp.title AS work_places, ' . 'cus.title AS customer_title, ' . 'CONCAT(u.first_name, " ", u.last_name) AS updated_by' );

		$query->innerJoin ( $a . '.PsCustomer cus' );

		$query->leftJoin ( $a . '.PsWorkPlaces wp' );

		$query->leftJoin ( $a . '.UserUpdated u' );

		if (! myUser::credentialPsCustomers ( 'PS_FEE_RECEIVABLE_FILTER_SCHOOL' ) && myUser::getPscustomerID () > 0) {
			$query->where ( $a . '.ps_customer_id = ?', myUser::getPscustomerID () );
		}

		return $query;
	}

	public function getReceivableByField($id,$getField = null) {
		
		$query = $this->createQuery () ->select ( $getField != '' ? $getField : '*' );
		
		$query->addWhere ( 'id = ?', $id );
		
		return $query->fetchOne ();
	}
	
	/**
	 * getAllReceivableBySchoolYearsId($ps_school_year_id)
	 *
	 * @author Nguyen Chien Thang
	 * @return $listobj
	 */
	public function getAllReceivableBySchoolYearsId($ps_school_year_id) {

		$query = $this->createQuery ()
			->select ( 'id, title' );

		if ($ps_school_year_id > 0) {
			$query->andWhere ( 'ps_school_year_id = ?', $ps_school_year_id );
		}

		$query->orderBy ( 'iorder' );

		return $query->execute ();
	}

	/**
	 * Lay danh sach cac khoan phai thu cua mot truong theo: co so, nam hoc,...
	 *
	 * @author Nguyen Chien Thang
	 * @param $params -
	 *        	array
	 * @return $listobj
	 */
	public function getListReceivableByParams($params) {

		$query = $this->createQuery ()
			->select ( 'id, title, amount' );

		if ($params ['ps_customer_id'] > 0) {
			$query->andWhere ( 'ps_customer_id = ?', $params ['ps_customer_id'] );
		}

		if ($params ['ps_workplace_id'] > 0) {
			$query->andWhere ( 'ps_workplace_id IS NULL OR ps_workplace_id = ?', $params ['ps_workplace_id'] );
		}

		if ($params ['ps_school_year_id'] > 0) {
			$query->andWhere ( 'ps_school_year_id = ?', $params ['ps_school_year_id'] );
		}

		if ($params ['is_activated'] >= 0) {
			$query->andWhere ( 'is_activated = ?', $params ['is_activated'] );
		}

		$query->orderBy ( 'iorder,title,amount' );

		return $query->execute ();
	}

	/**
	 * Lay danh sach khoan phai thu cua mot thang da duoc gan cho lop(da co trong ReceivableTemp)
	 *
	 * @author Nguyen Chien Thang
	 *        
	 * @param $params -
	 *        	array
	 * @return $list
	 */
	public function getListReceivableTempByParams($params) {

		$query = $this->createQuery ( 'c' )
			->select ( 'rt.id AS id, c.title AS title, rt.amount AS amount, rt.note AS note, rt.receivable_id AS receivable_id, rt.receivable_at AS receivable_at' );

		if ($params ['ps_myclass_id'] > 0) {

			$query->innerJoin ( "c.ReceivableTemp rt WITH (DATE_FORMAT(rt.receivable_at,'%Y%m')=? AND rt.ps_myclass_id = ? )", array (
					date ( 'Ym', $params ['date'] ),
					$params ['ps_myclass_id'] ) );
		} else {
			$query->innerJoin ( "c.ReceivableTemp rt WITH DATE_FORMAT(rt.receivable_at,'%Y%m')=?", array (
					date ( 'Ym', $params ['date'] ) ) );
		}

		if (isset ( $params ['ps_customer_id'] ) && $params ['ps_customer_id'] > 0) {
			$query->andWhere ( 'c.ps_customer_id = ?', $params ['ps_customer_id'] );
		}

		if (isset ( $params ['ps_workplace_id'] ) && $params ['ps_workplace_id'] > 0) {
			$query->andWhere ( 'c.ps_workplace_id IS NULL OR c.ps_workplace_id = ?', $params ['ps_workplace_id'] );
		} else {
			$query->andWhere ( 'c.ps_workplace_id IS NULL' );
		}

		if (isset ( $params ['ps_school_year_id'] ) && $params ['ps_school_year_id'] > 0) {
			$query->andWhere ( 'c.ps_school_year_id = ?', $params ['ps_school_year_id'] );
		}

		if (isset ( $params ['is_activated'] ) && $params ['is_activated'] >= 0) {
			$query->andWhere ( 'c.is_activated = ?', $params ['is_activated'] );
		}

		return $query->execute ();
	}

	/**
	 * Lay danh sach khoan phai thu cua truong hoc hoac co so theo nam hoc hien tai
	 *
	 * @author Phung Van Thanh
	 *        
	 * @param $params -
	 * @return $query
	 */
	public function setListReceivableTempByParams($params) {

		$query = $this->createQuery ()
			->select ( 'id, title' );

		if ($params ['ps_school_year_id'] > 0) {
			$query->andWhere ( 'ps_school_year_id = ?', $params ['ps_school_year_id'] );
		}

		if ($params ['ps_customer_id'] > 0) {
			$query->andWhere ( 'ps_customer_id = ?', $params ['ps_customer_id'] );
		}

		if ($params ['ps_workplace_id'] > 0) {
			$query->andWhere ( 'ps_workplace_id = 0 OR ps_workplace_id = ?', $params ['ps_workplace_id'] );
		}

		$query->andWhere ( 'is_activated = ?', PreSchool::ACTIVE );

		$query->orderBy ( 'iorder' );

		return $query;
	}

	/**
	 * Lay danh sach khoan phai thu cua mot thang chua duoc gan cho lop (chua co trong ReceivableTemp)
	 *
	 * @author Nguyen Chien Thang
	 *        
	 * @param array $params
	 * @return $list
	 */
	public function getListReceivableSkipTempByParams($params) {

		$query = $this->createQuery ( 'c' )
			->select ( 'c.id AS id, c.title AS title, c.amount AS amount' );

		if (isset ( $params ['ps_myclass_id'] )) {
			if (! is_array ( $params ['ps_myclass_id'] ))
				$query->leftJoin ( "c.ReceivableTemp rt WITH DATE_FORMAT(rt.receivable_at,'%Y%m')=? AND rt.ps_myclass_id = ?", array (
						date ( 'Ym', $params ['date'] ),
						$params ['ps_myclass_id'] ) );
			else
				$query->leftJoin ( "c.ReceivableTemp rt WITH DATE_FORMAT(rt.receivable_at,'%Y%m')=? AND rt.ps_myclass_id IN (?) ", array (
						date ( 'Ym', $params ['date'] ),
						implode ( ",", $params ['ps_myclass_id'] ) ) );
		} else {
			$query->leftJoin ( "c.ReceivableTemp rt WITH DATE_FORMAT(rt.receivable_at,'%Y%m')=?", array (
					date ( 'Ym', $params ['date'] ) ) );
		}

		$query->where ( "rt.id IS NULL" );

		if (isset ( $params ['ps_customer_id'] ) && $params ['ps_customer_id'] > 0) {
			$query->andWhere ( 'c.ps_customer_id = ?', $params ['ps_customer_id'] );
		}

		if (isset ( $params ['ps_workplace_id'] ) && $params ['ps_workplace_id'] > 0) {
			$query->andWhere ( 'c.ps_workplace_id IS NULL OR c.ps_workplace_id = ?', $params ['ps_workplace_id'] );
		}

		if (isset ( $params ['ps_school_year_id'] ) && $params ['ps_school_year_id'] > 0) {
			$query->andWhere ( 'c.ps_school_year_id = ?', $params ['ps_school_year_id'] );
		}

		if (isset ( $params ['is_activated'] ) && $params ['is_activated'] >= 0) {
			$query->andWhere ( 'c.is_activated = ?', $params ['is_activated'] );
		}

		$query->orderBy ( 'c.iorder, c.title,c.amount' );

		return $query->execute ();
	}

	/**
	 * Ham kiem tra Receivable da co trong ReceivableStudent theo tháng chưa
	 *
	 * @param $student_id int
	 * @param $receivable_id int
	 * @param $receivable_at intdate
	 *
	 */
	public function checkReceivablesOfMonthExists($student_id, $receivable_id, $receivable_at) {

		$q = $this->createQuery ( 'r' );

		$q->innerJoin ( "r.ReceivableStudent rs With (rs.student_id = ? AND DATE_FORMAT(rs.receivable_at,'%Y%m')=?)", array (
				$student_id,
				date ( 'Ym', $receivable_at ) ) );

		$q->where ( "r.id = ?", $receivable_id );

		return $q->count ();
	}

	/**
	 * END : New vesion *
	 */
	public function getReceivablesSkipIfExists($student_id, $date = '') {

		$q = $this->createQuery ( 'c' )
			->leftJoin ( "c.ReceivableStudent rs With (rs.student_id=? And DATE_FORMAT(rs.receivable_at,'%Y%m')=?)", array (
				$student_id,
				date ( 'Ym', $date ) ) )
			->andWhere ( "rs.id Is Null" );
		return $q->execute ();
	}

	public function getReceivablesSkipTemp($date = '') {

		$q = $this->createQuery ( 'c' )
			->leftJoin ( "c.ReceivableTemp rt WITH DATE_FORMAT(rt.receivable_at,'%Y%m')=?", array (
				date ( 'Ym', $date ) ) )
			->andWhere ( "rt.id IS NULL" );

		if (! myUser::credentialPsCustomers ( 'PS_STUDENT_RECEIVABLE_FILTER_SCHOOL' ) && myUser::getPscustomerID () > 0) {
			$q->where ( 'c.ps_customer_id = ?', myUser::getPscustomerID () );
		}

		return $q->execute ();
	}

	/**
	 * Ham lay nhung item co o ben ReceivableStudent
	 *
	 * @param array $ids
	 *        	- id cua Receivable
	 *        	
	 */
	public function findInReceivableStudent($ids) {

		$q = $this->createQuery ( 'c' )
			->distinct ()
			->InnerJoin ( "c.ReceivableStudent cs" )
			->whereIn ( "c.id", $ids );

		if (! myUser::credentialPsCustomers ( 'PS_STUDENT_RECEIVABLE_FILTER_SCHOOL' ) && myUser::getPscustomerID () > 0) {
			$q->where ( 'c.ps_customer_id = ?', myUser::getPscustomerID () );
		}

		return $q->execute ();
	}

	/**
	 * Ham lay nhung Receivable co the xoa(ko co o ben ReceivableStudent)
	 *
	 * @param array $ids
	 *        	- id cua Receivable
	 *        	
	 */
	public function findNotInReceivableStudent($ids) {

		$q = $this->createQuery ( 'c' )
			->leftJoin ( "c.ReceivableStudent rs" )
			->whereIn ( "c.id", $ids )
			->andWhere ( "rs.id Is Null" );

		if (! myUser::credentialPsCustomers ( 'PS_STUDENT_RECEIVABLE_FILTER_SCHOOL' ) && myUser::getPscustomerID () > 0) {
			$q->where ( 'c.ps_customer_id = ?', myUser::getPscustomerID () );
		}

		return $q->execute ();
	}

	
}