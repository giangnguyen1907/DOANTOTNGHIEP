<?php

/**
 * PsEvaluateIndexSymbolTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PsEvaluateIndexSymbolTable extends Doctrine_Table {

	/**
	 * Returns an instance of this class.
	 *
	 * @return object PsEvaluateIndexSymbolTable
	 */
	public static function getInstance() {

		return Doctrine_Core::getTable ( 'PsEvaluateIndexSymbol' );
	}

	public function doSelectQuery(Doctrine_Query $query) {

		$alias = $query->getRootAlias ();
		$query->addSelect ( $alias . '.id AS id,' . $alias . '.title AS title,' . $alias . '.symbol_code AS symbol_code,' . $alias . '.is_activated AS is_activated,' . $alias . '.updated_at,' );

		$query->addSelect ( 'cus.id AS ps_customer_id, cus.title AS school_name' );

		$query->addSelect ( 'wp.id AS ps_workplace_id, wp.title AS workplace_name' );

		$query->addSelect ( 'CONCAT(u.first_name, " ", u.last_name) AS updated_by' );

		$query->addSelect ( 'sy.id AS school_year_id, sy.title AS school_year_title' );

		$query->leftJoin ( $alias . '.PsSchoolYear sy' );

		$query->leftJoin ( $alias . '.PsCustomer cus' );

		$query->leftJoin ( $alias . '.PsWorkPlaces wp' );

		$query->leftJoin ( $alias . '.UserUpdated u' );

		if (! myUser::credentialPsCustomers ( 'PS_EVALUATE_INDEX_SYMBOL_FILTER_SCHOOL' ) && myUser::getPscustomerID () > 0) {
			$query->addWhere ( $a . '.ps_customer_id = ?', myUser::getPscustomerID () );
		}

		return $query;
	}

	public function getSymbolByCustomerSchoolyearId($customer_id, $schoolyear_id = null, $workplace_id = null) {

		$q = $this->createQuery ( 's' )
			->select ( 's.id AS id, s.symbol_code AS symbol_code, s.title AS title' );

		$q->andWhere ( 's.ps_customer_id = ?', $customer_id );

		if ($schoolyear_id > 0) {
			$q->andWhere ( '(s.school_year_id IS NULL OR s.school_year_id = ?)', $schoolyear_id );
		} else {
			$q->andWhere ( 's.school_year_id IS NULL' );
		}

		if ($workplace_id > 0) {
			$q->andWhere ( '(s.ps_workplace_id IS NULL OR s.ps_workplace_id = ?)', $workplace_id );
		} else {
			$q->andWhere ( 's.ps_workplace_id IS NULL' );
		}

		$q->andWhere ( 's.is_activated =?', PreSchool::ACTIVE );
		return $q->execute ();
	}

	/**
	 * Kiem tra ton tai symbol_code
	 *
	 * @return boolean - true: Co the su dung
	 */
	public function checkSymbolCodeExits($param) {

		$q = $this->createQuery ()
			->select ( 'id' );

		if (isset ( $param ['symbol_code'] ) && strlen ( $param ['symbol_code'] ) > 0) {
			$q->where ( 'symbol_code = ?', $param ['symbol_code'] );
		}

		if (isset ( $param ['ps_customer_id'] ) && $param ['ps_customer_id'] > 0) {
			$q->andWhere ( 'ps_customer_id = ?', $param ['ps_customer_id'] );
		}

		if (isset ( $param ['school_year_id'] ) && $param ['school_year_id'] > 0) {
			$q->andWhere ( 'school_year_id = ?', $param ['school_year_id'] );
		} else {
			$q->andWhere ( 'school_year_id IS NULL' );
		}

		if (isset ( $param ['ps_workplace_id'] ) && $param ['ps_workplace_id'] > 0) {
			$q->andWhere ( 'ps_workplace_id = ?', $param ['ps_workplace_id'] );
		} else {
			$q->andWhere ( 'ps_workplace_id IS NULL' );
		}

		$q->where ( 'is_activated = ?', $param ['is_activated'] );

		$ps_code = $q->fetchOne ();

		if ($ps_code) {
			return true;
		} else {
			return false;
		}
	}
}