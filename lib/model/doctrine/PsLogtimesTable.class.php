<?php

/**
 * PsLogtimesTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PsLogtimesTable extends Doctrine_Table {

	public static function getInstance() {

		return Doctrine_Core::getTable ( 'PsLogtimes' );
	}

	/**
	 * Returns an instance of this class.
	 *
	 * @return object PsLogtimesTable
	 */
	public function doSelectQuery(Doctrine_Query $query) {

		$query = Doctrine_Query::create ()->from ( 'Student s' );
		/*
		 * $query->select ( 'lt.id AS id, ' .
		 * 'lt.login_at AS login_at, ' . 'lt.log_value AS log_value, ' .
		 * 'lt.login_relative_id AS login_relative_id, ' .
		 * 'lt.login_member_id AS login_member_id, ' .
		 * 'lt.logout_relative_id AS logout_relative_id, ' .
		 * 'lt.logout_member_id AS logout_member_id, ' . 'lt.logout_at AS logout_at, ' .
		 * 'lt.note AS note, ' . 's.ps_customer_id AS ps_customer_id,' .
		 * 's.student_code AS student_code, ' .
		 * 's.image AS image, ' . 's.id as student_id, ' . 's.sex AS sex, ' .
		 * 's.year_data AS year_data, ' . 'sc.myclass_id as class_id, ' . 'cus.school_code AS school_code,' . 'CONCAT(s.first_name, " ", s.last_name) AS student_name ' );
		 */

		$query->select ( 's.ps_customer_id AS ps_customer_id,' . 's.student_code AS student_code, ' . 's.image AS image, ' . 's.id as student_id, ' . 's.sex AS sex, ' . 's.year_data AS year_data, ' . 'sc.myclass_id as class_id, ' . 'cus.school_code AS school_code,' . 'CONCAT(s.first_name, " ", s.last_name) AS student_name ' );

		$query->leftJoin ( 's.StudentClass sc' );

		$query->innerJoin ( 's.PsCustomer cus' );

		$query->addWhere ( 's.deleted_at IS NULL' );

		$query->whereIn ( 'sc.type', array (
				PreSchool::SC_STATUS_OFFICIAL,
				PreSchool::SC_STATUS_TEST ) );

		if (! myUser::credentialPsCustomers ( 'PS_STUDENT_ATTENDANCE_FILTER_SCHOOL' ) && myUser::getPscustomerID () > 0) {
			$query->addWhere ( 's.ps_customer_id = ?', myUser::getPscustomerID () );
		}

		$query->orderBy ( 's.last_name, s.first_name' );

		return $query;
	}

	/**
	 * Returns an instance of this class.
	 *
	 * @return object PsLogtimesTable
	 */
	public function doSelectQueryAttendance(Doctrine_Query $query) {

		$query = Doctrine_Query::create ()->from ( 'Student s' );

		$query->select ( 's.ps_customer_id AS ps_customer_id,' . 's.student_code AS student_code, ' . 's.image AS image, ' . 's.id as student_id, ' . 's.sex AS sex, ' . 's.year_data AS year_data, ' . 'sc.myclass_id as class_id, ' . 'cus.school_code AS school_code,' . 'CONCAT(s.first_name, " ", s.last_name) AS student_name ' );
		$query->innerJoin ( 's.PsCustomer cus' );
		
		$query->innerJoin ( 's.StudentClass sc' );
		$query->innerJoin ('sc.MyClass c' );
		$query->innerJoin ('c.PsWorkPlaces wp' );
		$query->addWhere ( 's.deleted_at IS NULL' );

		$query->whereIn ( 'sc.type', array (
				PreSchool::SC_STATUS_OFFICIAL,
				PreSchool::SC_STATUS_TEST ) );

		if (! myUser::credentialPsCustomers ( 'PS_STUDENT_ATTENDANCE_FILTER_SCHOOL' ) && myUser::getPscustomerID () > 0) {
			$query->addWhere ( 's.ps_customer_id = ?', myUser::getPscustomerID () );
		}

		$query->orderBy ( 's.last_name, s.first_name' );

		return $query;
	}

	/**
	 * thong ke diem danh theo ngay
	 *
	 * @author Phung Van Thanh
	 */
	public function getStudentsAttendanceSynthetic($ps_school_year_id, $ps_customer_id, $ps_workplace_id, $date_at) {

		$query = $this->createQuery ( 'lt' );
		$query->select ( 'lt.id AS id, ' . 'lt.login_at AS login_at, ' . 'lt.login_relative_id AS login_relative_id, ' . 'lt.login_member_id AS login_member_id, ' . 'lt.logout_relative_id AS logout_relative_id, ' . 'lt.logout_member_id AS logout_member_id, ' . 'lt.logout_at AS logout_at, ' . 'lt.note AS note, ' . 's.ps_customer_id AS ps_customer_id,' . 'sc.myclass_id as class_id, ' . 'sc.id as sc_id, ' . 'CONCAT(s.first_name, " ", s.last_name) AS student_name ' );

		$query->innerJoin ( 'lt.Student s' );
		$query->innerJoin ( 's.StudentClass sc' );
		$query->innerJoin ( 'sc.MyClass mc' );
		$query->innerJoin ( 'mc.PsClassRooms cr' );
		$query->innerJoin ( 's.PsCustomer cus' );
		$query->addWhere ( 's.deleted_at IS NULL' );

		$query->whereIn ( 'sc.type', array (
				PreSchool::SC_STATUS_OFFICIAL,
				PreSchool::SC_STATUS_TEST ) );

		$query->addWhere ( 's.ps_customer_id = ?', $ps_customer_id );

		if ($ps_workplace_id > 0) {
			$query->addWhere ( 'cr.ps_workplace_id = ?', $ps_workplace_id );
		}

		$query->addWhere ( 'mc.school_year_id = ?', $ps_school_year_id );

		$query->andWhere ( '(lt.id >0 AND DATE_FORMAT(lt.login_at,"%Y%m%d") = ?)', date ( "Ymd", strtotime ( $date_at ) ) );

		$query->andWhere ( ' DATE_FORMAT(sc.start_at,"%Y%m") <= ?', date ( "Ym", strtotime ( $date_at ) ) );
		$query->andWhere ( '(sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m") >= ?)', date ( "Ym", strtotime ( $date_at ) ) );

		$query->addWhere ( 'lt.log_value = ?', PreSchool::ACTIVE );
		$query->orderBy ( 's.last_name, s.first_name' );

		return $query->execute ();
	}

	/**
	 * thong ke diem danh theo ngay
	 *
	 * @author Phung Van Thanh
	 */
	public function getStudentsAttendanceSyntheticMonth($ps_class_id, $ps_month) {

		$date_at = '01-' . $ps_month;
		$query = $this->createQuery ( 'lt' );
		$query->select ( 'lt.id AS id, ' . 'lt.login_at AS login_at, ' . 'lt.login_relative_id AS login_relative_id, ' . 'lt.login_member_id AS login_member_id, ' . 'lt.logout_relative_id AS logout_relative_id, ' . 'lt.logout_member_id AS logout_member_id, ' . 'lt.logout_at AS logout_at, ' . 'lt.note AS note, ' . 's.ps_customer_id AS ps_customer_id,' . 'sc.myclass_id as class_id, ' . 'sc.id as sc_id, ' . 'CONCAT(s.first_name, " ", s.last_name) AS student_name ' );

		$query->innerJoin ( 'lt.Student s' );
		$query->innerJoin ( 's.StudentClass sc' );
		$query->innerJoin ( 'sc.MyClass mc' );
		$query->innerJoin ( 'mc.PsClassRooms cr' );
		$query->innerJoin ( 's.PsCustomer cus' );
		$query->addWhere ( 's.deleted_at IS NULL' );

		$query->whereIn ( 'sc.type', array (
				PreSchool::SC_STATUS_OFFICIAL,
				PreSchool::SC_STATUS_TEST ) );

		$query->addWhere ( 'mc.id = ?', $ps_class_id );

		$query->andWhere ( '(lt.id >0 AND DATE_FORMAT(lt.login_at,"%Y%m") = ?)', date ( "Ym", strtotime ( $date_at ) ) );

		$query->andWhere ( ' DATE_FORMAT(sc.start_at,"%Y%m") <= ?', date ( "Ym", strtotime ( $date_at ) ) );
		$query->andWhere ( '(sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m") >= ?)', date ( "Ym", strtotime ( $date_at ) ) );

		$query->addWhere ( 'lt.log_value = ?', PreSchool::ACTIVE );
		$query->orderBy ( 's.last_name, s.first_name' );

		return $query->execute ();
	}

	/**
	 * lay hoc sinh diem danh ve muon
	 *
	 * @author Phung Van Thanh
	 */
	public function getStudentsLogtimesDelay($ps_school_year_id, $ps_customer_id, $ps_workplace_id, $date_logout) {

		// gio don tre cua co so
		$query = $this->createQuery ()
			->from ( 'Student s' );
		$query->select ( 'lt.id AS id, ' . 'lt.login_at AS login_at, ' . 'lt.login_relative_id AS login_relative_id, ' . 'lt.login_member_id AS login_member_id, ' . 'lt.logout_relative_id AS logout_relative_id, ' . 'lt.logout_member_id AS logout_member_id, ' . 'lt.logout_at AS logout_at, ' . 'lt.note AS note, ' . 's.ps_customer_id AS ps_customer_id,' . 's.image AS image, ' . 's.id as student_id, ' . 's.sex AS sex, ' . 's.year_data AS year_data, ' . 'sc.myclass_id as class_id, ' . 'sc.id as sc_id, ' . 'mc.id as mc_id, ' . 'mc.name as class_name, ' . 'mc.ps_class_room_id as ps_class_room_id, ' . 'cr.id as cr_id, ' . 'cus.school_code AS school_code,' . 'CONCAT(s.first_name, " ", s.last_name) AS student_name ' );

		$query->innerJoin ( 's.PsLogtimes lt' );
		$query->leftJoin ( 's.StudentClass sc' );
		$query->leftJoin ( 'sc.MyClass mc' );
		$query->leftJoin ( 'mc.PsClassRooms cr' );
		$query->innerJoin ( 's.PsCustomer cus' );
		$query->addWhere ( 's.deleted_at IS NULL' );

		$query->whereIn ( 'sc.type', array (
				PreSchool::SC_STATUS_OFFICIAL,
				PreSchool::SC_STATUS_TEST ) );
		
		$query->andWhere ( ' DATE_FORMAT(sc.start_at,"%Y%m%d") <= ? AND (sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?)', array(date ( "Ymd", strtotime ( $date_logout ) ),date ( "Ymd", strtotime ( $date_logout ) )) );
		
		$query->addWhere ( 's.ps_customer_id = ?', $ps_customer_id );
		
		if ($ps_workplace_id > 0) {
			$query->addWhere ( 'mc.ps_workplace_id = ?', $ps_workplace_id );
		}

		$query->addWhere ( 'mc.school_year_id = ?', $ps_school_year_id );

		$query->andWhere ( '(lt.id >0 AND DATE_FORMAT(lt.login_at,"%Y%m%d") = ?)', date ( "Ymd", strtotime ( $date_logout ) ) );

		$query->andWhere ( '(lt.logout_at IS NULL OR DATE_FORMAT(lt.logout_at,"%H%i") > ?)', date ( "Hi", strtotime ( $date_logout ) ) );
		$query->addWhere ( 'lt.log_value = ?', PreSchool::ACTIVE );
		$query->orderBy ( 's.last_name, s.first_name' );

		return $query->execute ();
	}

	/**
	 * lay hoc sinh diem danh ve muon
	 *
	 * @author Phung Van Thanh
	 */
	public function setStudentsLogtimesDelay($ps_school_year_id, $ps_customer_id, $ps_workplace_id, $date_logout) {

		// gio don tre cua co so
		$query = $this->createQuery ()
			->from ( 'Student s' );
		$query->select ( 'lt.id AS id, ' . 'lt.login_at AS login_at, ' . 'lt.login_relative_id AS login_relative_id, ' . 'lt.login_member_id AS login_member_id, ' . 'lt.logout_relative_id AS logout_relative_id, ' . 'lt.logout_member_id AS logout_member_id, ' . 'lt.logout_at AS logout_at, ' . 'lt.note AS note, ' . 's.ps_customer_id AS ps_customer_id,' . 's.image AS image, ' . 's.id as student_id, ' . 's.sex AS sex, ' . 's.year_data AS year_data, ' . 'sc.myclass_id as class_id, ' . 'sc.id as sc_id, ' . 'mc.id as mc_id, ' . 'mc.name as class_name, ' . 'mc.ps_class_room_id as ps_class_room_id, ' . 'cr.id as cr_id, ' . 'cus.school_code AS school_code,' . 'CONCAT(s.first_name, " ", s.last_name) AS student_name ' );

		$query->innerJoin ( 's.PsLogtimes lt' );
		$query->leftJoin ( 's.StudentClass sc' );
		$query->leftJoin ( 'sc.MyClass mc' );
		$query->leftJoin ( 'mc.PsClassRooms cr' );
		$query->innerJoin ( 's.PsCustomer cus' );
		$query->addWhere ( 's.deleted_at IS NULL' );

		$query->whereIn ( 'sc.type', array (
				PreSchool::SC_STATUS_OFFICIAL,
				PreSchool::SC_STATUS_TEST ) );
		
		$query->andWhere ( ' DATE_FORMAT(sc.start_at,"%Y%m%d") <= ? AND (sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?)', array(date ( "Ymd", strtotime ( $date_logout ) ),date ( "Ymd", strtotime ( $date_logout ) )) );
		
		$query->addWhere ( 's.ps_customer_id = ?', $ps_customer_id );
		if ($ps_workplace_id > 0) {
			$query->addWhere ( 'cr.ps_workplace_id = ?', $ps_workplace_id );
		}

		$query->addWhere ( 'mc.school_year_id = ?', $ps_school_year_id );

		$query->andWhere ( '(lt.id >0 AND DATE_FORMAT(lt.login_at,"%Y%m%d") = ?)', date ( "Ymd", strtotime ( $date_logout ) ) );

		$query->andWhere ( '(lt.logout_at IS NULL OR DATE_FORMAT(lt.logout_at,"%H%i") > ?)', date ( "Hi", strtotime ( $date_logout ) ) );
		$query->addWhere ( 'lt.log_value = ?', PreSchool::ACTIVE );
		$query->orderBy ( 's.last_name, s.first_name' );

		return $query;
	}

	/**
	 * lay hoc sinh cua lop de thong ke diem danh
	 *
	 * @author Phung Van Thanh
	 * @param
	 *
	 */
	public function getStudentsLogtimesClassId($myclass_id, $year_month) {

		// echo $myclass_id; die();
		$date_at = '1-' . $year_month;

		$q = $this->createQuery ()
			->from ( 'Student s' )
			->select ( "s.id as s_id,sc.student_id AS student_id, s.student_code as student_code,
            CONCAT(s.first_name, ' ', s.last_name) AS full_name,sc.id as sc_id,sc.myclass_mode as myclass_mode,
            s.year_data AS year_data ,s.status AS status, lt.login_at AS lt_login_at" );
		 
		//$q->addSelect('sc.id as sc_id,sc.myclass_mode as myclass_mode');
		$q->leftJoin ( 's.PsLogtimes lt' );

		$q->innerJoin ( 's.StudentClass sc With sc.myclass_id = ?', $myclass_id );

		$q->andWhere ( ' DATE_FORMAT(sc.start_at,"%Y%m") <= ?', date ( "Ym", strtotime ( $date_at ) ) );
		$q->andWhere ( '(sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m") >= ?)', date ( "Ym", strtotime ( $date_at ) ) );

		$q->andWhereIn ( 'sc.type', array (
				PreSchool::SC_STATUS_TEST,
				PreSchool::SC_STATUS_OFFICIAL ) );

		$q->addWhere ( 's.deleted_at IS NULL' );

		$q->orderBy ( 's.last_name' );

		return $q->execute ();
	}

	/**
	 * lay hoc sinh cua bang diem danh
	 *
	 * Thống kê thao tác điểm danh của GV
	 *
	 * @author Phung Van Thanh
	 * @param
	 *
	 */
	public function countMemberAttendance($ps_workplace_id, $member_id, $year_month, $date_at) {

		$tracked_at = '01-' . $year_month;

		$q = $this->createQuery ( 'lt' )
			->select ( "lt.id as id,lt.student_id AS student_id,lt.log_value as log_value,
            cr.id as cr_id,sc.id as sc_id,mc.id as mc_id,
            lt.login_at AS lt_login_at, s.id as s_id,lt.user_updated_id as user_updated_id
            " )
			->innerJoin ( 'lt.UserUpdated u' )
			->leftJoin ( 'lt.Student s' )
			->innerJoin ( 's.StudentClass sc' )
			->innerJoin ( 'sc.MyClass mc' )
			->innerJoin ( 'mc.PsClassRooms cr' );

		if ($date_at != '') {
			$q->andWhere ( ' DATE_FORMAT(lt.login_at,"%Y%m%d") = ?', date ( "Ymd", strtotime ( $date_at ) ) );
		} else {
			$q->addWhere ( 'DATE_FORMAT(lt.login_at,"%Y%m") = ?', date ( "Ym", strtotime ( $tracked_at ) ) );
		}

		$q->andWhere ( 'cr.ps_workplace_id =?', $ps_workplace_id );

		$q->addWhere ( 'u.member_id = ?', $member_id );

		return $q->count ();
	}

	/**
	 * lay ra danh sach nguoi cap nhat diem danh
	 *
	 * @author Phung Van Thanh
	 * @param
	 *        	month_year
	 */
	public function getUserUpdatedOfMonth($ps_workplace_id, $year_month, $date_at = null) {

		// echo $date_at; die();
		$tracked_at = '01-' . $year_month;
		$q = $this->createQuery ( 'lt' )
			->select ( "lt.id as id,lt.student_id AS student_id,lt.log_value as log_value,
            cr.id as cr_id,sc.id as sc_id,mc.id as mc_id,u.member_id as member_id,
            lt.login_at AS lt_login_at, s.id as s_id,lt.user_updated_id as user_updated_id,
            CONCAT(s.first_name, ' ', s.last_name) AS student_name," )
            ->innerJoin ( 'lt.UserUpdated u' )
			->leftJoin ( 'lt.Student s' )
			->innerJoin ( 's.StudentClass sc' )
			->innerJoin ( 'sc.MyClass mc' )
			->innerJoin ( 'mc.PsClassRooms cr' );

		if ($date_at != '') {

			$q->andWhere ( ' DATE_FORMAT(lt.login_at,"%Y%m%d") = ?', date ( "Ymd", strtotime ( $date_at ) ) );
		} else {

			$q->addWhere ( 'DATE_FORMAT(lt.login_at,"%Y%m") = ?', date ( "Ym", strtotime ( $tracked_at ) ) );
		}

		$q->andWhere ( 'cr.ps_workplace_id =?', $ps_workplace_id );

		return $q->execute ();
	}

	/**
	 * Lay du lieu trong bang diem danh
	 *
	 * @author Phung Van Thanh
	 * @param
	 *        	month_year
	 * @return Obj
	 */
	public function getStudentsLogtimesStatistic($myclass_id, $year_month) {

		$date_at = '01-' . $year_month;
		// echo strtotime($date);
		$q = $this->createQuery ( 'lt' )
			->select ( "lt.id as id,lt.student_id AS student_id,lt.log_value as log_value,
            lt.login_at AS lt_login_at, s.id as s_id,
            CONCAT(s.first_name, ' ', s.last_name) AS student_name," )
            ->innerJoin ( 'lt.Student s' )
			->innerJoin ( 's.StudentClass sc With sc.myclass_id = ?', $myclass_id )
			->
		andWhere ( ' DATE_FORMAT(sc.start_at,"%Y%m") <= ?', date ( "Ym", strtotime ( $date_at ) ) )
			->andWhere ( '(sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m") >= ?)', date ( "Ym", strtotime ( $date_at ) ) )
			->
		andWhereIn ( 'sc.type', array (
				PreSchool::SC_STATUS_TEST,
				PreSchool::SC_STATUS_OFFICIAL ) )
			->andWhere ( 's.deleted_at IS NULL' )
			->addWhere ( 'DATE_FORMAT(lt.login_at,"%Y%m") = ?', date ( "Ym", strtotime ( $date_at ) ) );

		return $q->execute ();
	}
	
	public function layTatCaDuLieuDiemDanhTrongNamHoc($myclass_id, $from_date, $to_date) {
		
		$q = $this->createQuery ( 'lt' )
		->select ( "lt.id as id,lt.student_id AS student_id,lt.log_value as log_value,
            lt.login_at AS login_at, s.id as s_id,
            CONCAT(s.first_name, ' ', s.last_name) AS student_name," )
            ->leftJoin ( 'lt.Student s' )
            ->innerJoin ( 's.StudentClass sc With sc.myclass_id = ?', $myclass_id )
            //->andWhere ( ' DATE_FORMAT(sc.start_at,"%Y%m") <= ? AND (sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m") >= ?)',array( date ( "Ym", strtotime ( $from_date ) ),date ( "Ym", strtotime ( $to_date ) )) )
            ->andWhereIn ( 'sc.type', array (
            		PreSchool::SC_STATUS_TEST,
            		PreSchool::SC_STATUS_OFFICIAL ) ) 
            ->andWhere ( 's.deleted_at IS NULL' );
            		
            $q->addWhere ( 'DATE_FORMAT(lt.login_at,"%Y%m") >= ? AND DATE_FORMAT(lt.login_at,"%Y%m") <= ?', array(date ( "Ym", strtotime ( $from_date ) ),date ( "Ym", strtotime ( $to_date ) )) );
            $q->orderBy('lt.login_at,s.last_name');
            
            return $q->execute ();
	}
	
	/**
	 * Cap nhat diem danh ve theo ngay trong man hinh diem danh ve muon ca lop
	 * 
	 * @param unknown $myclass_id
	 * @param unknown $date_at
	 * @return Doctrine_Collection
	 * 
	 ***/
	public function getUpdatedStudentAttendancesByDate($myclass_id, $date_at) {
		
		$q = $this->createQuery ( 'lt' )
			->select ( "lt.id as id" )
            ->leftJoin ( 'lt.Student s' )
            ->innerJoin ( 's.StudentClass sc With sc.myclass_id = ?', $myclass_id )
            ->andWhere ( ' DATE_FORMAT(sc.start_at,"%Y%m%d") <= ? AND (sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?)',  array(date ( "Ymd", strtotime ( $date_at ) ),date ( "Ymd", strtotime ( $date_at ) )) )
            ->andWhereIn ( 'sc.type', array (
            		PreSchool::SC_STATUS_TEST,
            		PreSchool::SC_STATUS_OFFICIAL ) )
            ->andWhere ( 's.deleted_at IS NULL' )
            ->addWhere ( 'DATE_FORMAT(lt.logout_at,"%Y%m%d") = ?', date ( "Ymd", strtotime ( $date_at ) ) );
            		
       return $q->count();
	}

	/**
	 * dem so ngay di hoc cua hoc sinh trong thang
	 *
	 * @author Phung Van Thanh
	 *        
	 *         Không thấy dùng
	 *        
	 */
	public function getStudentsLogtimesCheck($student_id, $date_at) {

		$q = $this->createQuery ( 'lt' )
			->select ( 'lt.id' )
			->addWhere ( 'lt.student_id = ?', $student_id )
			->addWhere ( 'DATE_FORMAT(lt.login_at,"%Y%m") = ?', date ( "Ym", strtotime ( $date_at ) ) );

		return $q->execute ();
	}

	/**
	 * Kiem tra logtime ton tai
	 *
	 * @author Pham Van Thien
	 * @param
	 *        	int student_id, tracked_at
	 * @return Obj
	 *
	 *
	 */
	public function getLogtimeByTrackedAt($student_id, $tracked_at) {

		$q = $this->createQuery ( 'c' )
			->select ( 'c.id, c.student_id, c.login_at,c.log_value, c.login_relative_id, c.login_member_id, c.logout_at, c.logout_relative_id,
            c.logout_member_id, c.note ' );

		$q->where ( 'c.student_id = ?', $student_id );

		$q->andWhere ( 'DATE_FORMAT(c.login_at,"%Y%m%d") = ?', date ( "Ymd", strtotime ( $tracked_at ) ) );

		return $q->fetchOne ();
	}

	/**
	 * tim logtime ton tai theo hoc sinh va ngay
	 *
	 * @author Pham Van Thien -- Thanh edit
	 *        
	 * @param
	 *        	int student_id, tracked_at
	 * @return Obj
	 *
	 */
	public function updateLogtimeByTrackedAt($student_id, $tracked_at) {

		$q = $this->createQuery ()
			->select ( 'id' );

		$q->where ( 'student_id = ?', $student_id );

		$q->andWhere ( 'DATE_FORMAT(login_at,"%Y%m%d") = ?', date ( "Ymd", strtotime ( $tracked_at ) ) );

		// return $q->execute();
		return $q->fetchOne (); // Thành Sửa
	}

	/**
	 * check logtime ton tai theo lop va ngay
	 *
	 * @author Pham Van Thien
	 *        
	 * @param
	 *        	int myclass_id, tracked_at
	 * @return Obj
	 *
	 */
	public function checkLogtimeByClassIdAndTrackedAt($mylass_id, $tracked_at) {

		$q = $this->createQuery ( 'a' )
			->select ( 'id' );

		$q->innerJoin ( 'a.Student s' );

		$q->innerJoin ( 's.StudentClass sc' );

		$q->addWhere ( 'sc.myclass_id = ?', $mylass_id );

		$q->andWhere ( 'DATE_FORMAT(a.login_at,"%Y%m%d") = ?', date ( "Ymd", strtotime ( $tracked_at ) ) );

		return (count ( $q->execute () ) > 0) ? true : false;
	}

	/**
	 * Đếm so học sinh đi học cua mot lop trong mot ngay *
	 */
	public function getLoginCount($mylass_id, $tracked_at = null) {

		$tracked_at = ($tracked_at != '') ? $tracked_at : date ( 'Ymd' );

		$q = $this->createQuery ( 'a' )
			->select ( 'a.student_id as student_id' );

		$q->innerJoin ( 'a.Student s' );

		$q->innerJoin ( 's.StudentClass sc' );

		$q->whereIn ( 'sc.type', array (
				PreSchool::SC_STATUS_OFFICIAL,
				PreSchool::SC_STATUS_TEST ) );

		$q->addWhere ( 'sc.myclass_id = ?', $mylass_id );

		$q->andWhere ( ' DATE_FORMAT(sc.start_at,"%Y%m%d") <= ?', date ( "Ymd", strtotime ( $tracked_at ) ) );

		$q->andWhere ( '(sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?)', date ( "Ymd", strtotime ( $tracked_at ) ) );

		$q->andWhere ( 'DATE_FORMAT(a.login_at,"%Y%m%d") = ?', date ( "Ymd", strtotime ( $tracked_at ) ) );

		$q->andWhere ( 'a.log_value = 1' );

		$q->groupBy ( 's.id' );

		return $q->count ();
	}

	/**
	 * Đếm so học sinh da ve cua mot lop trong mot ngay *
	 */
	public function getLogoutCount($mylass_id, $tracked_at = null) {
		
		$tracked_at = ($tracked_at != '') ? $tracked_at : date ( 'Ymd' );
		
		$q = $this->createQuery ( 'a' )
		->select ( 'a.student_id as student_id' );
		
		$q->innerJoin ( 'a.Student s' );
		
		$q->innerJoin ( 's.StudentClass sc' );
		
		$q->whereIn ( 'sc.type', array (
				PreSchool::SC_STATUS_OFFICIAL,
				PreSchool::SC_STATUS_TEST ) );
		
		$q->addWhere ( 'sc.myclass_id = ?', $mylass_id );
		
		$q->andWhere ( ' DATE_FORMAT(sc.start_at,"%Y%m%d") <= ?', date ( "Ymd", strtotime ( $tracked_at ) ) );
		
		$q->andWhere ( '(sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?)', date ( "Ymd", strtotime ( $tracked_at ) ) );
		
		$q->andWhere ( 'DATE_FORMAT(a.login_at,"%Y%m%d") = ?', date ( "Ymd", strtotime ( $tracked_at ) ) );
		
		$q->andWhere ( 'a.log_value = 1' );
		
		$q->andWhere ( 'a.logout_at IS NOT NULL' );
		
		$q->groupBy ( 's.id' );
		
		return $q->count ();
	}
	
	/**
	 * Đếm số học sinh nghỉ học không phép cua mot lop trong mot ngay *
	 */
	public function getLoginCountNotPermission($mylass_id, $tracked_at = null) {

		$tracked_at = ($tracked_at != '') ? $tracked_at : date ( 'Ymd' );

		$q = $this->createQuery ( 'a' )
			->select ( 'a.student_id as student_id' );

		$q->innerJoin ( 'a.Student s' );

		$q->innerJoin ( 's.StudentClass sc' );

		$q->whereIn ( 'sc.type', array (
				PreSchool::SC_STATUS_OFFICIAL,
				PreSchool::SC_STATUS_TEST ) );

		$q->addWhere ( 'sc.myclass_id = ?', $mylass_id );

		$q->andWhere ( ' DATE_FORMAT(sc.start_at,"%Y%m%d") <= ?', date ( "Ymd", strtotime ( $tracked_at ) ) );

		$q->andWhere ( '(sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?)', date ( "Ymd", strtotime ( $tracked_at ) ) );

		$q->andWhere ( 'DATE_FORMAT(a.login_at,"%Y%m%d") = ?', date ( "Ymd", strtotime ( $tracked_at ) ) );

		$q->andWhere ( 'a.log_value = 2' );

		$q->groupBy ( 's.id' );

		return $q->count ();
	}

	/**
	 * Đếm số học sinh nghỉ học có phép cua mot lop trong mot ngay *
	 */
	public function getLoginCountPermission($mylass_id, $tracked_at = null) {

		$tracked_at = ($tracked_at != '') ? $tracked_at : date ( 'Ymd' );

		$q = $this->createQuery ( 'a' )
			->select ( 'a.student_id as student_id' );

		$q->innerJoin ( 'a.Student s' );

		$q->innerJoin ( 's.StudentClass sc' );

		$q->whereIn ( 'sc.type', array (
				PreSchool::SC_STATUS_OFFICIAL,
				PreSchool::SC_STATUS_TEST ) );

		$q->addWhere ( 'sc.myclass_id = ?', $mylass_id );

		$q->andWhere ( ' DATE_FORMAT(sc.start_at,"%Y%m%d") <= ?', date ( "Ymd", strtotime ( $tracked_at ) ) );

		$q->andWhere ( '(sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?)', date ( "Ymd", strtotime ( $tracked_at ) ) );

		$q->andWhere ( 'DATE_FORMAT(a.login_at,"%Y%m%d") = ?', date ( "Ymd", strtotime ( $tracked_at ) ) );

		$q->andWhere ( 'a.log_value = 0' );

		$q->groupBy ( 's.id' );

		return $q->count ();
	}

	/**
	 * Đếm so học sinh đi học cua mot lop trong mot quang thoi gian
	 *
	 * @param $mylass_id int
	 *        	ID lop hoc
	 * @param $start_at date
	 *        	ngay bat dau
	 * @param $end_at date
	 *        	ngay ket thuc
	 * @return int Thanh Update log_value = 1
	 */
	public function getLoginCountOfWeek($mylass_id, $start_at, $end_at) {

		$start_at = date ( "Ymd", strtotime ( $start_at ) );

		$end_at = date ( "Ymd", strtotime ( $end_at ) );

		$q = $this->createQuery ( 'a' )
			->select ( 'a.student_id as student_id' );

		$q->innerJoin ( 'a.Student s' );

		$q->innerJoin ( 's.StudentClass sc With ( DATE_FORMAT(sc.start_at,"%Y%m%d") <= ? AND (sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?))', array (
				$start_at,
				$end_at ) );

		$q->where ( 's.deleted_at IS NULL' );

		$q->andWhereIn ( 'sc.type', array (
				PreSchool::SC_STATUS_OFFICIAL,
				PreSchool::SC_STATUS_TEST ) );

		$q->addWhere ( 'sc.myclass_id = ?', $mylass_id );

		$q->andWhere ( 'DATE_FORMAT(a.login_at,"%Y%m%d") >= ? AND DATE_FORMAT(a.login_at,"%Y%m%d") <= ?', array (
				$start_at,
				$end_at ) );

		$q->addWhere ( 'a.log_value = 1' );

		$q->groupBy ( 's.id' );

		return $q->count ();
	}

	/**
	 * Lay tong so gio ve muon cua hoc sinh
	 *
	 * @author Nguyen Chien Thang
	 * @vesion 2.0
	 *
	 * @param int $student_id
	 * @param
	 *        	int timestamp $date: Ngay luu du lieu
	 * @param $finish_time -
	 *        	giờ ket thuc cua 1 ngay, neu vuot qua se la don muon
	 */
	public function getNumberTobeLate($student_id, $date, $finish_time = '00:00') {

		$q = $this->createQuery ( 'l' )
			->
		select ( "Sum(TIMESTAMPDIFF(MINUTE,CONCAT(DATE_FORMAT(l.logout_at,'%Y-%m-%d'),' {$finish_time}'),l.logout_at)) As total" )
			->
		where ( "l.student_id = ?", $student_id )
			->
		addWhere ( "DATE_FORMAT(l.logout_at, '%Y%m')=?", date ( 'Ym', $date ) )
			->
		addWhere ( "DATE_FORMAT(l.logout_at, '%H:%i') > ?", $finish_time )
			->
		// ->addWhere("DATE_FORMAT(l.logout_at, '%H:%i') > ?", $time_finish_time)
		// ->addWhere("TIMEDIFF( DATE_FORMAT(l.logout_at, '%Y%m%d %H:%i'), CONCAT(DATE_FORMAT(l.logout_at,'%Y%m%d'),' {$finish_time}')) > 0")

		groupBy ( "l.student_id" );

		return $q->fetchOne ();
	}

	/**
	 * Lấy số phút về muộn của từng ngày trong tháng
	 *
	 * @author Nguyen Chien Thang
	 * @vesion 2.0
	 *
	 * @param int $student_id
	 * @param
	 *        	int timestamp $date: Ngay luu du lieu
	 * @param $finish_time -
	 *        	giờ ket thuc cua 1 ngay, neu vuot qua se la don muon
	 */
	public function getNumberMinuteLate($student_id, $date, $finish_time = '00:00') {

		// $finish_time = '17:00';
		$q = $this->createQuery ( 'l' )
			->
		select ( "l.logout_at AS logout_at, TIMESTAMPDIFF(MINUTE,CONCAT(DATE_FORMAT(l.logout_at,'%Y-%m-%d'),' {$finish_time}'),l.logout_at) AS number_minute" )
			->
		where ( "l.student_id = ?", $student_id )
			->
		// ->addWhere("l.logout_at != '' AND DATE_FORMAT(l.logout_at, '%Y%m')=?", date('Ym', $date));

		addWhere ( "DATE_FORMAT(l.logout_at, '%Y%m')=?", date ( 'Ym', $date ) )
			->
		addWhere ( "DATE_FORMAT(l.logout_at, '%H:%i') > ?", $finish_time );

		return $q->execute ();
	}

	/**
	 * Lay tong so ngày nghỉ của học sinh trong tháng
	 *
	 * @author Nguyen Chien Thang
	 * @vesion 1.0
	 *
	 * @param int $student_id
	 * @param string $tracked_at
	 *        	- YYYYmmdd
	 * @return int
	 */
	public function getSumAbsentOfStudent($student_id, $tracked_at) {

		$q = $this->createQuery ( 'lt' )
			->select ( "lt.id" )
			->addWhere ( 'lt.student_id = ?', $student_id )
			->addWhere ( 'DATE_FORMAT(lt.login_at,"%Y%m") = ?', date ( "Ym", strtotime ( $tracked_at ) ) )
			->andWhere ( 'lt.log_value != ?', PreSchool::OFFSCHOOL_VALID )
			//->andWhere ( 'lt.log_value != ?', PreSchool::NOT_ACTIVE )
			->groupBy ( "lt.student_id" );

		return $q->count ();
	}


	/*** Cập nhật ngày 14/07/2023 ***/

	public function layCacTrangThaiDiemDanh($student_id, $tracked_at) {

		$q = $this->createQuery ( 'lt' )
			->select ( "lt.id,lt.log_value, COUNT((case when (lt.log_value = 1) then 1 else 0 end)) as dihoc" )
			->addWhere ( 'lt.student_id = ?', $student_id )
			->addWhere ( 'DATE_FORMAT(lt.login_at,"%Y%m") = ?', date ( "Ym", strtotime ( $tracked_at ) ) )
			->groupBy ( "lt.log_value" )
			->orderBy('lt.log_value');

		return $q->fetchArray ();
	}


}