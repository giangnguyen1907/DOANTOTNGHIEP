<?php

/**
 * PsMobileAppsTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PsMobileAppsTable extends Doctrine_Table {

	/**
	 * Returns an instance of this class.
	 *
	 * @return object PsMobileAppsTable
	 */
	public static function getInstance() {

		return Doctrine_Core::getTable ( 'PsMobileApps' );
	}

	public function doSelectQuery(Doctrine_Query $query) {

		$a = $query->getRootAlias ();
		// $q = $this -> createQuery('ma');
		$query->addSelect ( $a . '.id AS id,' . $a . '.user_id AS user_id,' . $a . '.device_id AS device_id,' . $a . '.is_activated AS is_activated, ' . $a . '.active_created_at AS active_created_at, ' . 'MIN(' . $a . '.active_created_at) AS active_at, ' . $a . '.status_used AS status_used, ' . $a . '.osname AS osname,' . $a . '.osvesion AS osvesion,' . $a . '.network_name AS network_name, ' . $a . '.mobile_network_type AS mobile_network_type, ' . $a . '.params AS params, ' . $a . '.updated_at AS updated_at, ' . 'CONCAT(u.first_name," ",u.last_name) AS full_name,' . 
		// 'CONCAT(u_update.first_name," ",u_update.last_name) AS user_update,' .
		'u.osname AS user_osname,' . 'u.osvesion AS user_osvesion,' . 'u.email_address AS email_address,' . 'u.username AS username,' . 'u.user_type AS user_type,' . 'u.member_id AS member_id,' . 'u.ps_customer_id AS ps_customer_id,' . 'u.is_active AS is_actived,' )
			->innerJoin ( $a . '.UserMobileApps u' )
			->innerJoin ( $a . '.UserUpdated u_update' )
			->innerJoin ( 'u.PsRelative rl With u.user_type = ?', PreSchool::USER_TYPE_RELATIVE )
			->addOrderBy ( $a . '.active_created_at ASC ' )
			->
		// ->andWhere('(rl.deleted_at IS NULL OR u.is_active <>?)', PreSchool::CUSTOMER_LOCK)
		groupBy ( "{$a}.user_id, DATE_FORMAT({$a}.active_created_at, '%Y%m') " );
		// ->having("{$a}.id in",
		// $q->addSelect("min(ma.id)")
		// ->addOrderBy( 'ma.active_created_at ASC ')
		// ->groupBy("ma.user_created_id")
		// ->where("{$a}.id = ma.id"));
		
		if (! myUser::credentialPsCustomers ( 'PS_REPORT_MOBILE_APPS_FILTER_SCHOOL' ) && myUser::getPscustomerID () > 0) {
			$query->addWhere ( 'u.ps_customer_id = ?', myUser::getPscustomerID () );
		}
		return $query;
	}

	/**
	 * Lay ra lich su kich hoat app cua nguoi dung
	 * Trang detail PsMobileApps
	 *
	 * @param int $user_id
	 */
	public function getPsMobileAppsByUserId($user_id) {

		$query = $this->createQuery ( 'ma' );
		$query->addSelect ( 'ma.id AS id,' . 'ma.user_id AS user_id,' . 'ma.device_id AS device_id,' . 'ma.is_activated AS is_activated, ' . 'ma.active_created_at AS active_created_at, ' . 'ma.status_used AS status_used, ' . 'ma.osname AS osname,' . 'ma.osvesion AS osvesion,' . 'ma.network_name AS network_name, ' . 'ma.mobile_network_type AS mobile_network_type, ' . 'ma.params AS params, ' . 'ma.updated_at AS updated_at, ' . 'CONCAT(u.first_name," ",u.last_name) AS full_name,' . 'u.email_address AS email_address,' . 'u.username AS username,' . 'u.user_type AS user_type,' . 'u.ps_customer_id AS ps_customer_id,' . 'u.is_active AS is_actived,' )
			->leftJoin ( 'ma.UserMobileApps u' );
		$query->addWhere ( 'ma.user_id=?', $user_id );
		$query->orderBy ( 'ma.active_created_at DESC' );
		return $query->execute ();
	}

	/**
	 * Lay danh sach tai khoan da active cua phu huynh
	 * Phuc vu xuat file excel modult: PsMobileApps/index
	 *
	 * @param array $param
	 * @param date('m-Y') $param['month']
	 * @param date('Ymd') $param['from_date']
	 * @param date('Ymd') $param['to_date']
	 * @param int $param['customer_id']
	 * @param int $param['workplace_id']
	 *
	 * @return List Object
	 * @date_create 31-10-2018 - Tam NT
	 *
	 */
	public function getRelativeMobileAppsByParam($param) {

		$query = $this->createQuery ( 'ma' );
		$query->addSelect ( 'ma.id AS id,' . 'ma.user_id AS user_id,' . 'MIN(ma.active_created_at) AS active_created_at, ' . 'ma.osname AS osname,' . 'ma.osvesion AS osvesion,' . 'ma.network_name AS network_name, ' . 'ma.mobile_network_type AS mobile_network_type, ' . 'u.first_name AS first_name,' . 'u.last_name AS last_name,' . 'CONCAT(u.first_name," ",u.last_name) AS full_name,' . 'u.email_address AS email_address,' . 'u.username AS username,' )
			->leftJoin ( 'ma.UserMobileApps u' );
		$query->innerJoin ( 'u.PsRelative rl With u.user_type = ?', PreSchool::USER_TYPE_RELATIVE );
		$query->addOrderBy ( 'ma.active_created_at ASC ' );
		// $query->andWhere('(rl.deleted_at IS NULL OR u.is_active !=?)', PreSchool::CUSTOMER_LOCK);
		$query->groupBy ( "ma.user_id,  DATE_FORMAT(ma.active_created_at, '%Y%m')" );

		if (isset ( $param ['month'] )) {
			$query->andWhere ( "(DATE_FORMAT(ma.active_created_at, '%m-%Y') LIKE ?)", $param ['month'] );
		}
		// elseif(isset($param['schoolyear_id']) && $param['schoolyear_id'] > 0) {
		// $query->andWhere("(DATE_FORMAT(ma.active_created_at, '%Y%m%d') >= ? AND DATE_FORMAT(ma.active_created_at, '%Y%m%d') <= ?)", array($param['from_date'], $param['to_date']));
		// }

		if (isset ( $param ['customer_id'] ) && $param ['customer_id'] > 0) {
			$query->andWhere ( "u.ps_customer_id = ?", $param ['customer_id'] );
		}

		if (isset ( $param ['workplace_id'] ) && $param ['workplace_id'] > 0) {
			$query->innerJoin ( 'rl.RelativeStudent rs' );

			$query->innerJoin ( 'rs.Student s' );

			$query->innerJoin ( 's.StudentClass sc' );

			$query->innerJoin ( 'sc.MyClass mc' );

			$query->innerJoin ( 'mc.PsClassRooms cr' );

			// $query->innerJoin ( 'cr.PsWorkPlaces wp' );

			$query->andWhere ( "cr.ps_workplace_id = ?", $param ['workplace_id'] );
		}
		return $query->execute ();
	}

	/**
	 * Lấy danh sách tổng tài khoản phụ huynh phục vụ đối soát tài khoản của phụ huynh
	 *
	 * @param array $param
	 * @param int $param['ps_customer_id']
	 * @param int $param['ps_workplace_id']
	 * @param date(Ymd) $param['from_date']
	 * @param date(Ymd) $param['to_date']
	 * @param list $user_id_arr:
	 *        	dạng (a, b, c, d)
	 * @date_created: 1-11-2018 Tam NT
	 */
	public function getTotalRelativeAccountForCrossChecking($param, $user_id_arr = null) {

		$param ['from_date'] = isset ( $param ['from_date'] ) ? date ( 'Ym', strtotime ( $param ['from_date'] ) ) : date ( 'Ym' );
		$param ['to_date'] = isset ( $param ['to_date'] ) ? date ( 'Ym', strtotime ( $param ['to_date'] ) ) : date ( 'Ym' );

		$q = $this->createQuery ( 'ma' );
		$q->select ( 'ma.id AS id, ma.user_id AS user_id, DATE_FORMAT(ma.created_at,"%m-%Y") AS month' );

		if (isset ( $user_id_arr ) && count ( $user_id_arr ) > 0) {
			$q->andWhereIn ( 'ma.user_id', $user_id_arr );
		}
		$q->groupBy ( 'ma.user_id, DATE_FORMAT(ma.active_created_at,"%m%Y")' );
		$q->andWhere ( '(DATE_FORMAT(ma.active_created_at,"%Y%m") >=? AND DATE_FORMAT(ma.active_created_at,"%Y%m") <=?)', array (
				$param ['from_date'],
				$param ['to_date'] ) );
		$q->orderBy ( 'DATE_FORMAT(ma.active_created_at,"%Y%m")' );
		// echo $q;die;
		return $q->fetchArray ();
	}
}