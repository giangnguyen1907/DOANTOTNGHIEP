<?php

/**
 * RelativeTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class RelativeTable extends Doctrine_Table {

	/**
	 * Returns an instance of this class.
	 *
	 * @return object RelativeTable
	 */
	public static function getInstance() {

		return Doctrine_Core::getTable ( 'Relative' );
	}

	public function doSelectQuery(Doctrine_Query $query) {

		$a = $query->getRootAlias ();

		$query->select ( $a . '.id AS id, ' . $a . '.first_name AS first_name, ' . $a . '.last_name AS last_name, ' . $a . '.image AS image, ' . $a . '.sex AS sex, ' . $a . '.birthday AS birthday, ' . $a . '.mobile AS mobile, ' . $a . '.email AS email, ' . 'cus.school_code AS school_code,' . 'cus.school_code AS school_name,' . $a . '.user_updated_id AS user_updated_id, ' . $a . '.updated_at AS updated_at, ' . $a . '.year_data AS year_data' . $a . '.deleted_at AS deleted_at' );

		// $query->addSelect ( 'CONCAT(u.first_name, " ", u.last_name) AS updated_by,acc.username AS username, acc.id AS user_id' );
		$query->addSelect ( 'CONCAT(u.first_name, " ", u.last_name) AS updated_by' );
		$query->addSelect ( 'acc.username AS username, acc.id AS user_id' );

		$query->leftJoin ( $a . '.UserUpdated u' );
		$query->leftJoin ( $a . '.sfGuardUser acc With acc.user_type = ?', PreSchool::USER_TYPE_RELATIVE );
		$query->innerJoin ( $a . '.PsCustomer cus' );

		// $query->leftJoin ( 'cus.PsWard pw' );
		// $query->leftJoin ( 'pw.PsDistrict d' );
		// $query->leftJoin ( 'd.PsProvince p' );

		if (! myUser::credentialPsCustomers ( 'PS_STUDENT_RELATIVE_FILTER_SCHOOL' ) && myUser::getPscustomerID () > 0) {
			$query->where ( $a . '.ps_customer_id = ?', myUser::getPscustomerID () );
		}

		return $query;
	}
	public function getListRelative()
	{

		$q = $this->createQuery('r')->select('r.id as id, CONCAT(r.first_name, " ", r.last_name) AS title');

		$q->addOrderBy('id');

		return $q;
	}
	/**
	 * lấy các cột trong bang nguoi than
	 *
	 * @param int $student_id
	 * @return obj
	 */
	public function getRelativeByField($id,$getField = null) {
		
		$query = $this->createQuery () ->select ( $getField != '' ? $getField : '*' );
		
		$query->addWhere ( 'id = ?', $id );
		
		return $query->fetchOne ();
	}
	
	public function getRelativesBirthday($customer_id, $workplace_id, $class_id, $track_at = null) {

		$track_at = $track_at ? date ( 'Ymd', strtotime ( $track_at ) ) : date ( 'Ymd' );

		$birthday = date ( 'm', strtotime ( $track_at ) );

		$q = $this->createQuery ( 'r' );

		$q->select ( 'r.id AS member_id, r.first_name AS first_name, r.last_name AS last_name, r.sex AS sex, r.image AS image, DATE_FORMAT(r.deleted_at, "%Y%m%d") AS deleted_at' );

		$q->addSelect ( 'cus.school_code AS school_code, cus.school_name AS school_name' );

		$q->addSelect ( 'mc.id, sc.id, rs.id, s.id' );

		$q->leftJoin ( 'r.RelativeStudent rs' );

		$q->andWhere ( 'DATE_FORMAT(r.birthday, "%m") =?', $birthday );

		$q->andWhere ( '(r.deleted_at IS NULL )' );
		$q->andWhere ( 'r.ps_customer_id =?', $customer_id );
		$q->leftJoin ( 'rs.Student s WITH s.deleted_at IS NULL' );
		$q->innerJoin ( 'r.PsCustomer cus' );
		$q->innerJoin ( 's.StudentClass sc WITH (DATE_FORMAT(sc.start_at, "%Y%m%d") <=? AND (sc.stop_at IS NULL OR DATE_FORMAT(sc.stop_at, "%Y%m%d") >=?))', array (
				date ( 'Ymd' ),
				date ( 'Ymd' ) ) );

		if (is_array ( $class_id )) {

			$q->andWhereIn ( 'sc.myclass_id', $class_id );
		} elseif ($class_id > 0) {

			$q->andWhere ( 'sc.myclass_id=? ', $class_id );
		}

		$q->leftJoin ( 'sc.MyClass mc' );

		$q->innerJoin ( 'mc.PsClassRooms cr' );

		$q->andWhere ( 'cr.ps_workplace_id =?', $workplace_id );

		$q->andWhereIn ( 'sc.type', array (
				PreSchool::SC_STATUS_OFFICIAL,
				PreSchool::SC_STATUS_TEST ) );

		$q->orderBy ( 'r.birthday' );

		return $q->execute ();
	}

	/**
	 * Lấy danh sách tài khoản phụ huynh được tạo phục vụ đối soát tài khoản của phụ huynh theo từng tháng
	 *
	 * @param array $relative_id
	 *        	(function: getRelativeIdForCrossChecking)
	 *        	
	 * @date_created: 1-11-2018 Tam NT
	 */
	public function getTotalRelativeForCrossChecking($relative_id) {

		$q = $this->createQuery ( 'r' );
		$q->select ( 'count(r.id) AS count, DATE_FORMAT(r.created_at,"%m-%Y") AS month' );

		if (is_array ( $relative_id )) {
			$q->andWhereIn ( 'r.id', $relative_id );
		} else {
			$q->andWhere ( 'r.id=?', $relative_id );
		}

		$q->groupBy ( '(DATE_FORMAT(r.created_at,"%Y%m"))' );

		$q->orderBy ( 'r.created_at ASC' );

		return $q->fetchArray ();
	}

	/**
	 * Lấy danh sách tài khoản phụ huynh bị xóa phục vụ đối soát tài khoản của phụ huynh theo từng tháng
	 *
	 * @param array $relative_id
	 * @param
	 *        	array date(m-Y) $month
	 * @date_created: 1-11-2018 Tam NT
	 */
	public function getTotalRelativeDeleteForCrossChecking($relative_id, $month) {

		$q = $this->createQuery ( 'r' );
		$q->select ( 'count(r.id) AS count, DATE_FORMAT(r.deleted_at,"%m-%Y") AS deleted_at' );

		if (is_array ( $relative_id )) {
			$q->andWhereIn ( 'r.id', $relative_id );
		} else {
			$q->andWhere ( 'r.id=?', $relative_id );
		}

		if (is_array ( $month )) {
			$q->andWhereIn ( 'DATE_FORMAT(r.deleted_at,"%m-%Y")', $month );
		} else if ($month != '') {
			$q->andWhere ( 'DATE_FORMAT(r.deleted_at,"%m-%Y") LIKE ?', $month );
		}
		$q->groupBy ( '(DATE_FORMAT(r.created_at,"%Y%m"))' );

		$q->orderBy ( 'r.created_at ASC' );

		return $q->fetchArray ();
	}

	/**
	 * Lấy danh sách tài khoản phụ huynh phục vụ đối soát tài khoản của phụ huynh trong khoảng thời gian A - B
	 *
	 * @param
	 *        	$param
	 *        	
	 * @date_created: 1-11-2018 Tam NT
	 */
	public function getRelativeIdForCrossChecking($param) {

		$param ['from_date'] = isset ( $param ['from_date'] ) ? date ( 'Ymd', strtotime ( $param ['from_date'] ) ) : date ( 'Ymd' );
		$param ['to_date'] = isset ( $param ['to_date'] ) ? date ( 'Ymd', strtotime ( $param ['to_date'] ) ) : date ( 'Ymd' );

		$q = $this->createQuery ( 'r' );
		$q->select ( 'r.id AS id, u.id AS user_id, DATE_FORMAT(sc.start_at, "%Y%m%d") AS sc_start_at, DATE_FORMAT(sc.stop_at, "%Y%m%d") AS sc_stop_at' );

		if (isset ( $param ['ps_customer_id'] ) && $param ['ps_customer_id'] > 0) {
			$q->andWhere ( 'r.ps_customer_id=?', $param ['ps_customer_id'] );
		}

		$q->innerJoin ( 'r.RelativeStudent rs' )
			->innerJoin ( 'rs.Student s WITH (s.deleted_at IS NULL OR DATE_FORMAT(s.deleted_at,"%Y%m%d") >=?)', $param ['to_date'] )
			->innerJoin ( 's.StudentClass sc' )
			->andWhereIn ( 'sc.type', array (
				PreSchool::SC_STATUS_OFFICIAL,
				PreSchool::SC_STATUS_TEST ) )
			->innerJoin ( 'sc.MyClass mc' );

		if (isset ( $param ['ps_class_id'] ) && $param ['ps_class_id'] > 0) {
			$q->andWhere ( 'mc.id=?', $param ['ps_class_id'] );
		}

		$q->innerJoin ( 'mc.PsClassRooms cr' );

		if (isset ( $param ['ps_workplace_id'] ) && $param ['ps_workplace_id'] > 0) {
			$q->andWhere ( 'cr.ps_workplace_id =?', $param ['ps_workplace_id'] );
		}

		$q->leftJoin ( 'r.sfGuardUser u WITH (u.user_type =? AND u.is_active != ?)', array (
				PreSchool::USER_TYPE_RELATIVE,
				PreSchool::CUSTOMER_NOT_ACTIVATED ) );

		$q->andWhere ( '(r.deleted_at IS NULL OR DATE_FORMAT(r.deleted_at,"%Y%m%d") <=?)', $param ['to_date'] );

		$q->andWhere ( 'DATE_FORMAT(r.created_at,"%Y%m%d") BETWEEN ? AND ?', array (
				$param ['from_date'],
				$param ['to_date'] ) );

		return $q->fetchArray ();
	}

	/**
	 * Lay danh sach nguoi than theo relative id
	 *
	 * @author Pham Van Thien
	 *        
	 * @param
	 *        	int relative_id
	 * @return Obj
	 *
	 *
	 */
	public function getRelativeById($relative_id) {

		$query = $this->createQuery ( 'r' );

		$query->select ( 'r.id AS id, ' . 'r.first_name AS first_name, ' . 'r.last_name AS last_name, ' . 'r.image AS image, r.year_data, ' . 'r.sex AS sex, ' . 'r.job AS job, ' . 'r.address AS address, ' . 'r.birthday AS birthday, ' . 'r.mobile AS mobile, ' . 'r.phone AS phone, ' . 'r.deleted_at AS deleted_at, ' . 'r.email AS email, ' . 'r.nationality as nationality,' . 'cus.school_code AS school_code,' . 'cus.school_name AS school_name,' . 'cus.address AS school_address,' . 'd.name as district_name,' . 'p.name as province_name,' . 'w.name as ward_name,' . 'e.title as ethnic_title,' . 'pr.title as religion_title,' . 'r.user_updated_id AS user_updated_id, ' . 'r.updated_at AS updated_at' );

		$query->addSelect ( 'wp.title as wp_title,CONCAT(u.first_name, " ", u.last_name) AS updated_by,acc.username AS username, acc.id AS user_id' );

		$query->leftJoin ( 'r.UserUpdated u' );
		$query->leftJoin ( 'r.sfGuardUser acc With acc.user_type = ?', PreSchool::USER_TYPE_RELATIVE );
		$query->innerJoin ( 'r.PsCustomer cus' );
		$query->leftJoin ( 'r.PsWorkPlaces wp' );
		$query->leftJoin ( 'r.PsEthnic e' );
		$query->leftJoin ( 'r.PsReligion pr' );
		$query->leftJoin ( 'cus.PsWard w' );
		$query->leftJoin ( 'w.PsDistrict d' );
		$query->leftJoin ( 'd.PsProvince p' );
		$query->addWhere ( 'r.id = ?', $relative_id );

		return $query->fetchOne ();
	}

	public function checkIdentityCardExits($identity_card, $objid = null) {

		$query = $this->createQuery ()
			->select ( 'id' );

		if ($identity_card != '')
			$query->where ( 'identity_card = ?', $identity_card );

		if ($objid > 0)
			$query->andwhere ( 'id <> ?', $objid );

		$records = $query->execute ();

		return count ( $records ) ? true : false;
	}

	/**
	 * Ham lay danh sach nguoi co the chon duoc lam nguoi than cua hoc sinh
	 *
	 * @author Pham van thien
	 *        
	 * @param int $student_id,ps_customer_id
	 * @return Obj
	 *
	 */
	public function getAllRelativeForStudent($student_id = '', $ps_customer_id = '', $keywords = '') {

		$q = $this->createQuery ( 'r' );

		$q->select ( 'CONCAT(r.first_name, " ", r.last_name) AS full_name, r.sex AS sex,
			    r.phone AS phone,r.birthday AS relative_birthday,r.mobile AS mobile,r.email AS email,
			    r.image AS image' );
		if ($student_id > 0) {
			$q->leftJoin ( 'r.RelativeStudent rs With rs.student_id = ?', $student_id );
			$q->andWhere ( 'rs.id IS NULL OR r.id IS NULL' );
		}
		if ($ps_customer_id > 0) {
			$q->andWhere ( 'r.ps_customer_id = ?', $ps_customer_id );
		}

		$keywords = PreString::trim ( $keywords );

		$keywords = PreString::strReplace ( $keywords );

		if ($keywords != null) {
			$keywords = '%' . PreString::strLower ( $keywords ) . '%';

			$q->addWhere ( 'LOWER(r.email) LIKE ? OR LOWER(r.mobile) LIKE ? OR LOWER(r.first_name) LIKE ? OR LOWER(r.last_name) LIKE ? OR  LOWER( CONCAT(r.first_name," ", r.last_name) ) LIKE ?', array (
					$keywords,
					$keywords,
					$keywords,
					$keywords,
					$keywords ) );
		}

		$q->addOrderBy ( 'r.last_name,r.first_name, r.id DESC' );

		return $q->execute ();
	}

	/**
	 * sql danh sach nguoi co the chon duoc lam nguoi than cua hoc sinh
	 *
	 * @author Pham van thien
	 *        
	 * @param int $student_id,ps_customer_id
	 * @return string sql
	 *        
	 */
	public function setSqlAllRelativeForStudent($student_id = '', $ps_customer_id = '', $keywords = '') {

		$q = $this->createQuery ( 'r' );

		$q->select ( 'CONCAT(r.first_name, " ", r.last_name) AS full_name, r.sex AS sex,
			    r.phone AS phone,r.birthday AS relative_birthday,r.mobile AS mobile,r.email AS email,
			    r.image AS image' );

		if ($student_id > 0) {
			$q->leftJoin ( 'r.RelativeStudent rs With (rs.student_id = ?)', $student_id );
			// $q->andWhere ( 'rs.id IS NULL OR r.id IS NULL' );
		}

		if ($ps_customer_id > 0) {
			$q->andWhere ( 'r.ps_customer_id = ?', $ps_customer_id );
		}

		$q->andWhere ( 'r.deleted_at IS NULL' );

		$keywords = PreString::trim ( $keywords );

		$keywords = PreString::strReplace ( $keywords );

		if ($keywords != null) {
			$keywords = '%' . PreString::strLower ( $keywords ) . '%';

			$q->addWhere ( 'LOWER(r.email) LIKE ? OR LOWER(r.mobile) LIKE ? OR LOWER(r.first_name) LIKE ? OR LOWER(r.last_name) LIKE ? OR  LOWER( CONCAT(r.first_name," ", r.last_name) ) LIKE ?', array (
					$keywords,
					$keywords,
					$keywords,
					$keywords,
					$keywords ) );
		}

		$q->addOrderBy ( 'r.last_name,r.first_name, r.id DESC' );

		return $q;
	}

	/**
	 * Lay thong tin ngan cua nhan su
	 *
	 * @author thangnc
	 *        
	 * @param
	 *        	int ps_member_id
	 * @return Obj
	 *
	 */
	public function getProfileShort($ps_member_id) {

		$query = $this->createQuery ( 'm' );

		$query->select ( 'm.id AS id, ' . 'm.id as member_code, ' . 'm.first_name AS first_name, ' . 'm.last_name AS last_name, ' . 'm.image AS image, ' . 'm.avatar AS avatar', 'm.year_data AS year_data', 'cus.school_code AS school_code, cus.cache_data AS cache_data' );
		$query->innerJoin ( 'm.PsCustomer cus' );
		$query->addWhere ( 'm.id = ?', $ps_member_id );

		return $query->fetchOne ();
	}

	/**
	 * Lay danh sach nguoi than hoc sinh da kich hoat tai khoan nguoi dung
	 */
	public function getRelativeActiveAccount($customer_id, $class_id = null, $keywords = null, $member_id = null, $app_mobile_actived = null) {

		$q = $this->createQuery ( 'r' )
			->select ( 'r.id AS member_id, CONCAT(r.first_name, " ", r.last_name) AS full_name, r.first_name AS first_name, r.last_name AS last_name, r.image AS image, r.sex AS sex, r.birthday AS birthday, TRIM(r.mobile) AS mobile, r.email AS email, ' . 'cus.school_code AS school_code,' . 'cus.school_name AS school_name, r.user_updated_id AS user_updated_id, r.updated_at AS updated_at, r.year_data AS year_data' );

		$q->addSelect ( 'u.id AS user_id, u.username AS username, u.app_device_id AS app_device_id, u.api_token AS api_token, u.token_last_login AS token_last_login,u.is_active AS is_active' );
		$q->addSelect ( 'rs.id, sc.id' );
		$q->addSelect ( 's.id AS student_id, s.student_code AS student_code, CONCAT(s.first_name, " ", s.last_name) AS student_name' );

		$q->addSelect ( 'mc.id AS mc_id, mc.code AS mc_code, mc.name AS mc_name' );

		$q->innerJoin ( 'r.RelativeStudent rs' );

		if (isset ( $app_mobile_actived ) && $app_mobile_actived != '') {

			if ($app_mobile_actived == PreSchool::NOT_ACTIVE) {

				$q->innerJoin ( 'r.sfGuardUser u WITH (u.user_type =? AND u.is_active = ? AND u.app_device_id IS NULL)', array (
						PreSchool::USER_TYPE_RELATIVE,
						PreSchool::CUSTOMER_ACTIVATED ) );

				// $q->andWhere('u.app_device_id IS NULL');
			} elseif ($app_mobile_actived == PreSchool::ACTIVE) {

				$q->innerJoin ( 'r.sfGuardUser u WITH (u.user_type =? AND u.is_active = ? AND u.app_device_id IS NOT NULL)', array (
						PreSchool::USER_TYPE_RELATIVE,
						PreSchool::CUSTOMER_ACTIVATED ) );

				// $q->andWhere('u.app_device_id IS NOT NULL');
			} 
			
		} else {
		    $q->leftJoin ( 'r.sfGuardUser u WITH (u.user_type =?)', PreSchool::USER_TYPE_RELATIVE );
		    /*
			$q->leftJoin ( 'r.sfGuardUser u WITH (u.user_type =? AND u.is_active != ?)', array (
					PreSchool::USER_TYPE_RELATIVE,
			        PreSchool::CUSTOMER_LOCK ) );
			        */
		}

		$q->innerJoin ( 'rs.Student s WITH s.deleted_at IS NULL' );

		$q->innerJoin ( 'r.PsCustomer cus' );

		$date_at = date ( "Ym" );

		$q->andWhere ( 'r.deleted_at IS NULL' );

		$q->andWhere ( 'r.ps_customer_id =?', $customer_id );

		if ($class_id != '') {
		    
			if (is_array ( $class_id )) {
			    
				$q->innerJoin ( 's.StudentClass sc WITH sc.is_activated=?', PreSchool::ACTIVE );

				$q->andWhereIn ( 'sc.myclass_id', $class_id );

				// moi them cho nay
				$q->addWhere ( '(DATE_FORMAT(sc.start_at,"%Y%m") <= ? AND (sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m") >= ?))', array (
						$date_at,
						$date_at ) );
			} else {
				$q->innerJoin ( 's.StudentClass sc WITH (sc.myclass_id=? AND sc.is_activated=?) AND (DATE_FORMAT(sc.start_at,"%Y%m") <= ? AND (sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m") >= ?))', array (
						$class_id,
						PreSchool::ACTIVE,
						$date_at,
						$date_at ) );
			}
			
		} else {
		    $q->innerJoin ( 's.StudentClass sc WITH (sc.is_activated=? AND (DATE_FORMAT(sc.start_at,"%Y%m") <= ? AND (sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m") >= ?)))', array (PreSchool::ACTIVE, $date_at, $date_at) );
		}

		$q->innerJoin ( 'sc.MyClass mc' );

		$q->andWhereIn ( 'sc.type', array (
				PreSchool::SC_STATUS_OFFICIAL,
				PreSchool::SC_STATUS_TEST ) );

		if (isset ( $keywords ) && $keywords != '') {
			$keywords = PreString::trim ( $keywords );

			$keywords = '%' . PreString::strLower ( $keywords ) . '%';

			$q->addWhere ( 'LOWER(mc.code) LIKE ? OR LOWER(mc.name) LIKE ? ', array (
					$keywords,
					$keywords ) );
		}
		if (isset ( $member_id ) && $member_id != null) {
			if (is_array ( $member_id )) {
				$q->andWhereIn ( 'r.id', $member_id );
			} else {
				$q->andWhere ( 'r.id =?', $member_id );
			}
		}

		$q->groupBy ( 'r.id' );

		return $q->execute ();
	}

	
	/**
	 * Lay danh sach nguoi than hoc sinh da kich hoat tai khoan nguoi dung
	 */
	public function getRelativeActiveAccount2($customer_id,$ps_workplece_id, $class_id = null, $app_mobile_actived = null) {
		
		$q = Doctrine_Query::create ()->from ( 'Relative r' );
		
		$q->select ( 'r.id AS member_id, CONCAT(r.first_name, " ", r.last_name) AS full_name, r.first_name AS first_name, r.last_name AS last_name, r.image AS image, r.sex AS sex, r.birthday AS birthday, TRIM(r.mobile) AS mobile, r.email AS email, ' . 'cus.school_code AS school_code,' . 'cus.school_name AS school_name, r.user_updated_id AS user_updated_id, r.updated_at AS updated_at, r.year_data AS year_data' );
		$q->addSelect ( 'u.id AS user_id, u.username AS username, u.app_device_id AS app_device_id, u.api_token AS api_token, u.token_last_login AS token_last_login,' );
		$q->addSelect ( 'rs.id, sc.id' );
		$q->addSelect ( 's.id AS student_id, s.student_code AS student_code, CONCAT(s.first_name, " ", s.last_name) AS student_name' );
		
		$q->addSelect ( 'mc.id AS mc_id, mc.code AS mc_code, mc.name AS mc_name' );
		
		$q->innerJoin('r.RelativeStudent rs');
		$q->innerJoin('rs.Student s WITH s.deleted_at IS NULL');
		$q->innerJoin ( 's.PsCustomer cus' );
		
		if (isset ( $app_mobile_actived ) && $app_mobile_actived != '') {
			
			if ($app_mobile_actived == PreSchool::NOT_ACTIVE) {
				
				$q->innerJoin ( 'r.sfGuardUser u WITH (u.user_type =? AND u.is_active = ? AND u.app_device_id IS NULL)', array (
						PreSchool::USER_TYPE_RELATIVE,
						PreSchool::CUSTOMER_ACTIVATED ) );
				
			} elseif ($app_mobile_actived == PreSchool::ACTIVE) {
				
				$q->innerJoin ( 'r.sfGuardUser u WITH (u.user_type =? AND u.is_active = ? AND u.app_device_id IS NOT NULL)', array (
						PreSchool::USER_TYPE_RELATIVE,
						PreSchool::CUSTOMER_ACTIVATED ) );
				
			}
		} else {
		    $q->leftJoin ( 'r.sfGuardUser u WITH (u.user_type =?)', PreSchool::USER_TYPE_RELATIVE );
		}
		
		$date_at = date ( "Ymd" );
		
		$q->andWhere ( 'r.deleted_at IS NULL' );
		
		$q->andWhere ( 's.ps_customer_id =?', $customer_id );
		
		if (isset ( $class_id )) {
			if (is_array ( $class_id )) {
				
				$q->innerJoin ( 's.StudentClass sc WITH sc.is_activated=?', PreSchool::ACTIVE );
				
				$q->andWhereIn ( 'sc.myclass_id', $class_id );
				
				// moi them cho nay
				$q->addWhere ( '(DATE_FORMAT(sc.start_at,"%Y%m%d") <= ? AND (sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?))', array (
						$date_at,
						$date_at ) );
			} else {
				$q->innerJoin ( 's.StudentClass sc WITH (sc.myclass_id=? AND sc.is_activated=?) AND (DATE_FORMAT(sc.start_at,"%Y%m%d") <= ? AND (sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?))', array (
						$class_id,
						PreSchool::ACTIVE,
						$date_at,
						$date_at ) );
			}
		} else {
			//$q->innerJoin ( 's.StudentClass sc');
			$q->innerJoin ( 's.StudentClass sc WITH sc.is_activated=? AND (DATE_FORMAT(sc.start_at,"%Y%m%d") <= ? AND (sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m%d") >= ?))', PreSchool::ACTIVE, $date_at, $date_at );
		}
		
		$q->innerJoin ( 'sc.MyClass mc' );
		
		if($ps_workplece_id > 0){
		    $q->andWhere('mc.ps_workplace_id =?', $ps_workplece_id);
		}
		
		$q->andWhereIn ( 'sc.type', array (
				PreSchool::SC_STATUS_OFFICIAL,
				PreSchool::SC_STATUS_TEST ) );
		
		return $q->execute ();
	}
	
	
	/**
	 * Phung Van Thanh
	 * tong tai khoan phu huynh trong 1 co so
	 */
	public function getSumAccountRelativeActive($customer_id, $ps_workplace_id) {

		$q = $this->createQuery ( 'r' )
			->select ( 'r.id AS relative_id' );
		$q->addSelect ( 'u.id AS user_id, u.username AS username, u.app_device_id AS app_device_id, u.api_token AS api_token, u.token_last_login AS token_last_login,' );
		$q->addSelect ( 'rs.id, sc.id' );

		$q->addSelect ( 's.id AS student_id' );

		$q->innerJoin ( 'r.RelativeStudent rs' );

		$q->leftJoin ( 'r.sfGuardUser u WITH (u.user_type =? AND u.is_active = ?)', array (
				PreSchool::USER_TYPE_RELATIVE,
				PreSchool::CUSTOMER_ACTIVATED ) );

		$q->innerJoin ( 'rs.Student s WITH s.deleted_at IS NULL' );

		$q->addWhere ( 'r.deleted_at IS NULL' );

		$q->addwhere ( 'r.ps_customer_id =?', $customer_id );

		$q->addwhere ( 'r.ps_workplace_id =?', $ps_workplace_id );

		$q->groupBy ( 'r.id' );

		return $q->execute ();
	}

	/**
	 * Phung Van Thanh
	 * Lay ra email nguoi giam ho chinh
	 */
	public function getEmailRelativeParentMain($customer_id, $student_id) {

		$q = $this->createQuery ( 'r' )
			->select ( 'r.id AS relative_id, r.email as email' );
		$q->addSelect ( 's.id AS student_id,rs.id' );

		$q->innerJoin ( 'r.RelativeStudent rs' );

		$q->innerJoin ( 'rs.Student s WITH s.deleted_at IS NULL' );

		$q->addWhere ( 'r.deleted_at IS NULL' );

		$q->addwhere ( 'r.ps_customer_id =?', $customer_id );

		$q->addwhere ( 's.id =?', $student_id );

		$q->addwhere ( 'rs.is_parent_main = 1' ); // quyen giam ho chinh

		$q->groupBy ( 'r.id' );

		return $q->execute ();
	}

	/**
	 * ************END: VESION 1.5 *********************************************************************
	 */

	// Ham lay mot nguoi than cua hoc sinh
	public function getRelativeByStudent($student_id = '') {

		$q = $this->createQuery ( 'r' )
			->InnerJoin ( 'r.RelativeStudent rs' );
		$q->andWhere ( 'rs.student_id = ?', $student_id );
		$q->addOrderBy ( 'rs.is_parent DESC' );
		$q->limit ( 1 );

		return $q->execute ();
	}

	/**
	 * Ham lay mot nguoi than cua hoc sinh *
	 */
	public function getRelativeOfStudent($student_id = '') {

		$q = $this->createQuery ( 'r' )
			->select ( 'rs.id AS rs_id,r.birthday,r.identity_card,r.image,r.email,r.phone,r.mobile,r.tel, re.id AS re_id,re.title AS title' )
			->InnerJoin ( 'r.RelativeStudent rs' )
			->InnerJoin ( 'rs.Relationship re' );

		$q->andWhere ( 'rs.student_id = ?', $student_id );
		$q->addOrderBy ( 'rs.is_parent DESC' );
		$q->limit ( 1 );

		return $q->fetchOne ();
	}

	/**
	 * setSqlRelativeForStudent($student_id = '')
	 * Ham lay danh sach nguoi co the chon lam nguoi tham cua mot hoc sinh
	 *
	 * @param int $student_id
	 *
	 * @return String sql;
	 *        
	 */
	public function setSqlRelativeForStudent($student_id = '', $keyword = '') {

		$q = $this->createQuery ( 'r' )
			->Select ( 'r.birthday,r.identity_card,r.image' );

		if ($student_id > 0) {
			$q->leftJoin ( 'r.RelativeStudent rs With rs.student_id = ?', $student_id );
			$q->andWhere ( 'rs.id IS NULL OR r.id IS NULL' );
		}

		$keyword = (trim ( $keyword ) != '') ? '%' . trim ( strtolower ( $keyword ) ) . '%' : '';
		if ($keyword != '') {
			$q->addWhere ( 'LOWER(r.identity_card) LIKE ? OR LOWER(r.phone) LIKE ? OR LOWER(r.mobile) LIKE ? OR LOWER(r.email) LIKE ? OR LOWER(r.address) LIKE ? OR LOWER(r.tel) LIKE ?', array (
					$keyword,
					$keyword,
					$keyword,
					$keyword,
					$keyword,
					$keyword ) );
		}

		$q->addOrderBy ( 'r.updated_at DESC, r.id DESC' );

		return $q;
	}

	/**
	 * countSqlRelativeForStudent($sql)
	 * Ham tinh tong so ban ghi tra ve
	 *
	 * @param
	 *
	 * @return String sql;
	 *        
	 */
	public function countSqlRelativeForStudent($student_id, $keyword = '') {

		$q = $this->createQuery ( 'r' )
			->Select ( 'COUNT(r.id)' );

		if ($student_id > 0) {
			$q->leftJoin ( 'r.RelativeStudent rs With rs.student_id = ?', $student_id );
			$q->andWhere ( 'rs.id IS NULL OR r.id IS NULL' );
		}

		$keyword = (trim ( $keyword ) != '') ? '%' . trim ( $keyword ) . '%' : '';
		if ($keyword != '') {
			$q->addWhere ( 'LOWER(r.phone) LIKE ? OR LOWER(r.mobile) LIKE ? OR LOWER(r.email) LIKE ? OR LOWER(r.address) LIKE ?', array (
					$keyword,
					$keyword,
					$keyword,
					$keyword ) );
		}

		return $this->setSqlRelativeForStudent ( $student_id, $keyword )
			->count ();
	}

	/**
	 * Ham lay danh sach nguoi than cua mot hoc sinh
	 *
	 * @author Nguyen Chien Thang
	 *        
	 * @param int $student_id
	 *
	 * @return String sql;
	 *        
	 */
	public function setSqlRelativeByStudent($student_id) {

		$q = $this->createQuery ( 'r' )
			->select ( 'r.id AS id,CONCAT(re.title, " ", CONCAT(r.first_name," ",r.last_name) ) AS title' )
			->InnerJoin ( 'r.RelativeStudent rs' )
			->InnerJoin ( 'rs.Relationship re' );

		$q->andWhere ( 'rs.student_id = ?', $student_id );
		$q->addOrderBy ( 'rs.is_parent DESC, r.last_name' );

		return $q;
	}

	// +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
	/**
	 * Tao SQL danh sach Relative de tao User
	 *
	 * @return mixed
	*/
	public function setSQLRelativeForUser($ps_customer_id = '', $flag_all = true, $flag_deleted_at = false) {

		$q = $this->setSQLRelatives ( $ps_customer_id, $flag_all, $flag_deleted_at );
		return $q;
	}

	/**
	 * Tao SQL danh sach Relative
	 *
	 * @param $ps_customer_id - ID trường
	 * @param $flag_all - boolean lấy toàn bộ người thân hay lấy chưa có user
	 * @param $flag_deleted_at - boolean, lấy cả người thân đã xóa hay không
	 * 
	 * @return string        
	 */
	public function setSQLRelatives($ps_customer_id = '', $flag_all = true, $flag_deleted_at = false) {

		$q = $this->createQuery ( 'm' )->select ( 'm.id AS id,CONCAT(m.first_name," ",m.last_name, "- ID: ", m.id) AS title, mobile as mobile' );

		if (! $flag_all) { // Chi lay nhung member chua duoc tao user
			$q->where ( "m.id NOT IN (SELECT u.member_id FROM sfGuardUser u WHERE user_type = ?)", PreSchool::USER_TYPE_RELATIVE );
		}
		
		if ($flag_deleted_at == false)
			$q->andWhere ( 'm.deleted_at IS NULL');

		if ($ps_customer_id > 0)
			$q->andWhere ( 'm.ps_customer_id = ?', $ps_customer_id );
		
		$q->orderBy ( 'm.last_name' );

		return $q;
	}


	// Lấy danh sách người thân chưa có tài khoản
	public function layDanhSachNguoiThan($ps_customer_id = '', $flag_all = true, $flag_deleted_at = false) {

		$q = $this->createQuery ( 'm' )->select ( 'm.*' );

		if (! $flag_all) { // Chi lay nhung member chua duoc tao user
			$q->where ( "m.id NOT IN (SELECT u.member_id FROM sfGuardUser u WHERE user_type = ?)", PreSchool::USER_TYPE_RELATIVE );
		}
		
		if ($flag_deleted_at == false)
			$q->andWhere ( 'm.deleted_at IS NULL');

		if ($ps_customer_id > 0)
			$q->andWhere ( 'm.ps_customer_id = ?', $ps_customer_id );
		
		$q->orderBy ( 'm.last_name' );
		//$q->limit(2);
		return $q->execute();
	}

	/**
	 * lấy sql tài khoản phụ huynh của trường
	 *
	 * @param int $ps_customer_id
	 *        	mã trường
	 * @return string SQL
	 */
	public function setSQLRelative($ps_customer_id = null) {

		$q = $this->createQuery ( 'm' )
			->select ( "m.id , gu.id AS id,CONCAT(m.first_name,' ',m.last_name,' (',gu.username, ')') AS title" );

		$q->addWhere ( 'gu.user_type = ?', PreSchool::USER_TYPE_RELATIVE );

		$q->innerJoin ( "m.sfGuardUser gu" );

		if ($ps_customer_id > 0)
			$q->andWhere ( 'm.ps_customer_id = ?', $ps_customer_id )
				->addOrderBy ( 'm.id' );
		else
			$q->addOrderBy ( 'm.ps_customer_id,m.id' );

		return $q;
	}

	/**
	 * Lấy id người thân dựa vào id tài khoản
	 *
	 * @param int $user_id
	 *        	id tài khoản
	 * @return obj
	 */
	public function getRelativeByUserId($user_id) {

		$query = $this->createQuery ( 'a' );

		$query->select ( 'a.last_name as last_name' );

		$query->innerJoin ( 'a.sfGuardUser u' );

		$query->addWhere ( 'u.id = ?', $user_id );

		return $query->fetchOne ();
	}

	/**
	 * lấy tên người thân
	 *
	 * @param int $relative_id
	 * @return obj
	 */
	public function getRelativeName($relative_id) {

		$query = $this->createQuery ( 'a' );

		$query->select ( 'CONCAT(a.first_name, " ", a.last_name) AS name' )
			->where ( 'a.id = ?', $relative_id );

		return $query->fetchOne ();
	}
}