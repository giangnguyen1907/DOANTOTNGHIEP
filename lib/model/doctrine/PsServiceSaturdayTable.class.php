<?php

/**
 * PsServiceSaturdayTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PsServiceSaturdayTable extends Doctrine_Table {

	/**
	 * Returns an instance of this class.
	 *
	 * @return object PsServiceSaturdayTable
	 */
	public static function getInstance() {

		return Doctrine_Core::getTable ( 'PsServiceSaturday' );
	}

	public function doSelectQuery(Doctrine_Query $query) {

		$query = Doctrine_Query::create ()->from ( 'PsServiceSaturdayDate psd' );
		$query->select ( 'psd.id AS id, ' . 'psd.ps_service_saturday_id AS ps_service_saturday_id, ' . 'psd.service_date AS service_date,' . 'ps.id AS ps_id, ' . 'ps.created_at AS created_at, ' . 'ps.input_date_at AS input_date_at, ' . 's.image AS image, ' . 's.id as student_id, s.student_code AS student_code, ' . 's.sex AS sex, ' . 's.birthday AS birthday, ' . 's.year_data AS year_data, ' . 're.id AS re_id, ' . 'sv.title AS sv_title, ' . 'CONCAT(re.first_name, " ", re.last_name) AS full_name,' . 'cus.school_code AS school_code,' . 'CONCAT(s.first_name, " ", s.last_name) AS student_name' );

		$query->addSelect ( 'CONCAT(u.first_name, " ", u.last_name) AS updated_by' );

		$query->leftJoin ( 'psd.PsServiceSaturday ps' );

		$query->leftJoin ( 'ps.Relative re' );

		$query->leftJoin ( 'ps.Service sv' );

		$query->innerJoin ( 'ps.UserUpdated u' );

		$query->innerJoin ( 'ps.Student s' );

		$query->innerJoin ( 's.PsCustomer cus' );

		$query->addWhere ( 's.deleted_at IS NULL' );

		if (! myUser::credentialPsCustomers ( 'PS_SERVICE_SATURDAY_FILTER_SCHOOL' ) && myUser::getPscustomerID () > 0) {
			$query->addWhere ( 's.ps_customer_id = ?', myUser::getPscustomerID () );
		}

		$query->orderBy ( 'psd.id desc, s.id' );

		return $query;
	}

	/**
	 * lay hoc sinh dang ky hoc thu 7 khong co dinh cua lop de thong ke
	 *
	 * @author Phung Van Thanh
	 *        
	 * @param
	 *        	class_id
	 * @return Obj
	 *
	 */
	public function getServiceSatudayClassId($myclass_id, $ps_workplace_id, $saturday) {

		// echo $ps_workplace_id; die();
		$q = $this->createQuery ()
			->from ( 'PsServiceSaturdayDate psd' )
			->select ( 'psd.id AS id, ' . 'psd.ps_service_saturday_id AS ps_service_saturday_id, ' . 'psd.service_date AS service_date,' . 'ps.id AS ps_id, ' . 'ps.input_date_at AS input_date_at, ' . 's.image AS image, ' . 's.id as student_id, s.student_code AS student_code, ' . 's.sex AS sex, ' . 's.birthday AS birthday, ' . 's.year_data AS year_data, ' . 're.id AS re_id, ' . 'sc.id AS sc_id, ' . 'mc.id AS mc_id, ' . 'mc.name AS mc_name, ' . 'sv.title AS sv_title, ' . 'CONCAT(re.first_name, " ", re.last_name) AS full_name,' . 'CONCAT(s.first_name, " ", s.last_name) AS student_name' )
			->
		addSelect ( 'CONCAT(u.first_name, " ", u.last_name) AS updated_by' )
			->innerJoin ( 'psd.PsServiceSaturday ps' )
			->leftJoin ( 'ps.Relative re' )
			->leftJoin ( 'ps.Service sv' )
			->innerJoin ( 'ps.UserUpdated u' )
			->leftJoin ( 'ps.Student s' )
			->innerJoin ( 's.StudentClass sc' )
			->innerJoin ( 'sc.MyClass mc' )
			->leftJoin ( 'mc.PsClassRooms cr' )
			->leftJoin ( 'cr.PsWorkPlaces wp' );

		if ($myclass_id > 0) {
			$q->andWhere ( 'sc.myclass_id = ?', $myclass_id );
		} else {
			$q->andWhere ( 'wp.id = ?', $ps_workplace_id );
		}
		$q->andWhereIn ( 'sc.type', array (
				PreSchool::SC_STATUS_TEST,
				PreSchool::SC_STATUS_OFFICIAL ) )
			->
		addWhere ( 'DATE_FORMAT(psd.service_date,"%Y%m%d") =?', date ( "Ymd", strtotime ( $saturday ) ) )
			->
		andWhere ( 's.deleted_at IS NULL' );

		$q->orderBy ( 'psd.id DESC' );

		return $q->execute ();
	}
}