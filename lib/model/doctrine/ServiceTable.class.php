<?php

/**
 * ServiceTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ServiceTable extends Doctrine_Table {

	/**
	 * Returns an instance of this class.
	 *
	 * @return object ServiceTable
	 */
	public static function getInstance() {

		return Doctrine_Core::getTable ( 'Service' );
	}

	// ================================ BEGIN: V1.5 Cloud ============================================================*

	/**
	 * FUNCTION: doSelectQuery(Doctrine_Query $query)
	 *
	 * @param
	 *        	Doctrine SQL
	 * @return string SQL
	 */
	public function doSelectQuery(Doctrine_Query $query) {

		$a = $query->getRootAlias ();

		$query->select ( $a . '.id AS id, ' . $a . '.title AS title, ' . $a . '.ps_image_id AS ps_image_id, I.file_name AS file_name, ' . $a . '.ps_workplace_id AS ps_workplace_id,' . $a . '.ps_school_year_id AS school_year_id,' . $a . '.enable_roll AS enable_roll, ' . $a . '.iorder AS iorder, ' . $a . '.is_activated AS is_activated, ' . $a . '.user_updated_id AS user_updated_id, ' . $a . '.is_default AS is_default,' . $a . '.updated_at AS updated_at, sg.title AS group_name' );

		$query->innerJoin ( $a . '.ServiceGroup sg' );

		$query->leftJoin ( $a . '.PsImages I' );

		$query->addSelect ( 'CONCAT(u.first_name, " ", u.last_name) AS updated_by' );

		$query->leftJoin ( $a . '.UserUpdated u' );

		// La dich vu binh thuong
		$query->where ( $a . '.enable_schedule = ?', PreSchool::NOT_ACTIVE );

		/*
		 * $query->whereIn ( $a . '.enable_roll', array ( PreSchool::SERVICE_TYPE_FIXED, PreSchool::SERVICE_TYPE_NOT_FIXED ) );
		 */

		if (! myUser::credentialPsCustomers ( 'PS_STUDENT_SERVICE_FILTER_SCHOOL' ) && myUser::getPscustomerID () > 0) {
			$query->addWhere ( $a . '.ps_customer_id = ?', myUser::getPscustomerID () );
		}

		return $query;
	}

	public function getServiceByField($id,$getField = null) {
		
		$query = $this->createQuery () ->select ( $getField != '' ? $getField : '*' );
		
		$query->addWhere ( 'id = ?', $id );
		
		return $query->fetchOne ();
	}
	
	/**
	 * FUNCTION: doSelectQuerySubjects(Doctrine_Query $query) - Mon hoc
	 *
	 * @param
	 *        	Doctrine SQL
	 * @return string SQL
	 */
	public function doSelectQuerySubjects(Doctrine_Query $query) {

		$a = $query->getRootAlias ();

		$query->select ( $a . '.id AS id, ' . $a . '.title AS title, ' . $a . '.ps_image_id AS ps_image_id, I.file_name AS file_name, ' . $a . '.enable_roll AS enable_roll, ' . $a . '.number_course AS number_course, ' . $a . '.iorder AS iorder, ' . $a . '.is_activated AS is_activated, ' . $a . '.user_updated_id AS user_updated_id, ' . $a . '.is_default AS is_default,' . $a . '.updated_at AS updated_at, sg.title AS group_name' );

		$query->innerJoin ( $a . '.ServiceGroup sg' );

		$query->leftJoin ( $a . '.PsImages I' );

		$query->where ( $a . '.enable_schedule = ?', PreSchool::ACTIVE );

		if (! myUser::credentialPsCustomers ( 'PS_STUDENT_SUBJECT_FILTER_SCHOOL' ) && myUser::getPscustomerID () > 0) {
			$query->andWhere ( $a . '.ps_customer_id = ?', myUser::getPscustomerID () );
		}

		return $query;
	}

	/**
	 * Lay cac dich vu cua truong
	 * Phung Van Thanh
	 */
	public function getListServiceOfSchool($ps_school_year_id, $ps_customer_id) {

		$q = $this->createQuery ( 's' )
			->select ( "s.id as id,s.title as title,dt.amount as amount,wp.title AS wp_title,wp.id AS wp_id,psy.title AS school_year,gr.title as gr_title" );
		$q->leftJoin ( 's.PsWorkPlaces wp' );
		$q->leftJoin ( 's.ServiceGroup gr' );
		$q->leftJoin ( 's.ServiceDetail dt' );
		$q->leftJoin ( 's.PsSchoolYear psy' );
		$q->addWhere ( 's.ps_customer_id = ?', $ps_customer_id );

		$q->andWhere ( 's.ps_school_year_id = ? ', $ps_school_year_id );

		$q->andWhere ( 's.is_activated = ? ', PreSchool::ACTIVE );

		$q->andwhere ( 's.enable_schedule = ?', PreSchool::NOT_ACTIVE );

		$q->andWhere ( 'DATE_FORMAT(dt.detail_at,"%Y%m%d") <= ?', date ( 'Ymd' ) );

		$q->andWhere ( '(DATE_FORMAT(dt.detail_end,"%Y%m%d") >= ?)', date ( 'Ymd' ) );

		$q->orderBy ( 's.iorder ASC' );

		return $q->execute ();
	}
	
	/**
	 * Lay dich vu cua truong va dich vu goi y cua lop
	 * @author Nguyen Chien Thang
	 * 
	 * @param $ps_school_year_id - int ID năm học
	 * @param $ps_customer_id - int ID trường học
	 * @param $ps_myclass_id - int ID lớp học
	 * 
	 * @return mixed
	***/
	public function getListServiceForStudentServiceRegistration($ps_school_year_id, $ps_customer_id, $ps_myclass_id = null) {
		
		$q = $this->createQuery ( 's' )->select ( "s.id as id,s.title as title,dt.amount as amount,wp.title AS wp_title,wp.id AS wp_id,psy.title AS school_year,gr.title as gr_title, cs.service_id AS cs_service_id " );
		
		$q->leftJoin ( 's.PsWorkPlaces wp' );
		
		$q->leftJoin ( 's.ServiceGroup gr' );
		$q->leftJoin ( 's.ServiceDetail dt' );
		$q->leftJoin ( 's.PsSchoolYear psy' );
		
		if ($ps_myclass_id > 0) {
			$q->leftJoin ( 's.ClassService cs WITH cs.myclass_id =?',  $ps_myclass_id);
		} else {
			$q->leftJoin ( 's.ClassService cs');
		}
		
		$q->addWhere ( 's.ps_customer_id = ?', $ps_customer_id );
		
		$q->andWhere ( 's.ps_school_year_id = ? ', $ps_school_year_id );
		
		$q->andWhere ( 's.is_activated = ? ', PreSchool::ACTIVE );
		
		$q->andwhere ( 's.enable_schedule = ?', PreSchool::NOT_ACTIVE );
		
		$q->andWhere ( 'DATE_FORMAT(dt.detail_at,"%Y%m%d") <= ?', date ( 'Ymd' ) );
		
		$q->andWhere ( '(DATE_FORMAT(dt.detail_end,"%Y%m%d") >= ?)', date ( 'Ymd' ) );
		
		$q->orderBy ( 's.iorder ASC' );
		
		return $q->execute ();
	}

	// Lay dich vu cua truong va nam hoc
	public function getListServiceOfSchool2($ps_school_year_id, $ps_customer_id, $ps_workplace_id = null, $enable_schedule = null) {

		$q = $this->createQuery ( 's' )
			->select ( "s.id as id,s.title as title,s.enable_roll AS enable_roll" );

		$q->addWhere ( 's.ps_customer_id = ?', $ps_customer_id );
		$q->andWhere ( 's.ps_school_year_id = ? ', $ps_school_year_id );
		if ($ps_workplace_id != '') {

			$q->andWhere ( 's.ps_workplace_id IS NULL OR s.ps_workplace_id =?', $ps_workplace_id );
		}
		if ($enable_schedule == '') {
			$q->andwhere ( 's.enable_schedule = ?', PreSchool::NOT_ACTIVE );
		}
		$q->andWhere ( 's.is_activated = ? ', PreSchool::ACTIVE );
		$q->addOrderBy ( 's.enable_roll DESC' );

		return $q->execute ();
	}

	/**
	 * Lấy tất cả dịch vụ của cơ sở
	 * getAllServiceByCustomer
	 */
	public function getAllServiceByCustomer($ps_school_year_id, $ps_customer_id, $ps_workplace_id = null, $year_month) {

		$date_at = date ( 'Ymd', strtotime ( '01-' . $year_month ) );

		$q = $this->createQuery ( 's' )
			->
		select ( "s.id AS id, s.title as title, sd.amount as amount" )
			->
		leftJoin ( "s.ServiceDetail sd WITH (DATE_FORMAT(sd.detail_at, '%Y%m%d') <= ? AND DATE_FORMAT(sd.detail_end, '%Y%m%d') >= ?)", array (
				$date_at,
				$date_at ) );

		if ($ps_school_year_id > 0)
			$q->andWhere ( 's.ps_school_year_id =?', $ps_school_year_id );

		if ($ps_customer_id > 0)
			$q->andWhere ( 's.ps_customer_id =?', $ps_customer_id );

		if ($ps_workplace_id > 0)
			$q->andWhere ( 's.ps_workplace_id IS NULL OR s.ps_workplace_id =?', $ps_workplace_id );

		$q->andWhere ( 's.is_activated = ? ', PreSchool::ACTIVE );

		$q->andwhere ( 's.enable_schedule = ?', PreSchool::NOT_ACTIVE );

		$q->groupBy ( "s.id" );

		return $q->execute ();
	}

	/**
	 * Lay cac dich vu cua mot lop hoc va loai bo cac dich vu ma hoc sinh nay da dang ky
	 * Dịch vụ là các loại: Ko phải dịch vụ của ngày thứ 7,
	 *
	 * @param int $student_id
	 * @param int $class_id
	 * @param string $text
	 */
	public function getListServicesForAddNew($student_id, $ps_customer_id, $class_id = '', $text = '', $year_id = '') {

		$q = $this->createQuery ( 's' )
			->select ( "s.id,s.title,ss.id AS ss_id,I.file_name AS file_name,sg.title AS group_name,s.enable_roll AS enable_roll,ss.discount as discount" );

		$q->addSelect ( 'cs.service_id AS cs_service_id, s.ps_workplace_id AS ps_workplace_id, wp.title AS wp_title, psy.title AS school_year' );

		$q->leftJoin ( 's.PsSchoolYear psy' );

		$q->leftJoin ( 's.PsWorkPlaces wp' );

		$q->leftJoin ( 's.ClassService cs' );

		$q->leftJoin ( 's.PsImages I' );

		$q->leftJoin ( 's.StudentService ss With ( (ss.delete_at IS NULL OR (ss.id IS NOT NULL AND ss.delete_at IS NOT NULL) ) AND ss.student_id = ?)', $student_id );

		// $q->leftJoin ( 's.StudentService ss With ss.student_id = ?', $student_id );

		$q->leftJoin ( 's.ServiceGroup sg' );

		$q->addWhere ( 'ss.id IS NULL OR (ss.id IS NOT NULL AND ss.delete_at IS NOT NULL )' );

		$q->addWhere ( 's.ps_customer_id = ?', $ps_customer_id );

		// Chi lay cac dich khong phai ngay thu 7
		$q->addWhere ( 's.enable_saturday != 1' );

		// $q->orWhere( 'ss.id IS NOT NULL AND ss.ddd NOT NULL' );

		if ($class_id > 0)

			$q->addWhere ( 'cs.myclass_id =? ', $class_id );

		if ($year_id > 0)

			$q->addWhere ( 's.ps_school_year_id = ? ', $year_id );

		$text = strtolower ( trim ( $text ) );

		if ($text != '') {
			$q->addWhere ( 'LOWER(s.title) LIKE ?', '%' . $text . '%' );
		}

		$q->addOrderBy ( 'sg.iorder ASC,s.iorder ASC' );

		return $q->execute ();
	}

	/**
	 * Lay cac dich vu ma hoc sinh da dang ky dung
	 *
	 * @param int $student_id
	 * @param $enable_roll -
	 *        	Loai dich vu
	 * @param $datetime int,
	 *        	so sanh dich vụ cn hoat dong tai thoi diem $datetime
	 * @return $list object for Service
	 */
	public function getServicesByStudentId($student_id, $enable_roll = null, $datetime = '') {

		$q = $this->createQuery ( 'c' )
			->select ( "c.id,c.title,c.enable_saturday,ss.id AS ss_id,I.file_name AS file_name,sg.title AS group_name,c.enable_roll AS enable_roll,ss.discount as discount" )
			->InnerJoin ( 'c.StudentService ss' )
			->leftJoin ( 'c.ServiceGroup sg' )
			->leftJoin ( 'c.PsImages I' );

		if ($datetime != '') {
			$date_at = date ( "Ymd", $datetime );
			$q->leftJoin ( 'c.PsSchoolYear sy With (DATE_FORMAT(sy.from_date,"%Y%m%d") <= ? AND (sy.to_date IS NULL OR  DATE_FORMAT(sy.to_date,"%Y%m%d") >= ?))', array (
					$date_at,
					$date_at ) );
		}

		$q->addWhere ( 'ss.student_id = ?', $student_id );

		if ($enable_roll != null) {

			if (is_array ( $enable_roll ))
				$q->whereIn ( 'c.enable_roll', $enable_roll );
			else
				$q->addwhere ( 'c.enable_roll = ?', $enable_roll );
		}

		$q->addWhere ( 'delete_at IS NULL' )
			->addOrderBy ( 'sg.iorder ASC,c.iorder ASC' );

		return $q->execute ();
	}

	/**
	 * Lay tat ca cac dich vu ma hoc sinh da dang ky dung
	 * theo nam hoc
	 * bao gom dich vu da duoc xoa
	 *
	 * @param int $student_id
	 * @return $list object for Service
	 */
	public function getAllServicesOfStudentByYear($student_id, $ps_school_year_id) {

		$q = $this->createQuery ( 'c' );

		$q->select ( "c.id,c.title,c.enable_roll AS enable_roll, c.enable_schedule AS enable_schedule,ss.delete_at AS delete_time, ss.id AS ss_id,I.file_name AS file_name,sg.title AS group_name,ss.discount as discount, ss.discount_amount AS discount_amount" );

		$q->addSelect ( "sy.title AS school_year, wp.id AS wp_id, wp.title AS wp_title" );

		$q->addSelect ( 'ss.updated_at AS updated_at, CONCAT(u.first_name, " ", u.last_name) AS updated_by' );

		$q->leftJoin ( 'c.PsSchoolYear sy' )
			->leftJoin ( 'c.PsWorkPlaces wp' )
			->InnerJoin ( 'c.StudentService ss' )
			->leftJoin ( 'c.ServiceGroup sg' )
			->leftJoin ( 'c.PsImages I' );

		$q->leftJoin ( 'ss.UserUpdated u' );

		$q->andWhere ( 'c.ps_school_year_id = ?', $ps_school_year_id );

		$q->addWhere ( 'ss.student_id = ?', $student_id );

		// $q->addWhere ( 'ss.delete_at IS NULL');

		$q->addOrderBy ( 'sy.is_default DESC, sy.id, wp.id, sg.iorder ASC,c.iorder ASC' );

		return $q->execute ();
	}

	/**
	 * Lay tat ca cac dich vu ma hoc sinh da dang ky dung bao gom dich vu da duoc xoa
	 *
	 * @param int $student_id
	 * @return $list object for Service
	 */
	public function getAllServicesOfStudent($student_id) {

		$q = $this->createQuery ( 'c' );

		$q->select ( "c.id,c.title,c.enable_roll AS enable_roll, c.enable_schedule AS enable_schedule,ss.delete_at AS delete_time, ss.id AS ss_id,I.file_name AS file_name,sg.title AS group_name,ss.discount as discount, ss.discount_amount AS discount_amount" );

		$q->addSelect ( "sy.title AS school_year, wp.id AS wp_id, wp.title AS wp_title" );

		$q->addSelect ( 'ss.updated_at AS updated_at, CONCAT(u.first_name, " ", u.last_name) AS updated_by' );

		$q->leftJoin ( 'c.PsSchoolYear sy' )
			->leftJoin ( 'c.PsWorkPlaces wp' )
			->InnerJoin ( 'c.StudentService ss' )
			->leftJoin ( 'ss.UserUpdated u' )
			->leftJoin ( 'c.ServiceGroup sg' )
			->leftJoin ( 'c.PsImages I' );

		$q->addWhere ( 'ss.student_id = ?', $student_id );

		$q->addOrderBy ( 'sy.is_default DESC, sy.id, wp.id, sg.iorder ASC,c.iorder ASC' );

		return $q->execute ();
	}

	/**
	 * Lay ra damh sach dich vu ngay thu 7
	 *
	 * @return string $query - SQL
	 */
	public function setServiceSaturday() {

		$q = $this->createQuery ( 'sv' )
			->select ( "sv.id AS id, sv.title AS title" )
			->addWhere ( 'sv.enable_saturday = 1' )
			->orderBy ( 'sv.id' );
		return $q;
	}

	/**
	 * FUNCTION: loadServices($ps_customer_id = null)
	 *
	 * @param
	 *        	int - $ps_customer_id, key of Table PsCustomer
	 * @return string $query - SQL
	 */
	public function loadServices($ps_customer_id = null, $show_info = false) {

		$query = $this->createQuery ( 'a' );

		if ($show_info)
			$query->addSelect ( 'a.id,a.title, a.title AS name, a.enable_roll,a.is_default, a.ps_image_id, I.file_name AS file_name' );
		else
			$query->addSelect ( 'a.id, a.title, a.title AS name, a.ps_image_id, I.file_name AS file_name' );

		$query->leftJoin ( 'a.PsImages I' );

		if ($ps_customer_id > 0) {
			$query->andWhere ( 'a.ps_customer_id = ?', $ps_customer_id );
		}

		$query->orderBy ( 'a.iorder' );

		return $query;
	}
	
	/**
	 * Lấy SQL dich vụ
	 *
	 * @param $params array ('ps_customer_id', 'school_year_id', 'ps_workplace_id', 'is_activated')
	 * @return string $query - SQL
	 */
	public function setSQLServiceByParamsForChois($params = array()) {
	
		$query = $this->createQuery ( 'a' );
	
		$query->addSelect ( 'a.id AS id,a.title, a.ps_workplace_id AS ps_workplace_id' );
	
		if (isset ( $params ['school_year_id'] ) && $params ['school_year_id'] > 0) {
			$query->andWhere ( 'a.ps_school_year_id = ?', $params ['school_year_id'] );
		}

		if (isset ( $params ['ps_customer_id'] ) && $params ['ps_customer_id'] > 0) {
			$query->andWhere ( 'a.ps_customer_id = ?', $params ['ps_customer_id'] );
		}

		if (isset ( $params ['ps_workplace_id'] ) && $params ['ps_workplace_id'] > 0) {
			$query->andWhere ( '(a.ps_workplace_id IS NULL OR a.ps_workplace_id = ?)', $params ['ps_workplace_id'] );
		}

		if (isset ( $params ['is_activated'] ) && $params ['is_activated'] != null && $params ['is_activated'] >= 0) {
			$query->andWhere ( 'a.is_activated = ?', $params ['is_activated'] );
		}

		$query->orderBy ( 'a.iorder' );

		return $query;
				
	}

	/**
	 * Lấy ra nhóm dịch vụ theo cơ sở
	 * ThanhPV
	 **/
	public function getChoisGroupServiceByParams($ps_customer_id, $ps_schoolyear_id = null, $ps_workplace_id = null) {
		
		$chois = array ();
		
		$ps_work_places = Doctrine::getTable('PsWorkPlaces')->sqlGetLisstByCustomerId($ps_customer_id, $ps_workplace_id, PreSchool::ACTIVE)->execute ();
		
		$params = array (
				'ps_customer_id' => $ps_customer_id,
				'school_year_id' => $ps_schoolyear_id,
				'ps_workplace_id' => $ps_workplace_id,
				'is_activated' => PreSchool::ACTIVE );
		
		$list_service = $this->setSQLServiceByParamsForChois($params) ->execute ();
		
		foreach ( $ps_work_places as $ps_work_place ) {
			foreach ( $list_service as $key => $service ) {
				if ($ps_work_place->getId () == $service->getPsWorkplaceId ()) {
					$chois [$ps_work_place->getTitle ()] [$service->getId ()] = $service->getTitle ();
					unset($list_service[$key]);
				}
			}
		}
		
		foreach ( $list_service as $key => $service2 ) {
			$chois ['Toàn trường'][$service2->getId ()] = $service2->getTitle ();
			unset($list_service[$key]);
		}
		
		return $chois;
	}
	
	/**
	 * FUNCTION: setSQLServiceByParams($params)
	 *
	 * @param $params array
	 *        	('ps_customer_id', 'ps_obj_group_id', 'school_year_id', 'ps_workplace_id', 'is_activated')
	 * @return string $query - SQL
	 */
	public function setSQLServiceByParams($params = array()) {

		$query = $this->createQuery ( 'a' );

		$query->addSelect ( 'a.id AS id,a.title, a.title AS name, a.enable_roll,a.is_default, a.ps_image_id, a.note,a.is_activated, I.id AS i_id, I.file_name AS file_name, cs.myclass_id AS cs_myclass_id ,cs.service_id AS cs_service_id' );

		if (isset ( $params ['myclass_id'] ) && $params ['myclass_id'] > 0)
			$query->leftJoin ( 'a.ClassService cs With cs.myclass_id = ?', $params ['myclass_id'] );
		else
			$query->leftJoin ( 'a.ClassService cs' );

		$query->leftJoin ( 'a.PsImages I' );

		if (isset ( $params ['school_year_id'] ) && $params ['school_year_id'] > 0) {
			$query->andWhere ( 'a.ps_school_year_id = ?', $params ['school_year_id'] );
		}

		if (isset ( $params ['ps_customer_id'] ) && $params ['ps_customer_id'] > 0) {
			$query->andWhere ( 'a.ps_customer_id = ?', $params ['ps_customer_id'] );
		}

		if (isset ( $params ['ps_workplace_id'] ) && $params ['ps_workplace_id'] > 0) {
			$query->andWhere ( '(a.ps_workplace_id IS NULL OR a.ps_workplace_id = ?)', $params ['ps_workplace_id'] );
		}

		if (isset ( $params ['is_activated'] ) && $params ['is_activated'] != null && $params ['is_activated'] >= 0) {
			$query->andWhere ( 'a.is_activated = ?', $params ['is_activated'] );
		}

		$query->orderBy ( 'cs.service_id DESC, a.enable_roll, a.iorder' );

		return $query;
	}

	/**
	 * lấy tên dịch vụ
	 *
	 * @param int $service_id
	 * @return obj
	 */
	public function getServiceName($service_id) {

		$query = $this->createQuery ( 'a' );

		$query->select ( 'a.title AS title' );

		$query->addWhere ( 'a.id = ?', $service_id );

		return $query->fetchOne ();
	}

	/**
	 * FUNCTION: getServicesAndClassService($myclass_id, $ps_customer_id = null)
	 *
	 * @param
	 *        	int - $myclass_id, id class
	 * @param
	 *        	int - $ps_customer_id, key of Table PsCustomer
	 * @return string $query - SQL
	 */
	public function getServicesAndClassService($myclass_id, $ps_customer_id = null, $is_activated = null) {

		$query = $this->createQuery ( 'a' );

		$query->addSelect ( 'a.id,a.title, a.title AS name, a.enable_roll,a.is_default, a.ps_image_id, a.note,a.is_activated, I.file_name AS file_name, cs.id, cs.service_id AS cs_service_id' );

		$query->leftJoin ( 'a.ClassService cs With cs.myclass_id = ?', $myclass_id );

		$query->leftJoin ( 'a.PsImages I' );

		if ($ps_customer_id > 0) {
			$query->andWhere ( 'a.ps_customer_id = ?', $ps_customer_id );
		}

		if ($is_activated !== null) {
			$query->andWhere ( 'a.is_activated = ?', $is_activated );
		}

		$query->orderBy ( 'cs.service_id DESC, a.enable_roll, a.iorder' );

		return $query;
	}

	/**
	 * Lay cac dich vu ma hoc sinh dang ky dung va dich vu cua lop ma hoc sinh dang hoat dong tai thoi diem diem danh Su dung cho viec diem danh
	 *
	 * @param int $student_id
	 * @param int $date,
	 *        	ngay
	 */
	public function getServicesDiaryByStudent($student_id, $class_id, $date = '', $ps_customer_id, $enable_roll = '') {

		// $saturday = PsDateTime::getMondayOfDate($date);
		$date = ($date == '') ? PsDateTime::psDatetoTime ( date ( 'Y-m-d' ) ) : PsDateTime::psDatetoTime ( $date );

		$q = $this->createQuery ( 'c' );

		$q->select ( "c.id,c.title,c.enable_roll,c.enable_saturday, ss.id AS ss_id, ssd.id AS ssd_id,ssd.service_id AS ssd_service_id, ss.ps_service_course_id AS ps_service_course_id" );

		$q->leftJoin ( 'c.StudentService ss With ss.student_id = ? AND ss.delete_at Is Null', $student_id );

		$q->leftJoin ( 'c.PsServiceCourses psc With psc.id = ss.ps_service_course_id' );

		$q->leftJoin ( 'psc.PsServiceCourseSchedules pscs With DATE_FORMAT(pscs.date_at,"%Y%m%d") = ?', date ( 'Ymd', $date ) );

		$q->leftJoin ( 'c.ClassService cs With cs.myclass_id = ?', $class_id );

		$q->leftJoin ( 'c.StudentServiceDiary ssd With (DATE_FORMAT(ssd.tracked_at,"%Y%m%d") = ? And ssd.student_id=?)', array (
				date ( 'Ymd', $date ),
				$student_id ) );

		$q->leftJoin ( 'c.ServiceGroup sg' );

		$q->addWhere ( 'ss.id Is Not Null OR ssd.id Is Not Null OR cs.myclass_id Is Not Null' );

		$q->addwhere ( 'c.is_activated = ?', PreSchool::ACTIVE );

		$q->addWhere ( 'c.ps_customer_id = ?', $ps_customer_id );

		// if($saturday != 'Saturday'){ // neu khong phai thu 7
		// $q->andWhere('c.enable_saturday = 0');
		// }

		if($enable_roll !==''){
			//echo "SSS";die;
			$q->addWhere ( 'c.enable_roll = ?', $enable_roll );
		}

		// $q->addOrderBy ( 'sg.iorder ASC,c.iorder ASC' );

		$q->addOrderBy ( 'c.iorder ASC, sg.iorder ASC' );

		return $q->execute ();
	}

	/**
	 * SQL Lay cac dich vu ma hoc sinh dang ky dung va dich vu cua lop ma hoc sinh dang hoat dong tai thoi diem diem danh
	 *
	 * @param int $student_id
	 * @param timestamp $date:
	 *        	Ngay nhap du lieu
	 */
	public function setSqlServicesDiaryByStudent($student_id, $class_id, $date = '', $ps_customer_id) {

		$q = $this->createQuery ( 'c' )
			->select ( "c.id AS id ,c.title AS title,c.enable_roll, ss.id AS ss_id, ssd.id AS ssd_id,ssd.service_id AS ssd_service_id" )
			->leftJoin ( 'c.StudentService ss With ss.student_id = ?', $student_id )
			->leftJoin ( 'c.ClassService cs With cs.myclass_id = ?', $class_id )
			->leftJoin ( 'c.StudentServiceDiary ssd With (DATE_FORMAT(ssd.tracked_at,"%Y%m%d") = ? And ssd.student_id=?)', array (
				date ( 'Ymd', strtotime ( $date ) ),
				$student_id ) )
			->leftJoin ( 'c.ServiceGroup sg' )
			->addWhere ( 'ss.id Is Not Null OR cs.myclass_id Is Not Null' )
			->
		// ->addwhere ( 'c.enable_roll = ?', PreSchool::SERVICE_TYPE_FIXED )
		addOrderBy ( 'sg.iorder ASC,c.iorder ASC' );

		$q->addWhere ( 'c.ps_customer_id = ?', $ps_customer_id );

		return $q;
	}

	/**
	 * Lay cac dich vu ma giao vien dang ky day
	 *
	 * @param int $student_id
	 * @param timestamp $date:
	 *        	Ngay nhap du lieu
	 */
	public function getServicesByPsMember($ps_customer_id, $ps_member_id, $date = '') {

		$date = ($date == null) ? date ( 'Ymd' ) : date ( 'Ymd', strtotime ( $date ) );

		$query = $this->createQuery ( 's' )
			->select ( 's.id' )
			->innerJoin ( 's.PsServiceCourses sc' )
			->andWhere ( 'DATE_FORMAT(sc.start_at,"%Y%m%d") <= ?', $date )
			->andWhere ( 'DATE_FORMAT(sc.end_at,"%Y%m%d") >= ?', $date )
			->andWhere ( 's.ps_customer_id = ?', $ps_customer_id )
			->addWhere ( 'sc.is_activated = ?', PreSchool::ACTIVE )
			->addWhere ( 's.is_activated = ?', PreSchool::ACTIVE )
			->addWhere ( 'sc.ps_member_id = ?', $ps_member_id )
			->addWhere ( 's.enable_roll = ?', PreSchool::SERVICE_TYPE_SCHEDULE );

		return $query->execute ();
	}

	/**
	 * Lay cac dich vu thoi khoa bieu theo ps_customer_id Pham van thien
	 *
	 * @param
	 *        	ps_customer_id
	 * @param timestamp $date:
	 *        	Ngay nhap du lieu
	 */
	public function setServicesTypeScheduleByPsCustomer($getField = 'id, title', $psCustomerId = null, $is_activated = null, $ps_workplace_id = null, $school_year_id = null, $enable_schedule = null) {

		$q = $this->createQuery ()
			->select ( $getField != '' ? $getField : '*' );
		if ($enable_schedule == '') {
			$q->where ( 'enable_schedule = ?', PreSchool::ACTIVE );
		}
		if ($psCustomerId > 0)
			$q->addWhere ( 'ps_customer_id = ?', $psCustomerId );

		if ($is_activated > 0)
			$q->addWhere ( 'is_activated = ?', $is_activated );

		if ($ps_workplace_id > 0)
			$q->addWhere ( 'ps_workplace_id IS NULL OR ps_workplace_id = ?', $ps_workplace_id );

		if ($school_year_id > 0)
			$q->addWhere ( 'ps_school_year_id IS NULL OR ps_school_year_id = ?', $school_year_id );

		$q->addOrderBy ( 'iorder' );

		return $q;
	}

	/**
	 * Lay so luong dich vu cua truong hoc
	 *
	 * @author thangnc
	 * @param
	 *        	ps_customer_id
	 * @return int
	 */
	public function getNumberServiceByCustomerId($ps_customer_id) {

		$query = $this->createQuery ( 'a' )
			->select ( 'a.id' )
			->addWhere ( 'a.ps_customer_id = ?', $ps_customer_id )
			->count ();

		return $query;
	}

	/**
	 * getCountServiceInServiceSplit($ps_school_year_id, $ps_customer_id, $ps_workplace_id = null) Ham tinh ra tong so co mat cua mot dich vu trong service_split
	 *
	 * @author Nguyen Chien Thang(ntsc279@hotmail.com)
	 * @param - $ps_school_year_id,
	 *        	int
	 * @param - $ps_customer_id,
	 *        	int
	 * @param - $ps_workplace_id,
	 *        	int
	 */
	public function getCountServiceInServiceSplit($ps_school_year_id, $ps_customer_id, $ps_workplace_id = null) {

		$q = $this->createQuery ( 's' )
			->select ( "s.id AS s_service_id, COUNT(ss.service_id) cnt" )
			->leftJoin ( "s.ServiceSplit ss" );

		if ($ps_school_year_id > 0)
			$q->andWhere ( 's.ps_school_year_id =?', $ps_school_year_id );

		if ($ps_customer_id > 0)
			$q->andWhere ( 's.ps_customer_id =?', $ps_customer_id );

		if ($ps_workplace_id > 0)
			$q->andWhere ( 's.ps_workplace_id IS NULL OR s.ps_workplace_id =?', $ps_workplace_id );

		$q->groupBy ( "s.id" );

		return $q->execute ();
	}

	// Lay max order cua dich vu
	public function getMaxOrder($ps_school_year_id, $ps_customer_id, $ps_workplace_id = null) {

		$q = $this->createQuery ( 's' )
			->select ( "MAX(s.iorder) AS m_iorder,MAX(sg.iorder) AS m_order_group " )
			->leftJoin ( 's.ServiceGroup sg' );

		if ($ps_school_year_id > 0)
			$q->andWhere ( 's.ps_school_year_id =?', $ps_school_year_id );

		if ($ps_customer_id > 0)
			$q->andWhere ( 's.ps_customer_id =?', $ps_customer_id );

		if ($ps_workplace_id > 0)
			$q->andWhere ( 's.ps_workplace_id =?', $ps_workplace_id );

		$q->limit ( 1 );

		return $q->fetchOne ();
	}

	/**
	 * Lấy tất cả các khoản phí dịch vụ chưa hoàn thành + khoan phai thu khac + ve muon cua thang <= datetime,
	 * không sử dụng $obj_order_max để sắp sếp
	 *
	 * @author Nguyen Chien Thang - ntsc279@gmail.com
	 * @version 2.0
	 * @param
	 *        	int - $student_id
	 * @param
	 *        	intdate - $date, ngay duoc lua chon
	 * @return $list
	 */
	public function findAllFeeServiceLastMonthOfStudent($student_id, $date) {

		$pdo = Doctrine_Manager::getInstance ()->getCurrentConnection ()
			->getDbh ();

		$query = "SELECT
					s.id AS service_id, s.enable_roll AS enable_roll, s.iorder AS iorder,s.service_type as service_type,ss.number_month AS ss_number_month,ss.discount AS ss_discount,ss.discount_amount AS ss_discount_amount,0 AS r_id, 0 AS r_amount
					,(Case When rs.is_late = 1 Then 'Out late' Else s.title End) AS title, s.is_type_fee
				  	,rs.id AS rs_id,rs.service_id AS rs_service_id,rs.by_number AS rs_by_number
				  	,rs.spent_number AS rs_spent_number,rs.unit_price AS rs_unit_price, rs.amount AS rs_amount
				  	,rs.receivable_at AS rs_receivable_at,rs.note AS rs_note,rs.is_late AS is_late,rs.spent_number As sd_spent_number
					,rs.discount AS rs_discount,rs.discount_amount AS rs_discount_amount, sg.tk_no AS tk_no, sg.tk_co AS tk_co, sg.tk_mua AS tk_mua
				
				  	FROM receivable_student rs
						LEFT JOIN service s ON rs.service_id = s.id
						LEFT JOIN service_group sg ON s.service_group_id = sg.id
						LEFT JOIN student_service ss ON (ss.delete_at Is Null AND s.id = ss.service_id AND ss.student_id = '" . $student_id . "')
				  		
				  		WHERE rs.id Is not null AND (rs.student_id = '" . $student_id . "' AND DATE_FORMAT(rs.receivable_at,'%Y%m') <= '" . date ( 'Ym', $date ) . "')
				  		GROUP BY rs.id

				  UNION

				  SELECT
					r.tk_no AS tk_no,r.tk_co AS tk_co, r.tk_mua AS tk_mua,0 AS service_type, 0 AS service_id, 2 AS enable_roll,r.iorder AS iorder,0 AS ss_number_month,0 AS ss_discount, 0 AS ss_discount_amount, r.id AS r_id, 0 AS r_amount,r.title AS title, null as is_type_fee
				  	,rs.id AS rs_id,rs.service_id AS rs_service_id,rs.by_number AS rs_by_number
				  	,rs.spent_number AS rs_spent_number,rs.unit_price AS rs_unit_price, rs.amount AS rs_amount
				  	,rs.receivable_at AS rs_receivable_at,rs.note AS rs_note,rs.is_late AS is_late,rs.spent_number As sd_spent_number
				  	,rs.discount AS rs_discount,rs.discount_amount AS rs_discount_amount
					FROM receivable r
						LEFT JOIN receivable_student rs ON rs.receivable_id = r.id				  		
				  		
				  	WHERE rs.id Is not null AND (rs.student_id = '" . $student_id . "' AND DATE_FORMAT(rs.receivable_at,'%Y%m') <= '" . date ( 'Ym', $date ) . "')
				  	GROUP BY rs.id

			 		ORDER BY rs_receivable_at, iorder";

		$stmt = $pdo->prepare ( $query );

		$stmt->execute ( array () );
		//print_r($stmt->fetchAll ());die;
		return $stmt->fetchAll ();

	}

	/**
	 * FUNCTION: findAllFeeServiceOfStudent($student_id, $date, $obj_order_max)
	 * Load: tất cả các khoản phí đã hoàn thành + chưa hoàn thành + các khoản phát sinh có trong bảng điểm danh + bảng receivable_student (có khoản phải thu khac va ko co khoản về muộn) của tháng = $date;
	 *
	 * @author Nguyen Chien Thang - ntsc279@gmail.com
	 * @version 2.0
	 * @param
	 *        	int - $student_id
	 * @param
	 *        	intdate - $date - $end_date, ngay duoc chon
	 * @return $listobj
	 *
	 */
	public function findAllFeeServiceOfStudent($student_id, $date) {

		$pdo = Doctrine_Manager::getInstance ()->getCurrentConnection ()
			->getDbh ();

		$query = "SELECT  
					DISTINCT s.id AS service_id, s.title AS title, s.enable_roll AS enable_roll, s.service_type as service_type,s.service_reduce as service_reduce, s.price as price, sg.tk_no AS tk_no, sg.tk_co AS tk_co, sg.tk_mua AS tk_mua,
					rs.student_id AS student_id, rs.id AS rs_id,rs.receivable_id AS rs_receivable_id,rs.service_id AS rs_service_id,rs.by_number AS rs_by_number,
				  	rs.spent_number AS rs_spent_number,rs.unit_price AS rs_unit_price,	
				  	rs.amount AS rs_amount,rs.receivable_at AS rs_receivable_at,rs.note AS rs_note,	
				  	rs.is_late AS is_late,ss.number_month AS ss_number_month,ss.discount AS ss_discount, ss.discount_amount AS ss_discount_amount,
					rs.discount AS rs_discount, rs.discount_amount AS rs_discount_amount,					
				  	
				  	diary.student_id AS sd_student_id,diary.cnt As sd_spent_number,0 AS r_id,
					cs.id AS cs_id,cs.amount AS cs_amount,cs.note AS cs_note,
					cr.id AS cr_id,cr.amount AS cr_amount, cr.spent_number AS cr_spent_number,
					(Case When service_split.id Is Null Then 100 Else  service_split.split_value End)/100 AS splitvalue
					
					FROM service s
						LEFT JOIN student_service ss ON (ss.delete_at Is null AND s.id = ss.service_id AND ss.student_id = '" . $student_id . "')
						LEFT JOIN service_group sg ON s.service_group_id = sg.id
						LEFT JOIN (
							SELECT student_service_diary.id,student_service_diary.student_id, student_service_diary.service_id, COUNT(student_service_diary.id) AS cnt
							FROM student_service_diary
							WHERE (student_service_diary.student_id = '" . $student_id . "' AND DATE_FORMAT(student_service_diary.tracked_at,'%Y%m') = '" . date ( 'Ym', $date ) . "')
							GROUP BY student_service_diary.student_id, student_service_diary.service_id		
						) diary ON diary.service_id = s.id
						
						LEFT JOIN service_split ON 	service_split.service_id = s.id
													AND diary.cnt >= service_split.count_value
													AND diary.cnt <= service_split.count_ceil							
						
						LEFT JOIN receivable_student rs ON rs.service_id = s.id AND (rs.is_late = 0 And rs.student_id = '" . $student_id . "' AND DATE_FORMAT(rs.receivable_at,'%Y%m') = '" . date ( 'Ym', $date ) . "') 
				  		LEFT JOIN collected_student cs ON rs.id = cs.receivable_student_id
				  		LEFT JOIN collected_receipt cr ON cr.collected_student_id = cs.id 	
				  		
				  		WHERE (rs.id IS NOT NULL AND ss.id Is Not Null AND ss.student_id = '" . $student_id . "') OR diary.id Is not null OR rs.id IS NOT NULL
				  		GROUP BY s.id, s.title,diary.id
				  UNION			  			
				  SELECT  
					r.tk_no AS tk_no,r.tk_co AS tk_co, r.tk_mua AS tk_mua, 0 AS service_id, 0 AS service_type, 0 AS service_reduce, 0 as price ,r.title AS title, 2 AS enable_roll,rs.student_id AS student_id,
				  	rs.id AS rs_id,rs.receivable_id AS rs_receivable_id,rs.service_id AS rs_service_id,rs.by_number AS rs_by_number,
				  	rs.spent_number AS rs_spent_number,rs.unit_price AS rs_unit_price, rs.amount AS rs_amount,	
				  	rs.receivable_at AS rs_receivable_at,rs.note AS rs_note,	
				  	rs.is_late AS is_late,0 AS ss_number_month,0 AS ss_discount, 0 AS ss_discount_amount,
					rs.discount AS rs_discount, rs.discount_amount AS rs_discount_amount,
					$student_id AS sd_student_id,rs.spent_number As sd_spent_number,r.id AS r_id,
					cs.id AS cs_id,cs.amount AS cs_amount,cs.note AS cs_note,
					cr.id AS cr_id,cr.amount AS cr_amount, cr.spent_number AS cr_spent_number
					,1 AS splitvalue
					FROM receivable r 
						LEFT JOIN receivable_student rs ON rs.receivable_id = r.id  
				  		LEFT JOIN collected_student cs ON rs.id = cs.receivable_student_id  
				  		LEFT JOIN collected_receipt cr ON cr.collected_student_id = cs.id 	
				  		LEFT JOIN receipt rec ON rec.id = cr.receipt_id
				  		
				  		WHERE rs.id Is not null AND (rs.student_id = '" . $student_id . "' AND DATE_FORMAT(rs.receivable_at,'%Y%m') = '" . date ( 'Ym', $date ) . "')
				  	ORDER BY service_id, title	ASC";

		//echo $query;die;

		$stmt = $pdo->prepare ( $query );
		$stmt->execute ( array () );

		return $stmt->fetchAll ();
	}

	public function findAllFeeServiceOfStudent2($student_id, $date) {

		$pdo = Doctrine_Manager::getInstance ()->getCurrentConnection ()
			->getDbh ();

		$query = "SELECT  
					DISTINCT s.id AS service_id, s.title AS title, s.enable_roll AS enable_roll,rs.student_id AS student_id,
				  	rs.id AS rs_id,rs.receivable_id AS rs_receivable_id,rs.service_id AS rs_service_id,rs.by_number AS rs_by_number,
				  	rs.spent_number AS rs_spent_number,rs.unit_price AS rs_unit_price,	
				  	rs.amount AS rs_amount,rs.receivable_at AS rs_receivable_at,rs.note AS rs_note,	
				  	rs.is_late AS is_late,ss.discount AS ss_discount, ss.discount_amount AS ss_discount_amount,
				  	
				  	diary.student_id AS sd_student_id,diary.cnt As sd_spent_number,0 AS r_id,
					cs.id AS cs_id,cs.amount AS cs_amount,cs.note AS cs_note,
					cr.id AS cr_id,cr.amount AS cr_amount, cr.spent_number AS cr_spent_number,
					(Case When service_split.id Is Null Then 100 Else  service_split.split_value End)/100 AS splitvalue
					
					FROM service s
						LEFT JOIN student_service ss ON (ss.delete_at Is null AND s.id = ss.service_id AND ss.student_id = '" . $student_id . "')
						LEFT JOIN service_group sg ON s.service_group_id = sg.id
						LEFT JOIN (
							SELECT student_service_diary.id,student_service_diary.student_id, student_service_diary.service_id, COUNT(student_service_diary.id) AS cnt
							FROM student_service_diary
							WHERE (student_service_diary.student_id = '" . $student_id . "' AND DATE_FORMAT(student_service_diary.tracked_at,'%Y%m') = '" . date ( 'Ym', $date ) . "')
							GROUP BY student_service_diary.student_id, student_service_diary.service_id		
						) diary ON diary.service_id = s.id
						
						LEFT JOIN service_split ON 	service_split.service_id = s.id
													AND diary.cnt >= service_split.count_value
													AND diary.cnt <= service_split.count_ceil							
						
						LEFT JOIN receivable_student rs ON rs.service_id = s.id AND (rs.is_late = 0 And rs.student_id = '" . $student_id . "' AND DATE_FORMAT(rs.receivable_at,'%Y%m') = '" . date ( 'Ym', $date ) . "') 
				  		LEFT JOIN collected_student cs ON rs.id = cs.receivable_student_id
				  		LEFT JOIN collected_receipt cr ON cr.collected_student_id = cs.id 	
				  		
				  		WHERE (ss.id Is Not Null AND ss.student_id = '" . $student_id . "') OR diary.id Is not null   				  		
				  		GROUP BY s.id, s.title,diary.id
				  UNION			  			
				  SELECT  
					0 AS service_id, r.title AS title, 2 AS enable_roll,rs.student_id AS student_id,
				  	rs.id AS rs_id,rs.receivable_id AS rs_receivable_id,rs.service_id AS rs_service_id,rs.by_number AS rs_by_number,
				  	rs.spent_number AS rs_spent_number,rs.unit_price AS rs_unit_price, rs.amount AS rs_amount,	
				  	rs.receivable_at AS rs_receivable_at,rs.note AS rs_note,	
				  	rs.is_late AS is_late,0 AS ss_discount, 0 AS ss_discount_amount, $student_id AS sd_student_id,rs.spent_number As sd_spent_number,r.id AS r_id,
					cs.id AS cs_id,cs.amount AS cs_amount,cs.note AS cs_note,
					cr.id AS cr_id,cr.amount AS cr_amount, cr.spent_number AS cr_spent_number
					,1 AS splitvalue
					FROM receivable r 
						LEFT JOIN receivable_student rs ON rs.receivable_id = r.id  
				  		LEFT JOIN collected_student cs ON rs.id = cs.receivable_student_id  
				  		LEFT JOIN collected_receipt cr ON cr.collected_student_id = cs.id 	
				  		LEFT JOIN receipt rec ON rec.id = cr.receipt_id
				  		
				  		WHERE rs.id Is not null AND (rs.student_id = '" . $student_id . "' AND DATE_FORMAT(rs.receivable_at,'%Y%m') = '" . date ( 'Ym', $date ) . "')
				  	ORDER BY service_id, title	ASC";

		// echo $query;die;

		$stmt = $pdo->prepare ( $query );
		$stmt->execute ( array () );

		return $stmt->fetchAll ();
	}

	/**
	 * FUNCTION: findServiceSplitBySpentNumber($service_id, $spent_number)
	 * Ham tinh ra gia tri ty le luy tien cua mot dich vu dua vao so luong so sanh
	 *
	 * @author Nguyen Chien Thang
	 * @version 2.0
	 *         
	 * @param $service_id -
	 *        	id dich vu
	 * @param $spent_number -
	 *        	so luong
	 * @return $obj
	 *
	 */
	public function findServiceSplitBySpentNumber($service_id, $spent_number) {

		if (! $spent_number)
			$spent_number = 0;

		$q = $this->createQuery ( 'c' );

		$q->select ( "c.id, c.title,(Case When sp.id Is Null Then 100 Else  sp.split_value End)/100 AS splitvalue" );

		$q->InnerJoin ( "c.ServiceSplit sp" );
		$q->where ( "c.id = ? AND ? >= sp.count_value AND ? <= sp.count_ceil", array (
				$service_id,
				$spent_number,
				$spent_number ) );

		return $q->fetchOne ();
	}

	/**
	 * FUNCTION: findAllServiceStudent($student_id, $date, $obj_order_max)
	 *
	 * Tim tat ca nhung dich vu can phai thu tien tinh theo dau thang
	 * Bao gom: Chi dich vu dang ky su dung + khoan phai thu bat thuong(Ko tinh ve muon va ko tinh toi diem danh)
	 *
	 * @author Nguyen Chien Thang - thangnc@ithanoi.com
	 *        
	 * @param
	 *        	int - $student_id
	 * @param
	 *        	int datime - $date
	 * @return $listobj
	 *
	 */
	public function findAllServiceStudent($student_id, $date, $obj_order_max) {

		$pdo = Doctrine_Manager::getInstance ()->getCurrentConnection ()
			->getDbh ();

		$query = "SELECT  
					s.id AS service_id, s.enable_roll, s.title,s.service_type as service_type,s.service_month as service_month,ss.number_month AS ss_number_month,ss.discount AS ss_discount,ss.discount_amount AS ss_discount_amount,s.iorder AS iorder,sg.iorder AS order_group, sg.tk_no AS tk_no, sg.tk_co AS tk_co, sg.tk_mua AS tk_mua, 
				  	rs.id AS rs_id,0 AS rs_receivable_id,rs.service_id AS rs_service_id,
				  	rs.by_number AS rs_by_number,rs.spent_number AS rs_spent_number,rs.unit_price AS rs_unit_price,	
				  	rs.amount AS rs_amount,rs.receivable_at AS rs_receivable_at,rs.note AS rs_note, 0 AS r_id	
				  	
				  	FROM service s
									INNER JOIN student_service ss ON (ss.delete_at Is Null AND s.id = ss.service_id AND ss.student_id = '" . ( int ) $student_id . "' )
									LEFT JOIN service_group sg ON s.service_group_id = sg.id
									LEFT JOIN receivable_student rs ON rs.service_id = s.id
											AND (rs.id Is null OR (rs.student_id = '" . ( int ) $student_id . "' AND DATE_FORMAT(rs.receivable_at,'%Y%m') = '" . date ( 'Ym', $date ) . "'))
				  	
				    GROUP BY s.id,s.title
				  	
				  	UNION				  					  					  	
					
					SELECT  
						0 AS tk_no, 0 AS tk_co, 0 AS tk_mua, 0 AS service_id,0 AS service_type,0 AS service_month,'r_id' AS enable_roll, r.title,0 AS ss_number_month,0 AS ss_discount,0 AS ss_discount_amount," . ($obj_order_max->get ( 'm_iorder' ) + 1) . " AS iorder," . ($obj_order_max->get ( 'm_order_group' ) + 1) . " AS order_group,
				  		rs.id AS rs_id,rs.receivable_id AS rs_receivable_id,rs.service_id AS rs_service_id,
				  		rs.by_number AS rs_by_number,rs.spent_number AS rs_spent_number,rs.unit_price AS rs_unit_price,	
				  		rs.amount AS rs_amount,rs.receivable_at AS rs_receivable_at,rs.note AS rs_note, r.id AS r_id
				  		
					FROM receivable r
									INNER JOIN receivable_student rs ON rs.receivable_id = r.id									
				  	WHERE rs.student_id = '" . ( int ) $student_id . "' AND DATE_FORMAT(rs.receivable_at,'%Y%m') = '" . date ( 'Ym', $date ) . "' 
				  	ORDER BY iorder	ASC, order_group ASC
			 ";

		$stmt = $pdo->prepare ( $query );
		$stmt->execute ( array () );

		return $stmt->fetchAll ();
	}

	/**
	 * Lay cac dich vu ma hoc sinh dang ky dung va dich vu cua lop ma hoc sinh dang hoat dong tai thoi diem diem danh
	 *
	 * @author Nguyen Chien Thang
	 *        
	 * @param int $student_id
	 * @param $date, timestamp
	 *        	- Ngay nhap du lieu
	 */
	public function getServicesForStudentDiary($student_id, $my_class_id, $ps_customer_id, $date) {

		$date_format = date ( 'Ymd', PsDateTime::psDatetoTime ( $date ) );
		// $date_format2 = date ( 'Ym', PsDateTime::psDatetoTime($date) );

		$pdo = Doctrine_Manager::getInstance ()->getCurrentConnection ()
			->getDbh ();

		$query = ' SELECT DISTINCT s.id AS id, s.title,s.enable_roll AS enable_roll, 0 AS ss_id, 0 AS ssd_id,0 AS ssd_service_id, s.iorder AS iorder, c.id AS c_id
			FROM service s
				INNER JOIN class_service c ON s.id = c.service_id
				INNER JOIN my_class ON my_class.id= c.myclass_id AND my_class.id = ' . $my_class_id . '
				INNER JOIN student_class ON c.myclass_id = student_class.myclass_id AND student_class.student_id = ' . $student_id . '
			WHERE s.enable_schedule = 0 AND s.id NOT IN ( SELECT DISTINCT s.id AS id
			FROM service s
			LEFT JOIN student_service ss ON s.id = ss.service_id AND ss.delete_at Is Null AND ss.student_id = ' . $student_id . '
			LEFT JOIN student_service_diary ssd ON s.id = ssd.service_id AND ((DATE_FORMAT(ssd.tracked_at, "%Y%m%d") = ' . $date_format . ' AND ssd.student_id = ' . $student_id . '))
			
			WHERE ((ss.id Is Not Null OR ssd.id Is Not Null))) AND s.ps_customer_id = ' . $ps_customer_id . '

		UNION ';

		$query .= ' SELECT DISTINCT s.id AS id, s.title,s.enable_roll AS enable_roll, ss.id AS ss_id, ssd.id AS ssd_id,ssd.service_id AS ssd_service_id, s.iorder AS iorder, 0 AS c_id
			FROM service s

			LEFT JOIN ps_school_year psy ON psy.id= s.ps_school_year_id

			LEFT JOIN student_service ss ON s.id = ss.service_id AND ss.delete_at Is Null AND ss.student_id = ' . $student_id . '
			
			LEFT JOIN student_service_diary ssd ON s.id = ssd.service_id AND ((DATE_FORMAT(ssd.tracked_at, "%Y%m%d") = ' . $date_format . ' AND ssd.student_id = ' . $student_id . '))
			
			WHERE (s.enable_schedule = 0 AND (ss.id Is Not Null OR ssd.id Is Not Null)) AND s.ps_customer_id = ' . $ps_customer_id . ' AND (DATE_FORMAT(psy.from_date, "%Y%m%d") <= ' . $date_format . ' AND DATE_FORMAT(psy.to_date, "%Y%m%d") >= ' . $date_format . ')
		
		UNION

		SELECT DISTINCT s.id AS id, s.title,s.enable_roll AS enable_roll, ss.id AS ss_id, ssd.id AS ssd_id,ssd.service_id AS ssd_service_id, s.iorder AS iorder, 0 AS c_id
			FROM service s

			INNER JOIN ps_school_year psy ON psy.id= s.ps_school_year_id
			INNER JOIN student_service ss ON s.id = ss.service_id AND ss.delete_at Is Null AND ss.student_id = ' . $student_id . '

			INNER JOIN ps_service_courses psc ON psc.id = ss.ps_service_course_id
			INNER JOIN ps_service_course_schedules pscs ON psc.id = pscs.ps_service_course_id AND DATE_FORMAT(pscs.date_at, "%Y%m%d") = ' . $date_format . '

			LEFT JOIN student_service_diary ssd ON s.id = ssd.service_id AND ((DATE_FORMAT(ssd.tracked_at, "%Y%m%d") = ' . $date_format . ' AND ssd.student_id = ' . $student_id . '))
			WHERE s.enable_schedule = 1 AND ((ss.id Is Not Null OR ssd.id Is Not Null)) AND s.ps_customer_id = ' . $ps_customer_id . ' AND (DATE_FORMAT(psy.from_date, "%Y%m%d") <= ' . $date_format . ' AND DATE_FORMAT(psy.to_date, "%Y%m%d") >= ' . $date_format . ')

		ORDER BY c_id, enable_roll,iorder,id';

		$stmt = $pdo->prepare ( $query );

		// $stmt->execute(array($my_class_id, $student_id, $student_id, $date_format,$student_id,$ps_customer_id, $student_id, $date_format, $student_id, $ps_customer_id, $date_format, $date_format));

		$stmt->execute ( array () );

		return $stmt->fetchAll ( PDO::FETCH_CLASS );
	}

	/**
	 * Lay dich vu ngoai khoa phuc vu cho viec diem danh
	 */
	// ================================ END BEGIN: V1.5 Cloud: ============================================================
	public function getWithServices() {

		$q = $this->createQuery ( 'c' );
		return $q->execute ();
	}

	/**
	 * Cac khoan phai thu
	 *
	 * @param unknown_type $student_id
	 * @param timestamp $date:
	 *        	Ngay nhap du lieu
	 */
	public function getServicesByStudent($student_id, $date = '') {

		$q = $this->createQuery ( 'c' )
			->select ( "c.id,c.title,c.enable_roll" )
			->leftJoin ( "c.StudentService ss With ss.student_id=?", $student_id )
			->leftJoin ( "c.ReceivableStudent rs With DATE_FORMAT(rs.receivable_at,'%Y%m')=?", date ( 'Ym', $date ) )
			->where ( "rs.id Is Not Null Or ss.id Is Not Null" );
		// ->andWhere("DATE_FORMAT(rs.receivable_at,'%Y%m')=?", date('Ym',$date));
		return $q->execute ();
	}

	/**
	 * Thong ke thuc te su dung dich vu cua hoc sinh
	 * - Dich vu thong ke la nhung dich vu ma hs da dang ky
	 * - Va dich vu do la loai dich vu dc hoan phi
	 *
	 * @param unknown_type $student_id
	 * @param timestamp $date:
	 *        	Ngay nhap du lieu
	 */
	public function getSummaryUsingService($student_id, $date) {

		$q = $this->createQuery ( 'c' )
			->select ( "c.id, c.title, sd.student_id, ss.id As student_service_id, Sum(Case When sd.id Is Null Then 0 Else 1 End) As by_number" )
			->leftJoin ( "c.StudentService ss With ss.student_id=?", array (
				$student_id ) )
			->leftJoin ( "c.StudentServiceDiary sd With (sd.student_id=? And DATE_FORMAT(sd.tracked_at,'%Y%m')=?)", array (
				$student_id,
				date ( 'Ym', $date ) ) )
			->where ( "ss.id Is Not Null Or sd.id Is Not Null" );

		// $q->andWhere ( "c.enable_roll=1" ); Lấy cả các dịch vụ

		$q->groupBy ( "c.id, c.title, sd.student_id, ss.id" );

		$q->addOrderBy ( 'c.iorder ASC' );

		return $q->execute ();
	}

	/**
	 * Lay so ngay su dung mot dich vu cua hoc sinh
	 * - Dich vu thong ke la nhung dich vu ma hs da dang ky
	 * - Va dich vu do la loai dich vu dc hoan phi
	 *
	 * @param int $service_id,
	 *        	ID dich vu
	 * @param int $student_id,
	 *        	ID hoc sinh
	 * @param $date -
	 *        	Ngay nhap du lieu
	 */
	public function findOneSummaryUsingService($service_id, $student_id, $date) {

		$q = $this->createQuery ( 'c' )
			->select ( "c.id, c.title, sd.student_id, ss.id As student_service_id, Sum(Case When sd.id Is Null Then 0 Else 1 End) As by_number" )
			->leftJoin ( "c.StudentService ss With ss.student_id = ?", $student_id )
			->leftJoin ( "c.StudentServiceDiary sd With (sd.student_id=? And DATE_FORMAT(sd.tracked_at,'%Y%m')=?)", array (
				$student_id,
				date ( 'Ym', $date ) ) )
			->where ( "ss.id Is Not Null Or sd.id Is Not Null" )
			->
		// ->andWhere ( "c.enable_roll=1" )
		andWhere ( "c.id = ?", $service_id )
			->
		// ->groupBy("c.id, c.title, sd.student_id, ss.id")
		limit ( 1 );

		return $q->fetchOne ();
	}

	// /**
	// * Lay cac dich vu ma hoc sinh dang ky dung
	// *
	// * @param int $student_id
	// * @return list object for Service
	// */
	// public function getServicesByStudentId($student_id) {
	// $q = $this->createQuery ( 'c' )->select ( "c.id,c.title,ss.id AS ss_id" )->InnerJoin ( 'c.StudentService ss' )->leftJoin ( 'c.ServiceGroup sg' )->

	// addWhere ( 'ss.student_id = ?', $student_id )->

	// addOrderBy ( 'sg.iorder ASC,c.iorder ASC' );

	// return $q->execute ();
	// }

	/**
	 * Lay cac dich vu ma hoc sinh dang ky dung va dich vu cua lop ma hoc sinh dang hoat dong tai thoi diem diem danh
	 *
	 * @param int $student_id
	 * @param $date, timestamp
	 *        	- Ngay nhap du lieu
	 */
	public function getServicesForStudent($student_id, $date) {

		$date_format = date ( 'Ymd', $date );
		$date_format2 = date ( 'Ym', $date );

		$pdo = Doctrine_Manager::getInstance ()->getCurrentConnection ()
			->getDbh ();

		$query = ' SELECT DISTINCT s.id AS id, s.title,s.enable_roll, 0 AS ss_id, 0 AS ssd_id,0 AS ssd_service_id
			FROM service s
				INNER JOIN class_service c ON s.id = c.service_id
				INNER JOIN my_class ON my_class.id= c.myclass_id
				INNER JOIN student_class ON c.myclass_id = student_class.myclass_id AND student_class.student_id = ' . $student_id . '
			AND (
					(student_class.start_at IS NULL OR DATE_FORMAT(student_class.start_at,"%Y%m%d") <= ' . $date_format . ')
					AND (student_class.stop_at IS NULL OR DATE_FORMAT(student_class.stop_at,"%Y%m%d") >= ' . $date_format . ')
				)
			WHERE s.id NOT IN (SELECT DISTINCT s.id AS id
			FROM service s
			LEFT JOIN student_service ss ON s.id = ss.service_id AND ss.student_id = ' . $student_id . '
			LEFT JOIN student_service_diary ssd ON s.id = ssd.service_id AND ((DATE_FORMAT(ssd.tracked_at, "%Y%m%d") = ' . $date_format . ' AND ssd.student_id = ' . $student_id . '))
			WHERE ((ss.id Is Not Null OR ssd.id Is Not Null)))

		UNION

		SELECT DISTINCT s.id AS id, s.title,s.enable_roll, ss.id AS ss_id, ssd.id AS ssd_id,ssd.service_id AS ssd_service_id
			FROM service s
			LEFT JOIN student_service ss ON s.id = ss.service_id AND ss.student_id = ' . $student_id . '
			LEFT JOIN student_service_diary ssd ON s.id = ssd.service_id AND ((DATE_FORMAT(ssd.tracked_at, "%Y%m%d") = ' . $date_format . ' AND ssd.student_id = ' . $student_id . '))
			WHERE ((ss.id Is Not Null OR ssd.id Is Not Null))

		ORDER BY id';

		$stmt = $pdo->prepare ( $query );
		$stmt->execute ( array () );

		return $stmt->fetchAll ();
	}

	/**
	 * Lay cac dich vu ma hoc sinh da dung + dang ky dung
	 *
	 * @param int $student_id
	 * @param timestamp $date:
	 *        	dung dich vu
	 */
	public function getDiaryByDate($student_id, $date) {

		$q = $this->createQuery ( 'c' )
			->select ( "c.id,c.title, ss.id AS ss_id, ssd.id AS ssd_id,ssd.service_id AS ssd_service_id" )
			->leftJoin ( 'c.StudentService ss With ss.student_id = ?', $student_id )
			->leftJoin ( 'c.StudentServiceDiary ssd With (DATE_FORMAT(ssd.tracked_at,"%Y%m%d") = ? And ssd.student_id=?)', array (
				date ( 'Ymd', $date ),
				$student_id ) )
			->leftJoin ( 'c.ServiceGroup sg' )
			->addWhere ( 'ss.id Is Not Null OR ssd.id Is Not Null' )
			->addWhere ( 'c.enable_roll = 1' )
			->addOrderBy ( 'sg.iorder ASC,c.iorder ASC' );

		return $q->execute ();
	}

	/**
	 *
	 * Lay cac dich vu cua mot lop hoc va loai bo cac dich vu ma hoc sinh nay da dang ky
	 *
	 * @param int $student_id
	 * @param int $class_id
	 * @param string $text
	 */
	public function getListServicesClassForAddNew($student_id, $class_id = '', $text = '') {

		$q = $this->createQuery ( 's' )
			->
		select ( "s.id,c.title" );

		if ($class_id > 0)
			$q->InnerJoin ( 's.ClassService cs With cs.myclass_id = ?', $class_id );
		else
			$q->InnerJoin ( 's.ClassService cs' );

		$q->leftJoin ( 's.StudentService ss With ss.student_id = ?', $student_id );

		$q->leftJoin ( 's.ServiceGroup sg' );

		$q->addWhere ( 'ss.id IS NULL' );

		$text = strtolower ( trim ( $text ) );
		if ($text != '') {
			$q->addWhere ( 'LOWER(s.title) LIKE ?', '%' . $text . '%' );
		}

		$q->addOrderBy ( 'sg.iorder ASC,s.iorder ASC' );

		return $q->execute ();
	}

	// /**
	// *
	// * Lay cac dich vu cua mot lop hoc va loai bo cac dich vu ma hoc sinh nay da dang ky
	// *
	// * @param int $student_id
	// * @param int $class_id
	// * @param string $text
	// */
	// public function getListServicesForAddNew($student_id, $class_id = '', $text = '')
	// {
	// $q = $this->createQuery('s')->

	// select("s.id,c.title");

	// $q->leftJoin('s.ClassService cs');

	// $q->leftJoin('s.StudentService ss With ss.student_id = ?', $student_id);

	// $q->leftJoin('s.ServiceGroup sg');

	// $q->where('ss.id IS NULL');

	// // $q->orWhere( 'ss.id IS NOT NULL AND ss.ddd NOT NULL' );

	// if ($class_id > 0)
	// $q->addWhere('cs.myclass_id =? ', $class_id);

	// $text = strtolower(trim($text));
	// if ($text != '') {
	// $q->addWhere('LOWER(s.title) LIKE ?', '%' . $text . '%');
	// }

	// $q->addOrderBy('sg.iorder ASC,s.iorder ASC');

	// return $q->execute();
	// }

	/**
	 * Lay cac dich vu cua lop
	 *
	 * @param int $myclass_id
	 * @return list object for Service
	 */
	public function getServicesByClass($myclass_id) {

		$q = $this->createQuery ( 'c' )
			->select ( "c.id,c.title" )
			->innerJoin ( 'c.ClassService cs' )
			->addWhere ( 'cs.myclass_id = ?', $myclass_id );

		return $q->execute ();
	}

	/**
	 * FUNCTION: findServicesRelatedStudent($student_id, $date = '')
	 *
	 * Tim tat ca nhung dich vu co lien quan toi hoc sinh tai thoi diem kiem tra
	 * Bao gom: Dich vu dang ky su dung + dich vu khong dang ky nhung co dung + Dich vu co mat
	 * trong cac khoan phi(receivable_student) chua hoac da thanh toan
	 *
	 * @param int $student_id
	 * @param datime $date
	 * @return list
	 *
	 */
	public function findServicesRelatedStudent($student_id, $date = '') {

		$q = $this->createQuery ( 'c' )
			->select ( "c.id, c.title, c.enable_roll,sd.student_id, ss.id As student_service_id,cs.id AS collected_student_id,rs.id AS receivable_student_id,rs.amount AS rs_amount,rs.note AS rs_note ,rs.by_number AS rs_by_number,Sum(Case When sd.id Is Null Then 0 Else 1 End) As by_number,Sum(Case When sd.id Is Null Then 0 Else 1 End) As number_uses" )
			->leftJoin ( "c.StudentService ss With ss.student_id = ? ", array (
				$student_id ) )
			->leftJoin ( "c.StudentServiceDiary sd With (c.enable_roll=1 And sd.student_id = ? And DATE_FORMAT(sd.tracked_at,'%Y%m') = ?)", array (
				$student_id,
				date ( 'Ym', $date ) ) )
			->leftJoin ( "c.ReceivableStudent rs With (rs.is_late = 0 And rs.student_id = ? And DATE_FORMAT(rs.receivable_at,'%Y%m') = ?)", array (
				$student_id,
				date ( 'Ym', $date ) ) )
			->leftJoin ( "rs.CollectedStudent cs With (cs.student_id = ? And DATE_FORMAT(cs.collected_at,'%Y%m') = ?)", array (
				$student_id,
				date ( 'Ym', $date ) ) )
			->where ( "ss.id Is Not Null Or sd.id Is Not Null Or rs.id Is Not Null" )
			->
		// ->andWhere("c.enable_roll=1")
		// ->groupBy("c.id, c.title");
		groupBy ( "c.id, c.title, sd.student_id, ss.id, rs.note" );

		return $q->execute ();
	}

	/**
	 * FUNCTION: findByMyClassAndDate($arr_myclass_id, $date = '')
	 *
	 * Tim tat ca nhung dich vu hoc sinh da su dung(chi tinh dich vu da dang ky su dung)tai thoi diem kiem tra
	 * Bao gom: Dich vu dang ky su dung + dich vu khong dang ky nhung co dung + Dich vu co mat trong cac khoan
	 * phi(receivable_student) chua hoac da thanh toan
	 *
	 * @param int $student_id
	 * @param datime $date
	 * @return list
	 *
	 */
	public function findByMyClassAndDate($arr_myclass_id, $date) {

		$date2 = date ( "Ym", $date );
		$date1 = date ( "Y-m-d", $date );

		$q = Doctrine_Query::create ()->select ( "ss.id AS ss_id, ss.student_id,ss.service_id,se.id,se.title" )
			->from ( 'StudentService ss' )
			->innerJoin ( "ss.Service se" )
			->innerJoin ( "ss.Student s" )
			->innerJoin ( "s.StudentClass sc With (sc.is_activated = 1)" )
			->leftJoin ( 's.StudentWithdraw sw' )
			->where ( "s.deleted_at IS NULL" )
			->whereIn ( "sc.myclass_id", $arr_myclass_id )
			->andWhere ( '((sw.start_at IS NULL OR DATE_FORMAT(sw.start_at,"%Y%m") <= ? ) OR (sw.stop_at IS NULL OR (DATE_FORMAT(sw.stop_at,"%Y%m") >= ? AND DATE_FORMAT(sw.stop_at,"%Y%m%d") <= DATE_FORMAT(LAST_DAY(?),"%Y%m%d")) ))', array (
				$date2,
				$date2,
				$date1 ) );

		return $q->execute ();
	}

	/**
	 * FUNCTION: findByStudent($arr_student_id, $date = '')
	 *
	 * Lay cac dich vu dang ky su dung
	 * Bao gom: Dich vu dang ky su dung(Co the da ton tai hoac chua co mat trong cac khoan phi(receivable_student) chua hoac da thanh toan
	 *
	 * @param array $arr_student_id
	 *        	- mang id hoc sinh
	 * @param datime $date
	 * @return list
	 *
	 */
	public function findByStudent($arr_student_id, $date = '') {

		$str_student_id = implode ( ",", $arr_student_id );

		$q = $this->createQuery ( 'c' )
			->select ( "c.id, c.title, c.enable_roll,ss.student_id AS student_id, ss.id As student_service_id" )
			->addSelect ( "rs.id AS rs_id, rs.service_id AS rs_se_id, rs.student_id AS rs_su_id, rs.by_number AS rs_by_number, rs.spent_number AS rs_spent_number, rs.unit_price AS rs_unit_price, rs.amount AS rs_amount, rs.note AS rs_note" )
			->addSelect ( "cs.id AS cs_id, rs.service_id AS rs_se_id, rs.student_id AS rs_su_id, cs.amount AS cs_amount, cs.note AS cs_note" )
			->InnerJoin ( "c.StudentService ss" )
			->leftJoin ( "c.ReceivableStudent rs With (rs.student_id IN ({$str_student_id}) And DATE_FORMAT(rs.receivable_at,'%Y%m') = ?)", array (
				date ( 'Ym', $date ) ) )
			->leftJoin ( "rs.CollectedStudent cs With (cs.student_id IN ({$str_student_id}) And DATE_FORMAT(cs.collected_at,'%Y%m') = ?)", array (
				date ( 'Ym', $date ) ) )
			->whereIn ( "ss.student_id", $arr_student_id )
			->andWhere ( "ss.id Is Not Null" )
			->
		// ->andWhere("ss.id Is Not Null Or rs.id Is Not Null")
		groupBy ( "c.id, c.title" );

		return $q->execute ();
	}

	/**
	 * FUNCTION: findAllServiceByStudent($student_id, $date = '') - Bỏ
	 *
	 * Tim tat ca nhung dich vu co lien quan toi hoc sinh tai thoi diem kiem tra
	 * Bao gom: Dich vu dang ky su dung + dich vu khong dang ky nhung co dung + Dich vu co mat
	 * trong cac khoan phi(receivable_student) chua hoac da thanh toan
	 *
	 * @param int $student_id
	 * @param datime $date
	 * @return list
	 *
	 */
	public function findAllServiceByStudent($arr_student_id, $date = '') {

		$str_student_id = implode ( ",", $arr_student_id );

		$q = $this->createQuery ( 'c' )
			->select ( "c.id, c.title, c.enable_roll,ss.student_id AS student_id" )
			->addSelect ( "sd.student_id AS sd_student_id,Sum(Case When sd.id Is Null Then 0 Else 1 End) As number_uses" )
			->addSelect ( "rs.id AS rs_id, rs.service_id AS rs_se_id, rs.student_id AS rs_su_id" )
			->addSelect ( "cs.id AS cs_id" )
			->leftJoin ( "c.StudentService ss With ss.student_id IN ($str_student_id) " )
			->leftJoin ( "c.StudentServiceDiary sd With (sd.student_id IN ($str_student_id) And DATE_FORMAT(sd.tracked_at,'%Y%m') = ?)", array (
				date ( 'Ym', $date ) ) )
			->leftJoin ( "c.ReceivableStudent rs With (rs.is_late = 0 And rs.student_id IN ($str_student_id) And DATE_FORMAT(rs.receivable_at,'%Y%m') = ?)", array (
				date ( 'Ym', $date ) ) )
			->leftJoin ( "rs.CollectedStudent cs With (cs.student_id IN ($str_student_id) And DATE_FORMAT(cs.collected_at,'%Y%m') = ?)", array (
				date ( 'Ym', $date ) ) )
			->where ( "ss.id Is Not Null Or sd.id Is Not Null Or rs.id Is Not Null" )
			->
		// ->andWhere("c.enable_roll=1")
		// ->groupBy("c.id, c.title");
		groupBy ( "c.id, c.title, sd.student_id, ss.id" );

		return $q->execute ();
	}

	/**
	 * Lay cac dich vu dang ky va co phu thuoc loai enable_roll = 0 <=> Dich vu tinh theo so lan su dung
	 */
	public function findByEnableRollOfStudent($student_id, $date) {

		$q = $this->createQuery ( 's' )
			->select ( "s.id, s.title, ss.id As student_service_id " )
			->innerJoin ( "s.StudentService ss With ss.student_id = ? ", array (
				$student_id ) )
			->where ( "ss.student_id = ? ", $student_id )
			->andWhere ( "s.enable_roll = ? ", PreSchool::SERVICE_TYPE_NOT_FIXED );

		return $q->execute ();
	}

	/**
	 * Chuyen doi danh sach service ve dang a[id] = name
	 */
	public function getListServiceMapArray($services) {

		$c = array ();

		foreach ( $services as $value ) {
			$c [$value->getId ()] = $value->getTitle ();
		}

		return $c;
	}

	/**
	 * CAC HAM SU DUNG TRONG BAN MOI: Bat dau tu ngay: 20/10/2011 *
	 */

	/**
	 * lấy chi tiết dịch vụ
	 *
	 * @param int $service_id
	 * @return obj
	 */
	public function getServiceById($service_id) {

		$query = $this->createQuery ( 's' );
		$query->select ( 's.id AS id,' . 's.title AS title,' . 's.ps_image_id AS ps_image_id,' . 's.enable_roll AS enable_roll,' . 's.iorder AS iorder,' . 's.note AS note,' . 's.description AS description,' . 'sg.title AS service_group,' . 'pc.title AS customer,' . 'im.file_name AS file_name,' . 's.is_activated AS is_activated,' . 's.is_default AS is_default,' . 's.created_at AS created_at,' . 's.updated_at AS updated_at,' . 'CONCAT(uc.first_name, " ", uc.last_name) AS created_by,' . 'CONCAT(ud.first_name, " ", ud.last_name) AS updated_by' );

		$query->leftJoin ( 's.UserCreated AS uc' );

		$query->leftJoin ( 's.UserUpdated AS ud' );

		$query->leftJoin ( 's.ServiceGroup AS sg' );

		$query->leftJoin ( 's.PsCustomer AS pc' );

		$query->leftJoin ( 's.PsImages AS im' );

		$query->addWhere ( 's.id = ?', $service_id );

		return $query->fetchOne ();
	}

	/**
	 * Lay tat ca cac dich vu ma hoc sinh dang su dung (chỉ với duy nhất 1 dịch vụ đang sử dụng)
	 *
	 * @author Nguyen Chien Thang
	 *        
	 * @param int $student_id
	 *        	$date_at
	 * @return $list
	 */
	public function getServicesStudentUsing($student_id, $date_at) {

		$q = $this->createQuery ( 's' );

		$q->select ( "s.id AS id,s.title AS title,s.enable_roll AS enable_roll, s.enable_schedule AS enable_schedule,ss.delete_at AS delete_time, ss.id AS ss_id,ss.note AS note, ss.id AS student_services_id,I.file_name AS file_name,sg.title AS group_name,ss.discount AS discount, ss.discount_amount AS discount_amount" );

		$q->addSelect ( "sy.title AS school_year, wp.id AS wp_id, wp.title AS wp_title" );

		$q->addSelect ( "sd.detail_at AS detail_at, sd.amount AS amount, sd.by_number AS by_number" );

		$q->addSelect ( 'ss.updated_at AS updated_at,ss.number_month AS number_month , CONCAT(u.first_name, " ", u.last_name) AS updated_by' );
		//$q->addSelect ( 're.title AS tanxuat, re.id AS re_id' );

		$q->InnerJoin ( 's.StudentService ss' );
		//$q->InnerJoin ( 'ss.PsRegularity re' );

		$q->leftJoin ( 's.ServiceDetail sd With (DATE_FORMAT(sd.detail_at,"%Y%m%d") <=? AND (sd.detail_end IS NULL OR  DATE_FORMAT(sd.detail_end,"%Y%m%d") >= ?)) ', array (
				date ( 'Ymd', strtotime ( $date_at ) ),
				date ( 'Ymd', strtotime ( $date_at ) ) ) );

		$q->InnerJoin ( 's.PsSchoolYear sy' )
			->leftJoin ( 's.PsWorkPlaces wp' )
			->
		leftJoin ( 'ss.UserUpdated u' )
			->leftJoin ( 's.ServiceGroup sg' )
			->leftJoin ( 's.PsImages I' );

		$q->addWhere ( 'ss.delete_at IS NULL' );

		$q->addWhere ( 'ss.student_id = ?', $student_id );

		$q->addOrderBy ( 'sy.is_default DESC, wp.id, s.iorder ASC, sg.iorder ASC' );

		return $q->execute ();
	}


	/*** Cập nhật từ ngày 14/07/2023 ***/


	// Kiểm tra dịch vụ này có được giảm trừ hay không, có được áp dụng mã ưu tiên nào không
	public function kiemTraDichVuCoGiamTruHayKhong($service_id) {

		$q = $this->createQuery ( 's' )
			->select ( "s.*" )
			->addWhere ( "s.id = ? ", $service_id )
			->andWhere ( "s.is_kidsschool = 1 or s.service_reduce !=?",",,");

		return $q->fetchOne ();

	}


}