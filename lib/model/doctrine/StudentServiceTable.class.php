<?php

/**
 * StudentServiceTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class StudentServiceTable extends Doctrine_Table {

	/**
	 * Returns an instance of this class.
	 *
	 * @return object StudentServiceTable
	 */
	public static function getInstance() {

		return Doctrine_Core::getTable ( 'StudentService' );
	}
	
	/**
	 * Returns an instance of this class.
	 *
	 * @return object StudentTable
	 */
	public function doSelectQueryStudent(Doctrine_Query $query) {
	
		$query = Doctrine_Query::create ()->from ( 'Student s' );
		
		$query->select ( 's.birthday as birthday, s.id as student_id, s.ps_customer_id AS ps_customer_id,' . 's.student_code AS student_code, ' . 's.image AS image, ' . 's.id as student_id, ' . 's.sex AS sex, ' . 's.year_data AS year_data, ' . 'sc.myclass_id as class_id, ' . 'cus.school_code AS school_code,' . 'CONCAT(s.first_name, " ", s.last_name) AS student_name' );
		
		$query->innerJoin ( 's.PsCustomer cus' );
		
		$query->innerJoin ( 's.StudentClass sc With sc.is_activated =?', PreSchool::ACTIVE );
	
		$query->addWhere ( 's.deleted_at IS NULL' );
	
		$query->whereIn ( 'sc.type', array (
				PreSchool::SC_STATUS_OFFICIAL,
				PreSchool::SC_STATUS_TEST,
				PreSchool::SC_STATUS_HOLD
		) );
	
		if (! myUser::credentialPsCustomers ( 'PS_STUDENT_ATTENDANCE_FILTER_SCHOOL' ) && myUser::getPscustomerID () > 0) {
			$query->addWhere ( 's.ps_customer_id = ?', myUser::getPscustomerID () );
		}
		
		return $query;
	}

	/**
	 * Ham kiem tra xem dich vu da duoc hoc sinh dang ky chua
	 *
	 * @param int $student_id
	 * @param int $service_id
	 *
	 * @return object for student_service
	 *        
	 */
	public function checkStudentServiceExits($student_id, $service_id) {

		// echo $service_id; die();
		$q = $this->createQuery ( 'c' )
			->select ( "c.id" )
			->addWhere ( 'c.student_id = ? AND c.service_id = ?', array (
				$student_id,
				$service_id ) )
			->addWhere ( 'delete_at IS NULL' )
			->limit ( 1 );

		return $q->fetchOne ();
	}

	public function findServiceByStudentIds($arr_student_id, $date) {

		$q = $this->createQuery ( 'ss' )
			->select ( 'ss.service_id AS service_id, ss.student_id AS student_id,(Case When sc.myclass_mode IS NULL THEN 0 ELSE 1 END) AS myclass_mode' )
			->leftJoin ( 'ss.ReceivableStudent rs WITH rs.student_id = ss.student_id AND DATE_FORMAT(rs.receivable_at, "%Y%m") = ?', date ( 'Ym', $date ) )
			->innerJoin ( 'ss.StudentClass sc WITH sc.student_id = ss.student_id AND sc.is_activated = 1' )
			->where ( 'rs.id IS NULL' )
			->andWhereIn ( 'ss.student_id', $arr_student_id );

		$result = $q->execute ();

		return $result;
	}

	/**
	 * Ham lay tat ca cac hoc sinh dang ky khoa hoc
	 *
	 * @param int $ps_service_course_id
	 *
	 * @return object for student_service
	 *        
	 */
	public function getStudentByPsServiceCourse($ps_service_course_id) {

		$q = $this->createQuery ( 'c' )
			->select ( 'c.id, c.student_id as student_id, s.image AS image,s.sex AS sex,s.birthday as birthday,s.year_data as year_data,s.student_code as student_code, ct.school_code as school_code' );
		$q->addSelect ( 'CONCAT(s.first_name, " ", s.last_name) AS full_name' )
			->innerJoin ( 'c.Student s' )
			->innerJoin ( 's.PsCustomer ct' )
			->where ( 'c.ps_service_course_id = ?', $ps_service_course_id )
			->addWhere ( 'c.delete_at IS NULL' )
			->addWhere ( 's.deleted_at IS NULL' );
		$q->addOrderBy ( 's.last_name', 's.first_name' );
		// Can bo sung de lay xem hien hoc sinh dang nam o lop nao

		return $q->execute ();
	}

	/**
	 * getStudentsByPsServiceId($ps_service_id)
	 *
	 * Ham lay tat ca cac hoc sinh dang ky su dung dich vu
	 *
	 * @param int $ps_service_id
	 *
	 * @return object for student_service
	 *        
	 */
	public function getStudentsByPsServiceId($ps_service_id) {

		$q = $this->createQuery ( 'c' )
			->select ( 'c.id, c.student_id as student_id, s.image AS image,s.sex AS sex,s.birthday as birthday,s.year_data as year_data,s.student_code as student_code, pc.school_code AS school_code' );
		$q->addSelect ( 'CONCAT(s.first_name, " ", s.last_name) AS full_name' )
			->innerJoin ( 'c.Student s' )
			->innerJoin ( 's.PsCustomer AS pc' )
			->where ( 'c.service_id = ?', $ps_service_id )
			->addWhere ( 'c.delete_at IS NULL' )
			->addWhere ( 's.deleted_at IS NULL' );
		$q->addOrderBy ( 's.last_name', 's.first_name' );

		return $q->execute ();
	}

	/**
	 * Ham lay tat ca cac dich vu duoc hoc sinh dang ky
	 *
	 * @param int $student_id
	 *
	 * @return object for student_service
	 *        
	 */
	public function findAllServiceByStudent($student_id) {

		$q = $this->createQuery ( 'c' )
			->leftJoin ( 'c.Service s' )
			->leftJoin ( 's.ServiceGroup sg' )
			->addWhere ( 'c.student_id = ?', $student_id )
			->addWhere ( 'c.delete_at IS NULL' )
			->addOrderBy ( 'sg.iorder ASC,s.iorder ASC' );

		return $q->execute ();
	}

	/**
	 * Ham lay tat ca cac dich vu dang su dung tai thoi diem
	 *
	 * @param int $student_id,
	 *        	$date
	 *        	
	 * @return object for student_service
	 *        
	 */
	public function findAllServiceByStudentWithMonth($student_id, $date_at) {

		$q = $this->createQuery ( 'c' )
			->select ( 's.title as title, sd.amount as amount,s.note as note, c.discount as discount, c.discount_amount as discount_amount,sd.by_number as by_number' )
			->addSelect ( 'CONCAT(u.first_name, " ", u.last_name) AS updated_by, c.updated_at AS updated_at' )
			->innerJoin ( 'c.Service s' )
			->leftJoin ( 's.ServiceDetail sd With (DATE_FORMAT(sd.detail_at,"%Y%m%d") <=? AND (sd.detail_end IS NULL OR  DATE_FORMAT(sd.detail_end,"%Y%m%d") >= ?)) ', array (
				date ( 'Ymd', strtotime ( $date_at ) ),
				date ( 'Ymd', strtotime ( $date_at ) ) ) )
			->leftJoin ( 'c.UserUpdated u' )
			->addWhere ( 'c.student_id = ?', $student_id )
			->addWhere ( 'c.delete_at IS NULL' )
			->addOrderBy ( 's.iorder ASC' );

		return $q->execute ();
	}

	/**
	 * Lay obj hoc sinh dang ky dich vu chua phan lop
	 *
	 * @param int $student_id
	 * @param int $service_id
	 * @param int $ps_service_course_id
	 *
	 * @return object for student_service
	 *        
	 */
	public function getStudentServiceCourse($student_id, $service_id) {

		$q = $this->createQuery ( 'c' )
			->select ( "c.id" )
			->addWhere ( 'c.student_id = ?  AND c.service_id = ? AND c.ps_service_course_id IS NULL', array (
				$student_id,
				$service_id ) )
			->addWhere ( 'c.delete_at IS NULL' )
			->limit ( 1 );

		return $q->fetchOne ();
	}

	/**
	 * Lay so luong hoc sinh da dang ky dich vu bao gồm cả đã đánh dấu xóa
	 *
	 * @author thangnc
	 *        
	 * @param $service_id int
	 * @return int
	 */
	public function getCountStudentServiceOfServiceId($service_id) {

		$this->createQuery ( 'a' )
			->select ( 'a.id' )
			->addWhere ( 'a.service_id = ?', $service_id )
			->count ();
	}

	/**
	 * Lay tat ca cac dich vu ma hoc sinh dang su dung
	 *
	 * @author Nguyen Chien Thang
	 *        
	 * @param int $student_id
	 *        	$date_at
	 * @return $list
	 */
	public function getServicesStudentUsing($student_id, $date_at) {

		$q = $this->createQuery ( 'ss' );

		$q->select ( "s.id AS id,s.title AS title,s.enable_roll AS enable_roll, s.enable_schedule AS enable_schedule,ss.delete_at AS delete_time, ss.id AS ss_id,ss.note AS note, ss.id AS student_services_id,I.file_name AS file_name,sg.title AS group_name,ss.discount AS discount, ss.discount_amount AS discount_amount" );

		$q->addSelect ( "sy.title AS school_year, wp.id AS wp_id, wp.title AS wp_title" );

		$q->addSelect("sd.detail_at AS detail_at, sd.amount AS amount, sd.by_number AS by_number");

		$q->addSelect ( 'ss.updated_at AS updated_at, CONCAT(u.first_name, " ", u.last_name) AS updated_by' );

		// $q->InnerJoin ( 'ss.Service s With (ss.delete_at IS NULL AND ss.student_id = ?)', $student_id);

		$q->InnerJoin ( 'ss.Service s' );

		$q->leftJoin('s.ServiceDetail sd With (DATE_FORMAT(sd.detail_at,"%Y%m%d") <=? AND (sd.detail_end IS NULL OR DATE_FORMAT(sd.detail_end,"%Y%m%d") >= ?)) ', array (date ('Ymd', strtotime($date_at) ),date ('Ymd', strtotime($date_at) ) ) );

		$q->InnerJoin ( 's.PsSchoolYear sy' )
			->leftJoin ( 's.PsWorkPlaces wp' )
			->leftJoin ( 'ss.UserUpdated u' )
			->leftJoin ( 's.ServiceGroup sg' )
			->leftJoin ( 's.PsImages I' );

		$q->addWhere ( 'ss.delete_at IS NULL' );

		$q->addWhere ( 'ss.student_id = ?', $student_id );

		$q->addGroupBy ( 'ss.id' );

		$q->addOrderBy ( 'sy.is_default DESC, sy.id, wp.id, s.iorder ASC, sg.iorder ASC' );

		return $q->execute ();
	}

	/**
	 * Lay tat ca cac dich vu cua hoc sinh da bi huy
	 *
	 * @author Nguyen Chien Thang
	 *        
	 * @param int $student_id
	 * @param string $date_at
	 *        	- (yyyy-mm-dd)
	 * @return $list
	 */
	public function getServicesStudentNotUsing($student_id, $date_at) {

		$q = $this->createQuery ( 'ss' );

		$q->select ( "s.id AS id,s.title AS title,s.enable_roll AS enable_roll, s.enable_schedule AS enable_schedule,ss.delete_at AS delete_time, ss.id AS ss_id,I.file_name AS file_name,sg.title AS group_name,ss.discount as discount, ss.discount_amount AS discount_amount" );

		$q->addSelect ( "sy.title AS school_year, wp.id AS wp_id, wp.title AS wp_title" );

		$q->addSelect("sd.detail_at AS detail_at, sd.amount AS amount, sd.by_number AS by_number");

		$q->addSelect ( 'ss.updated_at AS updated_at, CONCAT(u.first_name, " ", u.last_name) AS updated_by' );

		$q->InnerJoin ( 'ss.Service s With (ss.delete_at IS NOT NULL AND ss.student_id = ?)', $student_id );

		$q->leftJoin('s.ServiceDetail sd With ( DATE_FORMAT(sd.detail_at,"%Y%m%d") <= DATE_FORMAT(ss.delete_at,"%Y%m%d") AND (sd.detail_end IS NULL OR DATE_FORMAT(sd.detail_end,"%Y%m%d") >= DATE_FORMAT(ss.delete_at,"%Y%m%d")) )');

		// $q->leftJoin('s.ServiceDetail sd With (DATE_FORMAT(sd.detail_at,"%Y%m%d") <=? AND (sd.detail_end IS NULL OR DATE_FORMAT(sd.detail_end,"%Y%m%d") >= ?)) ', array (date ('Ymd', strtotime($date_at) ),date ('Ymd', strtotime($date_at) ) ) );

		$q->leftJoin ( 's.PsSchoolYear sy' )
			->leftJoin ( 's.PsWorkPlaces wp' )
			->
		leftJoin ( 'ss.UserUpdated u' )
			->leftJoin ( 's.ServiceGroup sg' )
			->leftJoin ( 's.PsImages I' );

		// $q->addWhere ( 'ss.delete_at IS NOT NULL');

		// $q->addWhere ( 'ss.student_id = ?', $student_id );

		$q->addGroupBy ( 'ss.id, s.id' );

		$q->addOrderBy ( 'sy.is_default DESC, sy.id, wp.id, s.iorder ASC, sg.iorder ASC' );

		return $q->execute ();
	}
}