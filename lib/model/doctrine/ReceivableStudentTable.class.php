<?php

/**
 * ReceivableStudentTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ReceivableStudentTable extends Doctrine_Table {

	/**
	 * Returns an instance of this class.
	 *
	 * @return object ReceivableStudentTable
	 */
	public static function getInstance() {

		return Doctrine_Core::getTable ( 'ReceivableStudent' );
	}

	public function doSelectQuery(Doctrine_Query $query) {

		$a = $query->getRootAlias ();

		$query->select ( $a . '.id AS id,' . $a . '.student_id AS student_ids,' . $a . '.receivable_id AS receivable_id,' . $a . '.amount AS amount,' . $a . '.is_number AS is_number,' . $a . '.receivable_at AS receivable_at,' . $a . '.note AS 	note,' . 'CONCAT(u.first_name, " ", u.last_name) AS updated_by,' . $a . '.updated_at AS updated_at, ' );

		$query->addSelect ( 's.id AS student_id, s.image AS image, s.student_code AS student_code, CONCAT(s.first_name, " ", s.last_name) AS student_name,' );

		$query->addSelect ( 'rc.id, rc.title AS receivable_title,' );

		$query->addSelect ( 's.year_data AS year_data , cus.school_code AS school_code,' );

		$query->leftJoin ( $a . '.Student s' );

		$query->leftJoin ( 's.StudentClass sc' );

		$query->leftJoin ( $a . '.UserUpdated u' );

		$query->leftJoin ( $a . '.Receivable rc' );

		$query->leftJoin ( 's.PsCustomer cus' );

		if (! myUser::credentialPsCustomers ( 'PS_FEE_REPORT_FILTER_SCHOOL' ) && myUser::getPscustomerID () > 0) {
			$query->where ( 'rc.ps_customer_id = ?', myUser::getPscustomerID () );
		}

		// $query->addGroupBy($a.'.student_id',$a.'.receivable_id');

		$query->orderBy ( $a . '.updated_at desc' );

		return $query;
	}

	/**
	 * Lay thong tin hoc sinh
	 *
	 * @author Phung Van Thanh
	 *        
	 */
	public function getReceivableStudentByClass($month, $customer, $workplace, $class, $receivable_id = null) {

		$date = '01-' . $month;
		$query = $this->createQuery ( 'rs' )
			->select ( "rs.id AS rs_id," . "rs.amount AS amount,rs.is_number AS is_number," . "rs.receivable_at AS rs_receivable_at,rs.note AS rs_note,CONCAT(u.first_name, ' ', u.last_name) AS updated_by" );

		$query->addSelect ( 's.id AS student_id, s.image AS image, s.student_code AS student_code, CONCAT(s.first_name, " ", s.last_name) AS student_name,' );

		$query->addSelect ( 'rc.id AS rc_id, rc.title AS receivable_title,' );

		$query->addSelect ( 's.year_data AS year_data , cus.school_code AS school_code,' );

		$query->leftJoin ( 'rs.Student s' );

		$query->leftJoin ( 's.StudentClass sc' );

		$query->leftJoin ( 'rs.UserUpdated u' );

		$query->leftJoin ( 'rs.Receivable rc' );

		$query->leftJoin ( 's.PsCustomer cus' );

		$query->addWhere ( 'rc.ps_customer_id = ?', $customer );

		if ($workplace > 0) {
			$query->addWhere ( 'rc.ps_workplace_id = ?', $workplace );
		}
		if ($class > 0) {
			$query->addWhere ( 'sc.myclass_id = ?', $class );
		}
		if ($receivable_id > 0) {
			$query->addWhere ( 'rs.receivable_id = ?', $receivable_id );
		}
		$query->andWhere ( "DATE_FORMAT(rs.receivable_at,'%Y%m') = ? ", date ( 'Ym', strtotime ( $date ) ) );

		// Phần where này sẽ lấy thiếu student
		$query->andWhere ( '(DATE_FORMAT(sc.start_at,"%Y%m") <= ? AND sc.stop_at IS NULL OR DATE_FORMAT(sc.stop_at,"%Y%m") >= ? )', array (
				date ( 'Ym', strtotime ( $date ) ),
				date ( 'Ym', strtotime ( $date ) ) ) );

		return $query->execute ();
	}

	/**
	 * *
	 * Ham lay danh sach khoan phai thu khac cua 1 tháng
	 *
	 * @author Phung Van Thanh
	 * @param $receivable_id- int
	 */
	public function getAllReceivableStudentByReceivableId($ps_customer_id, $ps_month, $receivable_id) {

		$date_at = '01-' . $ps_month;

		$q = $this->createQuery ( 'rs' )
			->select ( 'rs.*' );

		$q->innerJoin ( 'rs.Receivable rc' );
		$q->where ( "rs.receivable_id =?", $receivable_id );
		$q->andWhere ( 'rc.ps_customer_id = ?', $ps_customer_id );

		$q->addWhere ( "DATE_FORMAT(rs.receivable_at,'%Y%m') =?", date ( 'Ym', strtotime ( $date_at ) ) );

		return $q->execute ();
	}

	/**
	 * *
	 * Ham lay danh sach dich vu cua 1 tháng
	 *
	 * @author Phung Van Thanh
	 * @param $receivable_id- int
	 */
	public function getAllReceivableStudentByServiceId($ps_customer_id, $ps_month, $last_month, $service_id) {

		$date_at = '01-' . $ps_month;

		$q = $this->createQuery ( 'rs' )
			->select ( 'rs.*' );

		$q->innerJoin ( "rs.Service sv" );
		$q->where ( "rs.service_id =?", $service_id );
		$q->andWhere ( 'sv.ps_customer_id = ?', $ps_customer_id );

		$q->addWhere ( "DATE_FORMAT(rs.receipt_date,'%Y%m') <=?", date ( 'Ym', strtotime ( $date_at ) ) );

		if ($last_month != '') {
			$q->addWhere ( "DATE_FORMAT(rs.receipt_date,'%Y%m') >= ? ", date ( "Ym", strtotime ( $last_month ) ) );
		}

		return $q->execute ();
	}

	/**
	 * Lay danh sach tat ca khoan phai thu theo truong, co so
	 *
	 * @author Phung Van Thanh
	 *        
	 */
	public function getAllReceivableBySchool($ps_school_year_id, $ps_customer_id, $ps_workplace_id) {

		$query = Doctrine_Query::create ()->from ( 'Receivable rc' );

		$query->select ( "rs.id as rs_id, rs.amount as amount" );
		$query->select ( "rc.id as id, rc.title as title" );
		$query->innerJoin ( 'rc.ReceivableStudent rs' );
		$query->addWhere ( 'rc.ps_school_year_id =?', $ps_school_year_id );
		$query->addWhere ( 'rc.ps_customer_id =?', $ps_customer_id );
		if ($workplace > 0) {
			$query->addWhere ( 'rc.ps_workplace_id = ?', $ps_workplace_id );
		}
		$query->orderBy ( 'rc.id desc' );

		return $query->execute ();
	}

	/**
	 *
	 * @author ThanhDev
	 * @param unknown $student_id
	 * @param unknown $receivable_id
	 * @param unknown $is_number
	 * @return Doctrine_Collection
	 */
	public function updatedNumberReceivableStudent($student_id, $receivable_id, $is_number) {

		$q = $this->createQuery ( 'r' )
			->select ( 'r.id,r.is_number' )
			->addWhere ( "r.student_id = ? ", $student_id )
			->addWhere ( "r.receivable_id = ? ", $receivable_id )
			->addWhere ( "r.is_number > ? ", $is_number )
			->orderBy ( 'r.receivable_at DESC' );

		return $q->execute ();
	}

	public function getReceivableStudentDetail($student_id, $receivable_id) {

		$q = $this->createQuery ( 'r' )
			->select ( 'r.id,r.is_number as is_number,r.receivable_at as receivable_at,r.note as note,rc.title as title,
        CONCAT(u.first_name, " ", u.last_name) AS updated_by, r.updated_at as updated_at' )
			->leftJoin ( 'r.Receivable rc' )
			->leftJoin ( 'r.UserUpdated u' )
			->addWhere ( "r.student_id = ? ", $student_id )
			->addWhere ( "r.receivable_id = ? ", $receivable_id );

		$q->orderBy ( 'r.receivable_at DESC' );

		return $q->execute ();
	}

	public function getReceivableStudentById($student_id, $month) {

		$date = '01-' . $month;
		$query = $this->createQuery ( 'rs' )
			->select ( "rs.id AS rs_id," . "rs.amount AS amount,rs.is_number AS is_number," . "rs.receivable_at AS rs_receivable_at,rs.note AS rs_note,CONCAT(u.first_name, ' ', u.last_name) AS updated_by" );

		$query->addSelect ( 's.id AS student_id, s.image AS image, s.student_code AS student_code, CONCAT(s.first_name, " ", s.last_name) AS student_name,' );

		$query->addSelect ( 'rc.id, rc.title AS receivable_title,' );

		$query->leftJoin ( 'rs.Student s' );

		$query->leftJoin ( 'rs.UserUpdated u' );

		$query->leftJoin ( 'rs.Receivable rc' );

		$query->addWhere ( 'rs.student_id = ?', $student_id );

		$query->andWhere ( "DATE_FORMAT(rs.receivable_at,'%Y%m') = ? ", date ( 'Ym', strtotime ( $date ) ) );

		return $query->execute ();
	}

	/**
	 * getLateOfStudentByDate($student_id, $date){
	 * Kiem tra xem da dong tien ve muon hay chua
	 *
	 * @author Nguyen Chien Thang - ntsc279@gmail.com
	 * @version 2.0
	 * @param $student_id, int
	 * @param $date int
	 *        	timestamp
	 */
	public function getLateOfStudentByDate($student_id, $date) {

		$q = $this->createQuery ( 'rs' )
			->select ( "rs.id AS rs_id,rs.by_number AS rs_by_number," . "rs.spent_number AS rs_spent_number,rs.unit_price AS rs_unit_price, rs.amount AS rs_amount," . "rs.receivable_at AS rs_receivable_at,rs.note AS rs_note" )
			->addSelect ( "cs.id AS cs_id, cs.collected_at AS collected_at, cs.amount AS cs_amount, cs.note AS cs_note" )
			->addSelect ( "cr.id AS cr_id, cr.amount AS cr_amount, cr.spent_number AS cr_spent_number" )
			->addSelect ( "r.id AS receipt_id, r.receipt_date AS receipt_date" )
			->leftJoin ( "rs.CollectedStudent cs With DATE_FORMAT(cs.collected_at,'%Y%m') = ? ", date ( "Ym", $date ) )
			->leftJoin ( "cs.CollectedReceipt cr" )
			->leftJoin ( "cr.Receipt r" )
			->where ( "DATE_FORMAT(rs.receivable_at,'%Y%m')= ? ", date ( "Ym", $date ) )
			->addWhere ( "rs.is_late = 1 AND rs.student_id = ? ", $student_id );

		return $q->limit ( 1 )
			->fetchOne ();
	}

	/**
	 * Lay thong tin ve muon cua 1 tháng
	 *
	 * @author Nguyen Chien Thang - ntsc279@gmail.com
	 * @version 2.0
	 * @param $student_id, int
	 * @param $intdate timestamp
	 *
	 */
	public function getLateOfStudentInMonth($student_id, $intdate) {

		$q = $this->createQuery ( 'rs' )
			->select ( "rs.id AS rs_id,rs.by_number AS rs_by_number," . "rs.spent_number AS rs_spent_number,rs.unit_price AS rs_unit_price, rs.amount AS rs_amount," . "rs.receivable_at AS rs_receivable_at,rs.note AS rs_note" )
			->where ( "DATE_FORMAT(rs.receivable_at,'%Y%m')= ? ", date ( "Ym", $intdate ) )
			->andWhere ( "rs.is_late = 1 AND rs.student_id = ? ", $student_id );

		return $q->limit ( 1 )
			->fetchOne ();
	}

	/**
	 * Kiem tra khoan phai thu ton tai chua
	 *
	 * @author Phung Van Thanh
	 * @param int $receivable_id,
	 *        	$student_id, $receivable_at
	 *        	
	 */
	public function checkReceivableStudentOfMonth($receivable_id, $student_id, $receivable_at) {

		$q = $this->createQuery ( 'c' )
			->select ( "c.id, c.student_id, c.receivable_at, CONCAT(s.first_name, ' ', s.last_name) AS student_name" );

		$q->leftJoin ( 'c.Student s' );

		$q->where ( 'c.student_id = ?', $student_id );

		$q->andWhere ( 'c.receivable_id = ?', $receivable_id );

		$q->andWhere ( 'DATE_FORMAT(c.receivable_at,"%Y%m") >= ?', date ( "Ym", strtotime ( $receivable_at ) ) );

		return $q->fetchOne ();
	}

	/**
	 * Dem xem da su dung dich vu bao nhieu lan
	 *
	 * @author Phung Van Thanh
	 *        
	 *         int $receivable_id, $student_id
	 */
	public function getCountMumberReceivableStudent($receivable_id, $student_id) {

		return $this->createQuery ( 'a' )
			->select ( 'a.id' )
			->addWhere ( 'a.receivable_id = ?', $receivable_id )
			->andWhere ( 'a.student_id = ?', $student_id )
			->count ();
	}

	/**
	 * Lay danh sach cac khoan bao phi cua thang
	 *
	 * @author Nguyen Chien Thang
	 *        
	 * @param $student_id int
	 * @param $date string
	 *        	format: yyyy-mm-dd
	 * @param $receiptPrevDate int
	 *        	strttime
	 */
	public function getReceivableStudentOfMonth($student_id, $date, $receiptPrevDate = null) {

		$int_date = PsDateTime::psDatetoTime ( $date );

		$q = $this->createQuery ( 'rs' );

		$q->select ( 'rs.id AS id, rs.receivable_id AS rs_receivable_id, rs.service_id AS rs_service_id, rs.by_number AS rs_by_number, rs.spent_number AS rs_spent_number' );

		$q->addSelect ( 'rs.unit_price AS rs_unit_price, rs.amount AS rs_amount,rs.is_late AS rs_is_late, rs.receivable_at AS rs_receivable_at, rs.receipt_date AS rs_receipt_date,rs.note AS rs_note' );

		$q->addSelect ( 'rs.number_month AS number_month, rs.discount AS rs_discount, rs.discount_amount AS rs_discount_amount' );

		$q->addSelect ( 'r.title AS r_title, s.title AS s_title, s.enable_roll AS rs_enable_roll, s.is_type_fee AS is_type_fee,s.iorder AS iorder' );

		$q->leftJoin ( "rs.Service s" );

		$q->leftJoin ( "rs.Receivable r" );

		$q->leftJoin ( "r.ReceivableTemp rt" );

		$q->where ( "rs.student_id = ? ", $student_id );

		$q->addWhere ( "DATE_FORMAT(rs.receipt_date,'%Y%m') <= ? ", date ( "Ym", $int_date ) );

		if ($receiptPrevDate != '') {
			//echo date("Ym",$receiptPrevDate);
			$q->addWhere ( "DATE_FORMAT(rs.receipt_date,'%Y%m') >= ? ", date("Ym",$receiptPrevDate) );
		}

		$q->orderBy ( "rs.is_late,rs.receivable_id,s.iorder,rs.receipt_date" );

		return $q->execute ();
	}

	/**
	 * Lay danh sach cac dich vu su dung va khoan phai thu khac
	 *
	 * @author Phung Van Thanh
	 *        
	 * @param $student_id int
	 * @param $date string
	 *        	format: yyyy-mm-dd
	 *        	
	 */
	public function getReceivableAndServiceStudentOfMonth($student_id, $date, $receiptPrevDate = null) {

		$int_date = PsDateTime::psDatetoTime ( $date );

		$q = $this->createQuery ( 'rs' );

		$q->select ( 'rs.id AS id, rs.receivable_id AS rs_receivable_id, rs.service_id AS rs_service_id, rs.by_number AS rs_by_number, rs.spent_number AS rs_spent_number, rs.hoantra AS hoantra' );

		$q->addSelect ( 'rs.unit_price AS rs_unit_price, rs.amount AS rs_amount,rs.is_late AS rs_is_late, rs.receivable_at AS rs_receivable_at, rs.receipt_date AS rs_receipt_date,rs.note AS rs_note' );

		$q->addSelect ( 'rs.discount AS rs_discount, rs.discount_amount AS rs_discount_amount' );

		$q->addSelect ( 'r.title AS r_title, s.title AS s_title, s.enable_roll AS rs_enable_roll, s.is_type_fee AS is_type_fee' );

		$q->leftJoin ( "rs.Service s" );

		$q->leftJoin ( "rs.Receivable r" );

		$q->leftJoin ( "r.ReceivableTemp rt" );

		$q->where ( "rs.student_id = ? ", $student_id );

		$q->addWhere ( "DATE_FORMAT(rs.receipt_date,'%Y%m') <= ? ", date ( "Ym", $int_date ) );

		if ($receiptPrevDate != '') {
			$q->addWhere ( "DATE_FORMAT(rs.receipt_date,'%Y%m') >= ? ", date ( "Ym", strtotime ( $receiptPrevDate ) ) );
		}

		$q->orderBy ( "rs.receipt_date ASC" );

		return $q->execute ();
	}

	/**
	 * Ham tinh tong so tien của một phiếu tháng đang chạy + các tháng trước chưa thanh toán
	 */
	public function getTotalAmountReceivableStudentOfMonth($student_id, $date, $receiptPrevDate = null) {

		$int_date = PsDateTime::psDatetoTime ( $date );

		$q = $this->createQuery ( 'rs' );

		$q->select ( 'SUM(rs.amount) As total_amount' );

		$q->where ( "rs.student_id = ? ", $student_id );

		// $q->addWhere ( "DATE_FORMAT(rs.receipt_date,'%Y%m') = ? ", date ( "Ym", $int_date ) );

		$q->addWhere ( "DATE_FORMAT(rs.receipt_date,'%Y%m') <= ? ", date ( "Ym", $int_date ) );

		if ($receiptPrevDate != '') {
			$q->addWhere ( "DATE_FORMAT(rs.receipt_date,'%Y%m') >= ? ", date("Ym",$receiptPrevDate));
		}

		return $q->fetchOne ();
	}

	/**
	 * Lay tong so tien cua cac khoan phai thu của 1 tháng *
	 */
	public function getTotalAmountReceivableStudentInMonth($student_id, $intdate) {

		$q = $this->createQuery ( 'rs' )
			->select ( "Sum(rs.amount) As total_amount" )
			->addWhere ( "DATE_FORMAT(rs.receipt_date,'%Y%m')=?", date ( "Ym", $intdate ) )
			->addWhere ( "DATE_FORMAT(rs.receivable_at,'%Y%m')=?", date ( "Ym", $intdate ) )
			->addWhere ( "rs.student_id=?", $student_id )
			->groupBy ( "rs.student_id, DATE_FORMAT(rs.receipt_date,'%Y%m')" );

		return $q->fetchOne ();
	}

	/**
	 * *
	 * Ham lay danh sach doi tuong ReceivableStudent thuoc ve 1 phieu thu
	 *
	 * @param $student_id- int
	 * @param $date -
	 *        	date: thang bao phi
	 *        	$receiptPrevDate: Ngay cua phieu thu gan nhat
	 */
	public function getObjectReceivableStudentOfMonth($student_id, $date, $receiptPrevDate = null) {

		$int_date = PsDateTime::psDatetoTime ( $date );

		$q = $this->createQuery ( 'rs' )
			->select ( 'rs.*' )
			->where ( "rs.student_id = ? ", $student_id );

		$q->addWhere ( "DATE_FORMAT(rs.receipt_date,'%Y%m') <= ? ", date ( "Ym", $int_date ) );

		if ($receiptPrevDate != '') {
			$q->addWhere ( "DATE_FORMAT(rs.receipt_date,'%Y%m') >= ? ", date ( "Ym", PsDateTime::psDatetoTime ( $receiptPrevDate ) ) );
		}

		return $q->execute ();
	}

	/**
	 * *
	 * Ham lay danh sach doi tuong ReceivableStudent cua 1 tháng
	 *
	 * @author Nguyen Chien Thang
	 * @param $student_id- int
	 * @param $date - date(yyyy-mm-dd)
	 */
	public function getReceivableStudentInMonth($student_id, $date) {

		$int_date = PsDateTime::psDatetoTime ( $date );

		$q = $this->createQuery ( 'rs' )
			->select ( 'rs.*' )
			->where ( "rs.student_id =?", $student_id );

		$q->addWhere ( "DATE_FORMAT(rs.receivable_at,'%Y%m') =?", date( "Ym", $int_date));

		return $q->execute ();
	}

	/**
	 * Hàm lấy danh sách các khoan phai thu khác của 1 học sinh trong tháng với
	 *
	 * @author Nguyen Chien Thang(ntsc279@gmail.com)
	 * @param $student_id, $date
	 */
	public function getListReceivableStudentInMonth($student_id, $date) {

		$int_date = PsDateTime::psDatetoTime ( $date );

		$q = $this->createQuery ( 'rs' )
			->select ( 'rs.id, rs.note AS note,rs.is_number as is_number, r.title AS title' );

		$q->addSelect ( 'CONCAT(u.first_name, " ", u.last_name) AS updated_by, rs.updated_at AS updated_at' );

		$q->leftJoin ( 'rs.UserUpdated u' );

		$q->innerJoin ( 'rs.Receivable r' );

		$q->where ( "rs.student_id = ? ", $student_id );

		$q->addWhere ( "DATE_FORMAT(rs.receivable_at,'%Y%m') = ? ", date("Ym",$int_date ) );

		return $q->execute ();
	}

	/**
	 * Ham kiem tra ReceivableStudent da co trong phieu bao-phieu thu nào chưa
	 *
	 * @param $student_id int
	 * @param $receivable_id int
	 * @param $receivable_at intdate
	 *
	 */
	public function checkReceivableStudentInReceiptExists($student_id, $rs_id, $receivable_at) {

		/*
		 * KO RO MUC DICH
		 * $q = $this->createQuery ( 'rs' );
		 * $q->where ( "r.id = ?", $rs_id);
		 * $q->addWhere ( "r.student_id = ?", $student_id);
		 * $q->addWhere("DATE_FORMAT(rs.receivable_at,'%Y%m') =?", PsDateTime::psTimetoDate($receivable_at,"Ym"));
		 * return $q->count();
		 */
	}

	/**
	 * *
	 * Ham lay thông tin chi tiết các khoản thu của phiếu báo
	 *
	 * @author Nguyen Chien Thang
	 * @param $student_id- int
	 * @param $date -
	 *        	date(yyyy-mm-dd)
	 */
	public function getInfoReceivableStudentInMonth($student_id, $date) {

		$int_date = PsDateTime::psDatetoTime ( $date );

		$q = $this->createQuery ( 'rs' )
			->select ( 'rs.*' );

		$q->addSelect ( 'r.title AS r_title, s.title AS s_title, s.enable_roll AS rs_enable_roll' );

		$q->leftJoin ( "rs.Service s" );

		$q->leftJoin ( "rs.Receivable r" );

		$q->where ( "rs.student_id =?", $student_id );

		$q->addWhere ( "DATE_FORMAT(rs.receivable_at,'%Y%m') =?", date("Ym",$int_date ) );

		return $q->execute ();
	}

	/* -----END: V2.0 ------------------------------------------------------------------------------------------------------------------ */

	/**
	 * Tim xem co ton tai gia tri duoc tinh lai cua nguoi dung khong
	 *
	 * @param int $student_id:
	 *        	id hoc sinh
	 * @param int $service_id:
	 *        	id dich vu
	 * @param
	 *        	int timestamp $date: Ngay nhap du lieu
	 */
	public function getAmountByReceivableStudent($student_id, $service_id, $date) {

		$q = $this->createQuery ( 'c' )
			->andWhere ( 'student_id = ?', $student_id )
			->andWhere ( 'service_id = ?', $service_id )
			->andWhere ( "DATE_FORMAT(receivable_at,'%Y%m') = ?", date ( 'Ym', $date ) );

		$result = $q->execute ();

		return $result [0];
	}

	/**
	 * Tim ReceivableStudent boi dieu kien
	 *
	 * @param int $service_id:
	 *        	id dich vu
	 * @param int $student_id:
	 *        	id hoc sinh
	 * @param timestamp $date:
	 *        	Ngay nhap du lieu
	 */
	public function findByReceivableStudent($service_id, $student_id, $date) {

		$q = $this->createQuery ( 'c' )
			->andWhere ( 'student_id = ?', $student_id )
			->andWhere ( 'service_id = ?', $service_id )
			->andWhere ( "DATE_FORMAT(receivable_at,'%Y%m') = ?", date ( 'Ym', $date ) );

		return $q->fetchOne ();
	}

	/**
	 * Cac khoan phai thu khac (Khoan phai thu khac)
	 *
	 * @param int $student_id
	 * @param timestamp $date:
	 *        	Ngay nhap du lieu
	 */
	public function getReceivableOnly($student_id, $date) {

		$q = $this->createQuery ( 'c' )
			->select ( "c.id,c.student_id,c.receivable_id,c.amount,c.receivable_at,c.note , r.title AS title" )
			->innerJoin ( 'c.Receivable r' )
			->andWhere ( 'c.student_id = ?', $student_id )
			->andWhere ( "DATE_FORMAT(receivable_at,'%Y%m') = ?", date ( 'Ym', $date ) );

		return $q->execute ();
	}

	/**
	 * Cac khoan phai thu khac (Khoan phai thu khac)
	 *
	 * @param int $student_id
	 * @param timestamp $date:
	 *        	Ngay nhap du lieu
	 */
	public function getReceivableOnlyCollectedStudent($student_id, $date) {

		$q = $this->createQuery ( 'c' )
			->select ( "c.id,c.student_id,c.receivable_id,c.amount,c.receivable_at,c.note ,c.by_number,c.spent_number,c.unit_price, r.title AS title, cs.id AS c_s_id" )
			->innerJoin ( 'c.Receivable r' )
			->leftJoin ( "c.CollectedStudent cs With DATE_FORMAT(cs.collected_at,'%Y%m')=?", date ( "Ym", $date ) )
			->andWhere ( 'c.student_id = ?', $student_id )
			->andWhere ( "DATE_FORMAT(receivable_at,'%Y%m') = ?", date ( 'Ym', $date ) );

		return $q->execute ();
	}

	/**
	 * *
	 * Cac khoan da thu
	 *
	 * @param int $student_id
	 * @param timestamp $date:
	 *        	Ngay nhap du lieu
	 */
	public function getCollectedStudentByDate($student_id, $date) {

		$q = $this->createQuery ()
			->select ( "rs.id, rs.service_id, rs.receivable_id
    				,(Case When s.id Is Null Then r.title Else s.title End) As title
    				,rs.amount
    				,cs.id As collected_student_id
    				,cs.amount As collected_amount" )
			->from ( 'ReceivableStudent rs' )
			->leftJoin ( "rs.Receivable r" )
			->leftJoin ( "rs.Service s" )
			->leftJoin ( "rs.CollectedStudent cs With DATE_FORMAT(cs.collected_at,'%Y%m')=?", date ( "Ym", $date ) )
			->addWhere ( "DATE_FORMAT(rs.receivable_at,'%Y%m')=?", date ( "Ym", $date ) )
			->addWhere ( "rs.student_id=?", $student_id );
		return $q->execute ();
	}

	/**
	 * Lay tong so tien cua cac khoan phai thu *
	 */
	public function getReceivableStudentTotalByDate($student_id, $date) {

		$q = $this->createQuery ( 'c' )
			->select ( "Sum(c.amount) As total" )
			->addWhere ( "DATE_FORMAT(c.receivable_at,'%Y%m')=?", date ( "Ym", $date ) )
			->addWhere ( "c.student_id=?", $student_id )
			->groupBy ( "c.student_id, DATE_FORMAT(c.receivable_at,'%Y%m')" );

		return $q->fetchOne ();
	}

	/**
	 * Kiem tra xem da dong tien ve muon hay chua *
	 */
	public function getReceivableStudentLateByDate($student_id, $date) {

		$q = $this->createQuery ( 'c' )
			->
		select ( "c.id,c.student_id, c.by_number, c.amount, c.receivable_at, c.note,cs.id AS cs_id, cs.collected_at AS collected_at, cs.amount AS cs_amount, cs.note AS cs_note  " )
			->innerJoin ( "c.CollectedStudent cs" )
			->where ( "DATE_FORMAT(c.receivable_at,'%Y%m')=?", date ( "Ym", $date ) )
			->addWhere ( "c.is_late = 1 AND c.student_id=?", $student_id );

		return $q->fetchOne ();
	}

	/**
	 *
	 * @param timestamp $date
	 */
	public function findOne($student_id, $service_id, $date) {

		$q = $this->createQuery ( 'c' )
			->innerJoin ( "c.CollectedStudent" )
			->addWhere ( "DATE_FORMAT(c.receivable_at,'%Y%m')=?", date ( "Ym", $date ) )
			->addWhere ( "c.student_id=?", $student_id )
			->addWhere ( "c.service_id=?", $service_id )
			->limit ( 1 );

		return $q->fetchOne ();
	}

	/**
	 * *
	 * Lay khoan da thu theo dich vu cua hoc sinh
	 *
	 * @author Nguyen Chien Thang
	 *        
	 * @param int $service_id
	 * @param int $student_id
	 * @param timestamp $date:
	 *        	Ngay nhap du lieu
	 */
	public function findOneOfStudent($service_id, $student_id, $date) {

		$q = $this->createQuery ()
			->select ( "rs.id, rs.service_id, rs.receivable_id
    				,rs.amount
    				,cs.note As collected_student_note
    				,cs.id As collected_student_id
    				,cs.amount As collected_amount" )
			->from ( 'ReceivableStudent rs' )
			->leftJoin ( "rs.Receivable r" )
			->leftJoin ( "rs.Service s With s.id = ?", $service_id )
			->leftJoin ( "rs.CollectedStudent cs With DATE_FORMAT(cs.collected_at,'%Y%m')=?", date ( "Ym", $date ) )
			->addWhere ( "DATE_FORMAT(rs.receivable_at,'%Y%m')=?", date ( "Ym", $date ) )
			->addWhere ( "rs.service_id = ? ", $service_id )
			->addWhere ( "rs.student_id = ? ", $student_id )
			->limit ( 1 );

		return $q->fetchOne ();
	}

	// public function getMaxReceivableAtStudent($student_id){
	// $q = $this->createQuery('rs')
	// ->select("rs.receivable_at AS receivable_at")
	// ->where("rs.student_id = ? ", $student_id)
	// ->orderBy('rs.receivable_at');
	// // die($q);
	// return $q->fetchOne();
	// }

	/**
	 * Lay so da dung
	 *
	 * @author thangnc
	 *        
	 * @param
	 *        	$receivable_id
	 * @return int
	 */
	public function getCountReceivableStudentOfReceivableId($receivable_id) {

		return $this->createQuery ( 'a' )
			->select ( 'a.id' )
			->addWhere ( 'a.receivable_id = ?', $receivable_id )
			->count ();
	}



	/**
	 * CAC HAM SU DUNG TRONG BAN MOI: Bat dau tu ngay: 20/10/2023 *
	 */


	// Kiểm tra tần xuất thu của dịch vụ này đối với học sinh

	public function kiemTraTanXuatThu($student_id, $service_id,$thangThuTruoc,$thangHienTai) {

		$q = $this->createQuery ( 'r' )
			->select ( 'r.id,r.is_number as is_number,r.receivable_at as receivable_at,r.note as note, r.number_month as number_month, r.receipt_date as receipt_date' )
			->addWhere ( "r.student_id = ? ", $student_id )
			->addWhere ( "r.service_id = ? ", $service_id )
			//->addWhere ( "DATE_FORMAT(r.receivable_at,'%Y%m')>=? and DATE_FORMAT(r.receivable_at,'%Y%m') <=?",array(date ( "Ym", strtotime($thangThuTruoc) ),date ( "Ym", strtotime($thangHienTai) )) )
			;
		$q->orderBy ( 'r.receivable_at DESC' );

		return $q->fetchOne ();
	}


}