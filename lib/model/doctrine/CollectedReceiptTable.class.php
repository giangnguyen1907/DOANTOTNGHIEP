<?php

/**
 * CollectedReceiptTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class CollectedReceiptTable extends Doctrine_Table {

	/**
	 * Returns an instance of this class.
	 *
	 * @return object CollectedReceiptTable
	 */
	public static function getInstance() {

		return Doctrine_Core::getTable ( 'CollectedReceipt' );
	}

	/**
	 * getSumAmountByCollectedStudent($collected_student_id, $date)
	 *
	 * @desc: Tinh tong so tien da thu cua mot dich vu tren tat
	 * ca cac phieu thu tinh toi thoi deim duoc chon
	 *
	 * @author Nguyen Chien Thang - ntsc279@gmail.com
	 * @version 2.0
	 *         
	 * @param int $collected_student_id,
	 *        	ma khoan da nop
	 * @param
	 *        	int timestamp $date: Ngay nhap du lieu
	 */
	public function getSumAmountByCollectedStudent($collected_student_id, $date = null) {

		$q = $this->createQuery ( 'cr' );
		$q->select ( "SUM(cr.amount) AS amount" );

		if ($date)
			$q->innerJoin ( "cr.Receipt r With (DATE_FORMAT(r.receipt_date,'%Y%m') < ?)", date ( 'Ym', $date ) );
		else
			$q->innerJoin ( "cr.Receipt r" );

		$q->where ( "cr.collected_student_id = ? ", $collected_student_id );

		$q->limit ( 1 );

		return $q->fetchOne ();
	}

	/* ---------------END NEW: V2.0 ---------------------------------------------------------------------------------------------------- */
	/**
	 * findAllOfReceipt($receipt_id)
	 *
	 * @desc: Tim tat cac cac dich vu cua phieu thu
	 *
	 * @author Nguyen Chien Thang - thangnc@ithanoi.com
	 *        
	 * @param
	 *        	int - $receipt_id, ma phieu thu
	 * @return List obj
	 */
	public function findAllOfReceipt($receipt_id) {

		$q = $this->createQuery ( 'cr' )
			->
		select ( "cr.id AS cr_id,cr.collected_student_id,sg.iorder,s.iorder,cr.spent_number AS cr_spent_number,cr.amount AS cr_amount, cr.pay_amount AS cr_pay_amount" )
			->
		addSelect ( ",(Case " . "When rs.is_late = 1 Then 'Về muộn'" . "When s.id Is Null Then r.title Else s.title End) As title" )
			->
		addSelect ( ",cs.id AS cs_id,cs.amount AS cs_amount,cs.collected_at, cs.note AS cs_note" )
			->
		addSelect ( ",rs.receivable_id AS receivable_id,rs.service_id AS service_id,rs.by_number AS rs_by_number,rs.spent_number AS rs_spent_number,rs.unit_price AS rs_unit_price, rs.amount AS rs_amount,rs.receivable_at AS rs_receivable_at,rs.note AS rs_note" )
			->addSelect ( ",rs.is_late AS is_late,rs.id AS rs_id" )
			->addSelect ( ",r.id AS r_id" )
			->addSelect ( ",s.id AS service_id" )
			->
		addSelect ( ",(Case When r.id Is Not Null Then 9000 
					When rs.is_late = 1 Then 9001 Else sg.iorder End) As iorder" )
			->
		innerJoin ( "cr.CollectedStudent cs" )
			->
		innerJoin ( "cs.ReceivableStudent rs" )
			->
		leftJoin ( "rs.Service s" )
			->leftJoin ( "s.ServiceGroup sg" )
			->
		leftJoin ( "rs.Receivable r" )
			->
		andWhere ( 'cr.receipt_id = ?', $receipt_id )
			->
		groupBy ( "rs.id" )
			->
		orderBy ( "rs.receivable_at, iorder,s.iorder" );

		return $q->execute ();
	}

	/**
	 * findAllOfReceipt($receipt_id)
	 *
	 * @desc: Tim tat cac cac dich vu cua phieu thu
	 *
	 * @author Nguyen Chien Thang - thangnc@ithano.com
	 *        
	 * @param
	 *        	int - $receipt_id, ma phieu thu
	 * @return List obj
	 */
	public function findAllLastMonthOfStudent($student_id, $date) {

		/*
		 * $q = $this->createQuery('cr')
		 * ->select("cr.id,cr.collected_student_id,cr.spent_number AS cr_spent_number,cr.amount AS cr_amount, SUM(cr.amount) AS sum_amount")
		 * ->addSelect(",(Case " .
		 * "When rs.is_late = 1 Then 'Về muộn'" .
		 * "When s.id Is Null Then r.title Else s.title End) As title")
		 * ->addSelect(",cs.id AS cs_id,cs.amount AS cs_amount,cs.collected_at, cs.note AS cs_note")
		 * ->addSelect(",rs.id,rs.service_id,rs.by_number AS rs_by_number,rs.spent_number AS rs_spent_number,rs.unit_price AS rs_unit_price, rs.amount AS rs_amount,rs.receivable_at AS rs_receivable_at,rs.note AS rs_note")
		 * ->leftJoin("cr.CollectedStudent cs")
		 * ->leftJoin("cs.ReceivableStudent rs With (rs.student_id = ? And DATE_FORMAT(rs.receivable_at,'%Y%m') <= ?)", array($student_id,date('Ym',$date)))
		 * ->leftJoin("rs.Service s")
		 * ->leftJoin("rs.Receivable r")
		 * ->where('rs.id Is not null And (cr.id Is null Or cs.id Is null Or s.id Is null Or r.id Is null)')
		 * ->groupBy("rs.id")
		 * ->having('SUM(cr.amount) < rs.amount')
		 * ->orderBy("rs.receivable_at,s.id");
		 */
		$q = $this->createQuery ()
			->
		select ( "cr.id,cr.collected_student_id,cr.spent_number AS cr_spent_number,cr.amount AS cr_amount, SUM(cr.amount) AS sum_amount" )
			->
		addSelect ( ",(Case " . "When rs.is_late = 1 Then 'Về muộn'" . "When s.id Is Null Then r.title Else s.title End) As title" )
			->
		addSelect ( ",cs.id AS cs_id,cs.amount AS cs_amount,cs.collected_at, cs.note AS cs_note" )
			->addSelect ( ",rs.id,rs.service_id,rs.by_number AS rs_by_number,rs.spent_number AS rs_spent_number,rs.unit_price AS rs_unit_price, rs.amount AS rs_amount,rs.receivable_at AS rs_receivable_at,rs.note AS rs_note" )
			->
		from ( "ReceivableStudent rs" )
			->leftJoin ( "rs.CollectedStudent cs" )
			->leftJoin ( "cs.CollectedReceipt cr" )
			->leftJoin ( "rs.Service s" )
			->leftJoin ( "rs.Receivable r" )
			->where ( 'rs.id Is not null And (cr.id Is null Or cs.id Is null Or s.id Is null Or r.id Is null)' )
			->addWhere ( "rs.student_id = ? ", $student_id )
			->addWhere ( "DATE_FORMAT(rs.receivable_at,'%Y%m') <= ?", date ( 'Ym', $date ) )
			->
		groupBy ( "rs.id" )
			->having ( 'SUM(cr.amount) < rs.amount Or cr.id Is null' )
			->orderBy ( "rs.receivable_at,s.id" );

		return $q->execute ();
	}
}