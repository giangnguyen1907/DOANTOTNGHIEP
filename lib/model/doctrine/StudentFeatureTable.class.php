<?php

/**
 * StudentFeatureTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class StudentFeatureTable extends Doctrine_Table {

	/**
	 * Returns an instance of this class.
	 *
	 * @return object StudentFeatureTable
	 */
	public static function getInstance() {

		return Doctrine_Core::getTable ( 'StudentFeature' );
	}

	public function doSelectQuery(Doctrine_Query $query) {

		$query = Doctrine_Query::create ()->from ( 'Student s' );

		$query->select ( 'sf.id as id, s.image AS image, ' . 's.id as student_id, ' . 's.sex AS sex, s.year_data,' . 'cus.school_code AS school_code,' . 'CONCAT(s.first_name, " ", s.last_name) AS student_name ' );

		$query->innerJoin ( 's.StudentClass sc' );

		$query->leftJoin ( 's.PsLogtimes lt' );

		$query->innerJoin ( 's.PsCustomer cus' );

		$query->leftJoin ( 's.StudentFeature sf' );

		$query->addWhere ( 's.deleted_at IS NULL' );

		// $query->WhereIn('s.status',[PreSchool::S_STATUS_ACTIVITIES,PreSchool::S_STATUS_SCHOOL_TEST]);

		$query->whereIn ( 'sc.type', array (
				PreSchool::SC_STATUS_OFFICIAL,
				PreSchool::SC_STATUS_TEST ) );

		$query->orderBy ( 's.last_name,s.first_name' );

		if (! myUser::credentialPsCustomers ( 'PS_STUDENT_FEATURE_FILTER_SCHOOL' ) && myUser::getPscustomerID () > 0) {
			$query->addWhere ( 's.ps_customer_id = ?', myUser::getPscustomerID () );
		}

		return $query;
	}

	public function checkStudentFeatureExits($student_id, $tracked_at, $note, $time_at, $feature_option_feature_id) {

		$q = $this->createQuery ( 'c' )
			->select ( "c.id" )
			->addWhere ( 'c.student_id = ? AND c.tracked_at = ? AND ( c.note = ? OR c.time_at = ? OR c.feature_option_feature_id = ? )', array (
				$student_id,
				$tracked_at,
				$note,
				$time_at,
				$feature_option_feature_id ) )
			->limit ( 1 );

		return $q->fetchOne ();
	}

	public function updateStudentFeatureByDate($student_id, $feature_branch_id, $tracked_at) {

		// $tracked_at = date('Ymd', $tracked_at);
		// print_r($tracked_at);die;
		// echo $tracked_at;die;
		$q = $this->createQuery ( 'c' )
			->where ( 'c.student_id = ? AND FOF.feature_branch_id = ? AND DATE_FORMAT(c.tracked_at,"%Y%m%d") = ?', array (
				$student_id,
				$feature_branch_id,
				date ( 'Ymd', $tracked_at ) ) );
		$q->innerJoin ( 'c.FeatureOptionFeature FOF' );
		return $q->execute ();
	}

	/**
	 * Lay so luong ban ghi StudentFeature boi $feature_option_feature_id
	 *
	 * @param $feature_option_feature_id -
	 *        	int
	 *        	
	 * @return boolean
	 */
	public function getNumberRecordStudentFeatureByFOFeatureId($feature_option_feature_id) {

		$q = $this->createQuery ( 'c' )
			->where ( 'feature_option_feature_id = ?', $feature_option_feature_id );

		return $q->count ();
	}

	/**
	 * lay so luong thao tac danh gia hoat dong theo tung giao vien
	 */
	public function countMemberFeatureOfMonth($member_id, $year_month, $date_at) {

		$tracked_at = '01-' . $year_month;

		$q = $this->createQuery ( 'c' )
			->innerJoin ( 'c.UserUpdated u' );
		if ($date_at != '') {
			$q->andWhere ( ' DATE_FORMAT(c.tracked_at,"%Y%m%d") = ?', date ( "Ymd", strtotime ( $date_at ) ) );
		} else {
			$q->addWhere ( 'DATE_FORMAT(c.tracked_at,"%Y%m") = ?', date ( "Ym", strtotime ( $tracked_at ) ) );
		}
		$q->addWhere ( 'u.member_id = ?', $member_id );
		$q->addGroupBy ( 'c.student_id', 'c.user_updated_id' );

		return $q->count ();
	}

	/**
	 * lấy đánh giá
	 *
	 * @param int $student_id
	 * @param int $feature_branch_id
	 * @param timestamp $tracked_at
	 * @return list obj
	 */
	public function getFeatureOption($student_id, $tracked_at) {

		$query = $this->createQuery ( 'c' );

		$query->select ( 'FO.id, FOF.id, FO.name AS feature_option_name, c.note AS feature_note' );

		$query->innerJoin ( 'c.FeatureOptionFeature FOF' );

		$query->innerJoin ( 'FOF.FeatureOption FO' );

		// $query->addWhere('FOF.feature_branch_id = ?', $feature_branch_id);

		$query->addWhere ( 'c.student_id = ?', $student_id );

		$query->addWhere ( 'DATE_FORMAT(c.tracked_at, "%Y%m%d") = ?', date ( 'Ymd', $tracked_at ) );

		return $query->execute ();
	}

	/**
	 * lấy đánh giá
	 *
	 * @param int $student_id
	 * @param int $feature_branch_id
	 * @param timestamp $tracked_at
	 * @return list obj
	 */
	public function getFeatureOptionStudent($student_id, $tracked_at) {

		$query = $this->createQuery ( 'c' );

		$query->select ( 'FO.id,FB.id as fb_id,FOF.id, FO.name AS feature_option_name, c.note AS feature_note,c.tracked_at AS tracked_at, FB.name as feature_name' );

		$query->innerJoin ( 'c.FeatureOptionFeature FOF' );

		$query->innerJoin ( 'FOF.FeatureOption FO' );

		$query->innerJoin ( 'FOF.FeatureBranch FB' );

		$query->addWhere ( 'c.student_id = ?', $student_id );

		$query->addWhere ( 'DATE_FORMAT(c.tracked_at, "%Y%m") = ?', date ( 'Ym', strtotime ( $tracked_at ) ) );

		$query->orderBy ( 'FB.id' );

		return $query->execute ();
	}

	public function getAllPsFeatureBranchTimeByCustomer($ps_school_year_id, $ps_customer_id, $ps_workplace_id, $date_at, $class_id = null) {

		$tracked_at = date ( "Ymd", PsDateTime::psDatetoTime ( $date_at ) );
		$q = $this->createQuery ( 'a' )
			->select ( 'a.id as id,sc.myclass_id as myclass_id,s.id as student_id, a.note as note' );
		$q->addSelect ( 'fb.name as fb_name,fb.id as ps_feature_branch_id, fof.id AS fof_id' );

		$q->innerJoin ( 'a.Student s' );
		$q->innerJoin ( 's.StudentClass sc' );
		$q->innerJoin ( 'sc.MyClass mc' );
		$q->innerJoin ( 'mc.PsClassRooms cr' );
		$q->innerJoin ( 's.PsCustomer cus' );

		$q->addWhere ( 's.deleted_at IS NULL' );
		$q->whereIn ( 'sc.type', array (
				PreSchool::SC_STATUS_OFFICIAL,
				PreSchool::SC_STATUS_TEST ) );

		$q->innerJoin ( 'a.FeatureOptionFeature fof' );
		$q->innerJoin ( 'fof.FeatureBranch fb' );
		$q->addWhere ( 'DATE_FORMAT(a.tracked_at,"%Y%m%d") = ?', $tracked_at );

		$q->andWhere ( ' DATE_FORMAT(sc.start_at,"%Y%m") <= ?', date ( "Ym", strtotime ( $tracked_at ) ) );
		$q->andWhere ( '(sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m") >= ?)', date ( "Ym", strtotime ( $tracked_at ) ) );

		$q->addWhere ( 'mc.school_year_id = ?', $ps_school_year_id );
		$q->andWhere ( 's.ps_customer_id = ?', $ps_customer_id );
		$q->andWhere ( 'fb.number_option >= ?', 1 );
		$q->andWhere ( 'fb.is_activated = ?', PreSchool::ACTIVE );
		if ($ps_workplace_id > 0) {
			$q->addWhere ( 'cr.ps_workplace_id = ?', $ps_workplace_id );
		}
		if ($class_id > 0) {
			$q->addWhere ( 'mc.id = ?', $class_id );
		}
		$q->orderBy ( 's.id ASC', 'fb.id ASC' );

		return $q->execute ();
	}

	public function getAllPsFeatureBranchTimeByCustomerMonth($ps_class_id, $date_at) {

		$tracked_at = date ( "Ymd", PsDateTime::psDatetoTime ( $date_at ) );
		$q = $this->createQuery ( 'a' )
			->select ( 'a.id as id,sc.myclass_id as myclass_id,s.id as student_id, a.tracked_at as tracked_at' );
		$q->addSelect ( 'fb.name as fb_name,fb.id as ps_feature_branch_id, fof.id AS fof_id,
        fbt.id as fbt_id,fbt.start_at as start_at, fbt.end_at as end_at' );

		$q->innerJoin ( 'a.Student s' );
		$q->innerJoin ( 's.StudentClass sc' );
		$q->innerJoin ( 'sc.MyClass mc' );
		$q->innerJoin ( 'mc.PsClassRooms cr' );
		$q->innerJoin ( 's.PsCustomer cus' );

		$q->addWhere ( 's.deleted_at IS NULL' );
		$q->whereIn ( 'sc.type', array (
				PreSchool::SC_STATUS_OFFICIAL,
				PreSchool::SC_STATUS_TEST ) );

		$q->innerJoin ( 'a.FeatureOptionFeature fof' );
		$q->innerJoin ( 'fof.FeatureBranch fb' );
		$q->innerJoin ( 'fb.FeatureBranchTimes fbt' );

		$q->addWhere ( 'DATE_FORMAT(a.tracked_at,"%Y%m") = ?', date ( "Ym", strtotime ( $date_at ) ) );

		$q->andWhere ( ' DATE_FORMAT(sc.start_at,"%Y%m") <= ?', date ( "Ym", strtotime ( $date_at ) ) );
		$q->andWhere ( '(sc.stop_at IS NULL OR  DATE_FORMAT(sc.stop_at,"%Y%m") >= ?)', date ( "Ym", strtotime ( $date_at ) ) );
		$q->andWhere ( 'mc.id =?', $ps_class_id );
		$q->andWhere ( 'fb.number_option >=?', 1 );
		$q->orderBy ( 's.id ASC', 'fb.id ASC' );

		return $q->execute ();
	}
}