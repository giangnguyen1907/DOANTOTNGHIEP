<?php

/**
 * PsExaminationTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PsExaminationTable extends Doctrine_Table {

	/**
	 * Returns an instance of this class.
	 *
	 * @return object PsExaminationTable
	 */
	public static function getInstance() {

		return Doctrine_Core::getTable ( 'PsExamination' );
	}

	public function doSelectQuery(Doctrine_Query $query) {

		$a = $query->getRootAlias ();

		$query->select ( $a . '.id AS id, ' . $a . '.ps_customer_id AS ps_customer_id, ' . $a . '.ps_workplace_id AS ps_workplace_id, ' . $a . '.name AS name, ' . $a . '.input_date_at AS input_date_at, ' . 'cus.title AS cus_title, ' . 'wp.title AS wp_title, ' );
		$query->addSelect ( 'CONCAT(u.first_name," ",u.last_name) AS updated_by' );

		$query->innerJoin ( $a . '.PsCustomer cus' );

		$query->innerJoin ( $a . '.PsWorkPlaces wp' );

		$query->leftJoin ( $a . '.UserUpdated u' );

		$query->orderBy ( $a . '.input_date_at asc' );

		return $query;
	}

	/**
	 * Ham lay chi tiet mot dot kham => Ham nay vo nghia ko cáº§n.
	 * nguoi ta dung: findOneById();
	 *
	 * @param unknown $examination
	 * @return mixed|boolean|Doctrine_Record|Doctrine_Collection*
	 */
	public function getExamination($examination_id) {

		$q = $this->createQuery ('a')
			->select ( 'a.id as id, CONCAT(a.name,": ", DATE_FORMAT(a.input_date_at, "%d/%m/%Y")) AS name' )
			->addWhere ( 'a.id =?', $examination_id );
		return $q->fetchOne ();
	}

	public function getAllExamination($examination_id = null, $ps_customer_id, $school_year_id) {

		$q = $this->createQuery ( 'ex' )
			->select ( 'ex.id as exid,ex.ps_workplace_id as ps_workplace_id, ex.name as name, ex.input_date_at as ex_input_date_at' );
		// ->leftJoin('ex.PsWorkPlaces wp');

		if ($examination_id > 0)
			$q->addWhere ( 'ex.id = ?', $examination_id );

		$q->addWhere ( 'ex.ps_customer_id = ?', $ps_customer_id );

		$q->addWhere ( 'ex.school_year_id = ?', $school_year_id );

		return $q->execute ();
	}

	/**
	 * setSqlListExaminationByParams($params)
	 *
	 * Ham set SQL lay cac dot kham cua mot co so
	 *
	 * @author Phung Van Thanh
	 * @param $params -
	 *        	mixed
	 *        	
	 * @return $sql
	 */
	public function setSqlListExaminationByParams($params = array()) {

		$q = $this->createQuery ( 'a' )
			->select ( 'a.id, CONCAT(a.name,": ", DATE_FORMAT(a.input_date_at, "%d/%m/%Y")) AS name, a.note,a.input_date_at AS input_date_at, a.name AS examination_name' );

		if (isset ( $params ['ps_customer_id'] ) && $params ['ps_customer_id'] > 0)
			$q->innerJoin ( 'a.PsCustomer cus With a.ps_customer_id = ?', $params ['ps_customer_id'] );
		else
			$q->innerJoin ( 'a.PsCustomer cus' );

		if (isset ( $params ['ps_workplace_id'] ) && $params ['ps_workplace_id'] > 0)
			$q->innerJoin ( 'a.PsWorkPlaces wp With a.ps_workplace_id = ?', $params ['ps_workplace_id'] );
		else
			$q->innerJoin ( 'a.PsWorkPlaces wp' );
		if (isset ( $params ['ps_school_year_id'] ) && $params ['ps_school_year_id'] > 0)
			$q->innerJoin ( 'a.PsSchoolYear scy With a.school_year_id = ?', $params ['ps_school_year_id'] );
		else
			$q->innerJoin ( 'a.PsSchoolYear scy' );
			
		$q->orderBy ( 'a.input_date_at DESC' );
		
		return $q;
	}
	
	/**
	 * getListExaminationByParams($params)
	 *
	 * Ham set SQL lay cac dot kham cua mot co so
	 *
	 * @author Phung Van Thanh
	 * @param $params -
	 *        	mixed
	 *
	 * @return $sql
	 */
	public function getListExaminationByParams($params = array()) {
		
		$q = $this->createQuery ( 'a' )
		->select ( 'a.id, CONCAT(a.name,": ", DATE_FORMAT(a.input_date_at, "%d/%m/%Y")) AS name, a.note,a.input_date_at AS input_date_at, a.name AS examination_name' );
		
		if (isset ( $params ['ps_customer_id'] ) && $params ['ps_customer_id'] > 0)
			$q->andWhere ( 'a.ps_customer_id = ?', $params ['ps_customer_id'] );
		
		if (isset ( $params ['ps_workplace_id'] ) && $params ['ps_workplace_id'] > 0)
			$q->andWhere ( 'a.ps_workplace_id = ?', $params ['ps_workplace_id'] );
		
		if (isset ( $params ['ps_school_year_id'] ) && $params ['ps_school_year_id'] > 0)
			$q->addWhere( 'a.school_year_id = ?', $params ['ps_school_year_id'] );
			
		if (isset ( $params ['ps_obj_group_id'] ) && $params ['ps_obj_group_id'] > 0)
			$q->andWhere('a.ps_obj_group_id IS NULL OR a.ps_obj_group_id =?',$params ['ps_obj_group_id']);
			
		if (isset ( $params ['orderby'] ) && $params ['orderby'] != '')
			$q->orderBy ( 'a.input_date_at ',$params ['orderby'] );
		else
			$q->orderBy ( 'a.input_date_at DESC' );
			
		return $q->execute();
	}
	
	
	public function getSQLByPsExaminationId($getField = null, $examination_id) {
		
		$q = $this->createQuery ()->select ( $getField != '' ? $getField : '*' );
		
		$q->addWhere ( 'id = ?', $examination_id );
		
		return $q->fetchOne();
	}
	
}