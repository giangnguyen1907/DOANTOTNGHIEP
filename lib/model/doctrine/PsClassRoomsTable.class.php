<?php
/**
 * PsClassRoomsTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PsClassRoomsTable extends Doctrine_Table {

	/**
	 * Returns an instance of this class.
	 *
	 * @return object PsClassRoomsTable
	 */
	public static function getInstance() {

		return Doctrine_Core::getTable ( 'PsClassRooms' );
	}

	/**
	 * FUNCTION: doSelectQuery(Doctrine_Query $query)
	 *
	 * @param
	 *        	Doctrine SQL
	 * @return string SQL
	 *        
	 */
	public function doSelectQuery(Doctrine_Query $query) {

		$a = $query->getRootAlias ();

		$query->select ( $a . '.id AS id, ' . $a . '.title AS title, ' . $a . '.is_activated AS is_activated, ' . $a . '.updated_at AS updated_at,' . $a . '.ps_workplace_id AS ps_workplace_id, ' . 'wp.title AS ps_workplace_title, ' . 'CONCAT(u.first_name, " ", u.last_name) AS updated_by' );

		$query->leftJoin ( $a . '.UserUpdated u' );

		$query->leftJoin ( $a . '.PsWorkPlaces wp' );
		$query->leftJoin ( 'wp.PsCustomer cus' );
		// $query->innerJoin('cus.PsWard pw');
		// $query->innerJoin('pw.PsDistrict d');
		// $query->innerJoin('d.PsProvince p');

		if (! myUser::credentialPsCustomers ( 'PS_SYSTEM_ROOMS_FILTER_SCHOOL' ) && myUser::getPscustomerID () > 0) {
			$query->addWhere ( 'wp.ps_customer_id = ?', myUser::getPscustomerID () );
		}

		return $query;
	}

	/**
	 * Tao SQL lay danh sach theo params
	 *
	 * @return list obj
	 *        
	 */
	public function setSqlParams($getField = 'c.id, c.title', $params = array()) {

		$q = $this->createQuery ( 'c' )
			->select ( $getField != '' ? $getField : '*' );

		$q->leftJoin ( 'c.PsWorkPlaces wp' );

		if (isset ( $params ['ps_customer_id'] ) && $params ['ps_customer_id'] > 0) {
			$q->innerJoin ( 'wp.PsCustomer cus' );
			$q->where ( 'wp.ps_customer_id = ?', $params ['ps_customer_id'] );
		}

		if (isset ( $params ['ps_workplace_id'] ) && $params ['ps_workplace_id'] != '') {

			$params ['ps_workplace_id'] = is_array ( $params ['ps_workplace_id'] ) ? $params ['ps_workplace_id'] : array (
					$params ['ps_workplace_id'] );

			$q->whereIn ( 'c.ps_workplace_id', $params ['ps_workplace_id'] );
		}

		if (isset ( $params ['is_activated'] ) && $params ['is_activated'] != null && $params ['is_activated'] >= 0)

			$q->addWhere ( 'c.is_activated = ?', $params ['is_activated'] );

		$q->addOrderBy ( 'iorder' );

		return $q;
	}

	/**
	 * Lay danh sach theo params
	 *
	 * @return list obj
	 *        
	 */
	public function getSqlParams($getField = 'id, title', $params) {

		$chois = array ();

		foreach ( $this->setSqlParams ( $getField, $params )
			->execute () as $obj ) {
			$chois [$obj->getId ()] = $obj->getTitle ();
		}

		return $chois;
	}

	/**
	 * Lay danh sach theo params
	 *
	 * @return list group obj by ps_workplace_id
	 *        
	 */
	public function getGroupPsClassRooms($ps_customer_id, $is_activated = null) {

		$ps_class_rooms = $this->createQuery ( 'a' )
			->select ( 'a.id, a.title,a.ps_workplace_id, b.title AS ps_work_place_title' )
			->leftJoin ( 'a.PsWorkPlaces b' )
			->where ( 'b.ps_customer_id = ?', $ps_customer_id );

		if ($is_activated != null)
			$ps_class_rooms->where ( 'b.is_activated = ?', $is_activated );

		$ps_class_rooms = $ps_class_rooms->execute ();

		$chois = array ();

		$count_ps_class_room = count ( $ps_class_rooms );

		for($i = 0; $i <= $count_ps_class_room - 1; $i ++) {
			for($j = 1; $j <= $count_ps_class_room; $j ++) {
				if ($ps_class_rooms [$i]->getPsWorkplaceId () == $ps_class_rooms [$j]->getPsWorkplaceId ()) {
					$chois [$ps_class_rooms [$i]->getPsWorkPlaceTitle ()] [$ps_class_rooms [$i]->getId ()] = $ps_class_rooms [$i]->getTitle ();
				}
			}
		}

		return $chois;
	}
}