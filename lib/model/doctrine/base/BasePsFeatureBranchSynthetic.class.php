<?php

/**
 * BasePsFeatureBranchSynthetic
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $ps_customer_id
 * @property integer $ps_class_id
 * @property integer $feature_id
 * @property integer $feature_sum
 * @property integer $note_sum
 * @property timestamp $tracked_at
 * @property integer $user_updated_id
 * @property Doctrine_Collection $FeatureBranch
 * @property sfGuardUser $UserUpdated
 * 
 * @method integer                  getPsCustomerId()    Returns the current record's "ps_customer_id" value
 * @method integer                  getPsClassId()       Returns the current record's "ps_class_id" value
 * @method integer                  getFeatureId()       Returns the current record's "feature_id" value
 * @method integer                  getFeatureSum()      Returns the current record's "feature_sum" value
 * @method integer                  getNoteSum()         Returns the current record's "note_sum" value
 * @method timestamp                getTrackedAt()       Returns the current record's "tracked_at" value
 * @method integer                  getUserUpdatedId()   Returns the current record's "user_updated_id" value
 * @method Doctrine_Collection      getFeatureBranch()   Returns the current record's "FeatureBranch" collection
 * @method sfGuardUser              getUserUpdated()     Returns the current record's "UserUpdated" value
 * @method PsFeatureBranchSynthetic setPsCustomerId()    Sets the current record's "ps_customer_id" value
 * @method PsFeatureBranchSynthetic setPsClassId()       Sets the current record's "ps_class_id" value
 * @method PsFeatureBranchSynthetic setFeatureId()       Sets the current record's "feature_id" value
 * @method PsFeatureBranchSynthetic setFeatureSum()      Sets the current record's "feature_sum" value
 * @method PsFeatureBranchSynthetic setNoteSum()         Sets the current record's "note_sum" value
 * @method PsFeatureBranchSynthetic setTrackedAt()       Sets the current record's "tracked_at" value
 * @method PsFeatureBranchSynthetic setUserUpdatedId()   Sets the current record's "user_updated_id" value
 * @method PsFeatureBranchSynthetic setFeatureBranch()   Sets the current record's "FeatureBranch" collection
 * @method PsFeatureBranchSynthetic setUserUpdated()     Sets the current record's "UserUpdated" value
 * 
 * @package    KidsSchool.vn
 * @subpackage model
 * @author     KidsSchool.vn <contact@kidsschool.vn>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BasePsFeatureBranchSynthetic extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('ps_feature_branch_synthetic');
        $this->hasColumn('ps_customer_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('ps_class_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('feature_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('feature_sum', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('note_sum', 'integer', 3, array(
             'type' => 'integer',
             'length' => 3,
             ));
        $this->hasColumn('tracked_at', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('user_updated_id', 'integer', null, array(
             'type' => 'integer',
             ));

        $this->option('type', 'InnoDB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
        $this->option('symfony', array(
             'form' => false,
             'filter' => false,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('FeatureBranch', array(
             'local' => 'id',
             'foreign' => 'feature_id'));

        $this->hasOne('sfGuardUser as UserUpdated', array(
             'local' => 'user_updated_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}