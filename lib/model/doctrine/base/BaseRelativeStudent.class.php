<?php

/**
 * BaseRelativeStudent
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $student_id
 * @property integer $relative_id
 * @property integer $relationship_id
 * @property boolean $is_parent_main
 * @property boolean $is_parent
 * @property boolean $is_role
 * @property boolean $role_service
 * @property integer $iorder
 * @property integer $user_created_id
 * @property integer $user_updated_id
 * @property Student $Student
 * @property Relative $Relative
 * @property Relationship $Relationship
 * @property sfGuardUser $UserCreated
 * @property sfGuardUser $UserUpdated
 * 
 * @method integer         getStudentId()       Returns the current record's "student_id" value
 * @method integer         getRelativeId()      Returns the current record's "relative_id" value
 * @method integer         getRelationshipId()  Returns the current record's "relationship_id" value
 * @method boolean         getIsParentMain()    Returns the current record's "is_parent_main" value
 * @method boolean         getIsParent()        Returns the current record's "is_parent" value
 * @method boolean         getIsRole()          Returns the current record's "is_role" value
 * @method boolean         getRoleService()     Returns the current record's "role_service" value
 * @method integer         getIorder()          Returns the current record's "iorder" value
 * @method integer         getUserCreatedId()   Returns the current record's "user_created_id" value
 * @method integer         getUserUpdatedId()   Returns the current record's "user_updated_id" value
 * @method Student         getStudent()         Returns the current record's "Student" value
 * @method Relative        getRelative()        Returns the current record's "Relative" value
 * @method Relationship    getRelationship()    Returns the current record's "Relationship" value
 * @method sfGuardUser     getUserCreated()     Returns the current record's "UserCreated" value
 * @method sfGuardUser     getUserUpdated()     Returns the current record's "UserUpdated" value
 * @method RelativeStudent setStudentId()       Sets the current record's "student_id" value
 * @method RelativeStudent setRelativeId()      Sets the current record's "relative_id" value
 * @method RelativeStudent setRelationshipId()  Sets the current record's "relationship_id" value
 * @method RelativeStudent setIsParentMain()    Sets the current record's "is_parent_main" value
 * @method RelativeStudent setIsParent()        Sets the current record's "is_parent" value
 * @method RelativeStudent setIsRole()          Sets the current record's "is_role" value
 * @method RelativeStudent setRoleService()     Sets the current record's "role_service" value
 * @method RelativeStudent setIorder()          Sets the current record's "iorder" value
 * @method RelativeStudent setUserCreatedId()   Sets the current record's "user_created_id" value
 * @method RelativeStudent setUserUpdatedId()   Sets the current record's "user_updated_id" value
 * @method RelativeStudent setStudent()         Sets the current record's "Student" value
 * @method RelativeStudent setRelative()        Sets the current record's "Relative" value
 * @method RelativeStudent setRelationship()    Sets the current record's "Relationship" value
 * @method RelativeStudent setUserCreated()     Sets the current record's "UserCreated" value
 * @method RelativeStudent setUserUpdated()     Sets the current record's "UserUpdated" value
 * 
 * @package    KidsSchool.vn
 * @subpackage model
 * @author     KidsSchool.vn <contact@kidsschool.vn>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseRelativeStudent extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('relative_student');
        $this->hasColumn('student_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('relative_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('relationship_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('is_parent_main', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('is_parent', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('is_role', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('role_service', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             'default' => 0,
             ));
        $this->hasColumn('iorder', 'integer', 11, array(
             'type' => 'integer',
             'default' => 1,
             'length' => 11,
             ));
        $this->hasColumn('user_created_id', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('user_updated_id', 'integer', null, array(
             'type' => 'integer',
             ));

        $this->option('type', 'InnoDB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Student', array(
             'local' => 'student_id',
             'foreign' => 'id'));

        $this->hasOne('Relative', array(
             'local' => 'relative_id',
             'foreign' => 'id'));

        $this->hasOne('Relationship', array(
             'local' => 'relationship_id',
             'foreign' => 'id'));

        $this->hasOne('sfGuardUser as UserCreated', array(
             'local' => 'user_created_id',
             'foreign' => 'id'));

        $this->hasOne('sfGuardUser as UserUpdated', array(
             'local' => 'user_updated_id',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}